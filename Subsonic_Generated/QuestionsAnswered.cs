using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Eventomatic_DB
{
	/// <summary>
	/// Strongly-typed collection for the QuestionsAnswered class.
	/// </summary>
    [Serializable]
	public partial class QuestionsAnsweredCollection : ActiveList<QuestionsAnswered, QuestionsAnsweredCollection>
	{	   
		public QuestionsAnsweredCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>QuestionsAnsweredCollection</returns>
		public QuestionsAnsweredCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                QuestionsAnswered o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Questions_Answered table.
	/// </summary>
	[Serializable]
	public partial class QuestionsAnswered : ActiveRecord<QuestionsAnswered>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public QuestionsAnswered()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public QuestionsAnswered(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public QuestionsAnswered(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public QuestionsAnswered(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Questions_Answered", TableType.Table, DataService.GetInstance("Eventomatic"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarQuestionsAnsweredKey = new TableSchema.TableColumn(schema);
				colvarQuestionsAnsweredKey.ColumnName = "Questions_Answered_key";
				colvarQuestionsAnsweredKey.DataType = DbType.Int32;
				colvarQuestionsAnsweredKey.MaxLength = 0;
				colvarQuestionsAnsweredKey.AutoIncrement = true;
				colvarQuestionsAnsweredKey.IsNullable = false;
				colvarQuestionsAnsweredKey.IsPrimaryKey = true;
				colvarQuestionsAnsweredKey.IsForeignKey = true;
				colvarQuestionsAnsweredKey.IsReadOnly = false;
				colvarQuestionsAnsweredKey.DefaultSetting = @"";
				
					colvarQuestionsAnsweredKey.ForeignKeyTableName = "Questions_Answered";
				schema.Columns.Add(colvarQuestionsAnsweredKey);
				
				TableSchema.TableColumn colvarTxKey = new TableSchema.TableColumn(schema);
				colvarTxKey.ColumnName = "Tx_Key";
				colvarTxKey.DataType = DbType.Int32;
				colvarTxKey.MaxLength = 0;
				colvarTxKey.AutoIncrement = false;
				colvarTxKey.IsNullable = false;
				colvarTxKey.IsPrimaryKey = false;
				colvarTxKey.IsForeignKey = true;
				colvarTxKey.IsReadOnly = false;
				colvarTxKey.DefaultSetting = @"";
				
					colvarTxKey.ForeignKeyTableName = "Transactions";
				schema.Columns.Add(colvarTxKey);
				
				TableSchema.TableColumn colvarQuestionKey = new TableSchema.TableColumn(schema);
				colvarQuestionKey.ColumnName = "Question_Key";
				colvarQuestionKey.DataType = DbType.Int32;
				colvarQuestionKey.MaxLength = 0;
				colvarQuestionKey.AutoIncrement = false;
				colvarQuestionKey.IsNullable = false;
				colvarQuestionKey.IsPrimaryKey = false;
				colvarQuestionKey.IsForeignKey = false;
				colvarQuestionKey.IsReadOnly = false;
				colvarQuestionKey.DefaultSetting = @"";
				colvarQuestionKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuestionKey);
				
				TableSchema.TableColumn colvarTheAnswer = new TableSchema.TableColumn(schema);
				colvarTheAnswer.ColumnName = "The_Answer";
				colvarTheAnswer.DataType = DbType.String;
				colvarTheAnswer.MaxLength = 500;
				colvarTheAnswer.AutoIncrement = false;
				colvarTheAnswer.IsNullable = true;
				colvarTheAnswer.IsPrimaryKey = false;
				colvarTheAnswer.IsForeignKey = false;
				colvarTheAnswer.IsReadOnly = false;
				colvarTheAnswer.DefaultSetting = @"";
				colvarTheAnswer.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTheAnswer);
				
				TableSchema.TableColumn colvarEventKey = new TableSchema.TableColumn(schema);
				colvarEventKey.ColumnName = "Event_Key";
				colvarEventKey.DataType = DbType.Int32;
				colvarEventKey.MaxLength = 0;
				colvarEventKey.AutoIncrement = false;
				colvarEventKey.IsNullable = true;
				colvarEventKey.IsPrimaryKey = false;
				colvarEventKey.IsForeignKey = true;
				colvarEventKey.IsReadOnly = false;
				colvarEventKey.DefaultSetting = @"";
				
					colvarEventKey.ForeignKeyTableName = "Events";
				schema.Columns.Add(colvarEventKey);
				
				TableSchema.TableColumn colvarTicketsPurchasedKey = new TableSchema.TableColumn(schema);
				colvarTicketsPurchasedKey.ColumnName = "Tickets_Purchased_Key";
				colvarTicketsPurchasedKey.DataType = DbType.Int32;
				colvarTicketsPurchasedKey.MaxLength = 0;
				colvarTicketsPurchasedKey.AutoIncrement = false;
				colvarTicketsPurchasedKey.IsNullable = true;
				colvarTicketsPurchasedKey.IsPrimaryKey = false;
				colvarTicketsPurchasedKey.IsForeignKey = true;
				colvarTicketsPurchasedKey.IsReadOnly = false;
				colvarTicketsPurchasedKey.DefaultSetting = @"";
				
					colvarTicketsPurchasedKey.ForeignKeyTableName = "Tickets_Purchased";
				schema.Columns.Add(colvarTicketsPurchasedKey);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Eventomatic"].AddSchema("Questions_Answered",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("QuestionsAnsweredKey")]
		[Bindable(true)]
		public int QuestionsAnsweredKey 
		{
			get { return GetColumnValue<int>(Columns.QuestionsAnsweredKey); }
			set { SetColumnValue(Columns.QuestionsAnsweredKey, value); }
		}
		  
		[XmlAttribute("TxKey")]
		[Bindable(true)]
		public int TxKey 
		{
			get { return GetColumnValue<int>(Columns.TxKey); }
			set { SetColumnValue(Columns.TxKey, value); }
		}
		  
		[XmlAttribute("QuestionKey")]
		[Bindable(true)]
		public int QuestionKey 
		{
			get { return GetColumnValue<int>(Columns.QuestionKey); }
			set { SetColumnValue(Columns.QuestionKey, value); }
		}
		  
		[XmlAttribute("TheAnswer")]
		[Bindable(true)]
		public string TheAnswer 
		{
			get { return GetColumnValue<string>(Columns.TheAnswer); }
			set { SetColumnValue(Columns.TheAnswer, value); }
		}
		  
		[XmlAttribute("EventKey")]
		[Bindable(true)]
		public int? EventKey 
		{
			get { return GetColumnValue<int?>(Columns.EventKey); }
			set { SetColumnValue(Columns.EventKey, value); }
		}
		  
		[XmlAttribute("TicketsPurchasedKey")]
		[Bindable(true)]
		public int? TicketsPurchasedKey 
		{
			get { return GetColumnValue<int?>(Columns.TicketsPurchasedKey); }
			set { SetColumnValue(Columns.TicketsPurchasedKey, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public Eventomatic_DB.QuestionsAnsweredCollection ChildQuestionsAnsweredRecords()
		{
			return new Eventomatic_DB.QuestionsAnsweredCollection().Where(QuestionsAnswered.Columns.QuestionsAnsweredKey, QuestionsAnsweredKey).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a EventX ActiveRecord object related to this QuestionsAnswered
		/// 
		/// </summary>
		public Eventomatic_DB.EventX EventX
		{
			get { return Eventomatic_DB.EventX.FetchByID(this.EventKey); }
			set { SetColumnValue("Event_Key", value.EventKey); }
		}
		
		
		/// <summary>
		/// Returns a TicketsPurchased ActiveRecord object related to this QuestionsAnswered
		/// 
		/// </summary>
		public Eventomatic_DB.TicketsPurchased TicketsPurchased
		{
			get { return Eventomatic_DB.TicketsPurchased.FetchByID(this.TicketsPurchasedKey); }
			set { SetColumnValue("Tickets_Purchased_Key", value.TicketsPurchasedKey); }
		}
		
		
		/// <summary>
		/// Returns a QuestionsAnswered ActiveRecord object related to this QuestionsAnswered
		/// 
		/// </summary>
		public Eventomatic_DB.QuestionsAnswered ParentQuestionsAnswered
		{
			get { return Eventomatic_DB.QuestionsAnswered.FetchByID(this.QuestionsAnsweredKey); }
			set { SetColumnValue("Questions_Answered_key", value.QuestionsAnsweredKey); }
		}
		
		
		/// <summary>
		/// Returns a Transaction ActiveRecord object related to this QuestionsAnswered
		/// 
		/// </summary>
		public Eventomatic_DB.Transaction Transaction
		{
			get { return Eventomatic_DB.Transaction.FetchByID(this.TxKey); }
			set { SetColumnValue("Tx_Key", value.TxKey); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varTxKey,int varQuestionKey,string varTheAnswer,int? varEventKey,int? varTicketsPurchasedKey)
		{
			QuestionsAnswered item = new QuestionsAnswered();
			
			item.TxKey = varTxKey;
			
			item.QuestionKey = varQuestionKey;
			
			item.TheAnswer = varTheAnswer;
			
			item.EventKey = varEventKey;
			
			item.TicketsPurchasedKey = varTicketsPurchasedKey;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varQuestionsAnsweredKey,int varTxKey,int varQuestionKey,string varTheAnswer,int? varEventKey,int? varTicketsPurchasedKey)
		{
			QuestionsAnswered item = new QuestionsAnswered();
			
				item.QuestionsAnsweredKey = varQuestionsAnsweredKey;
			
				item.TxKey = varTxKey;
			
				item.QuestionKey = varQuestionKey;
			
				item.TheAnswer = varTheAnswer;
			
				item.EventKey = varEventKey;
			
				item.TicketsPurchasedKey = varTicketsPurchasedKey;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn QuestionsAnsweredKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn TxKeyColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn QuestionKeyColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn TheAnswerColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn EventKeyColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn TicketsPurchasedKeyColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string QuestionsAnsweredKey = @"Questions_Answered_key";
			 public static string TxKey = @"Tx_Key";
			 public static string QuestionKey = @"Question_Key";
			 public static string TheAnswer = @"The_Answer";
			 public static string EventKey = @"Event_Key";
			 public static string TicketsPurchasedKey = @"Tickets_Purchased_Key";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
