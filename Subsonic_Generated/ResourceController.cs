using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Eventomatic_DB
{
    /// <summary>
    /// Controller class for Resource
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class ResourceController
    {
        // Preload our schema..
        Resource thisSchemaLoad = new Resource();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public ResourceCollection FetchAll()
        {
            ResourceCollection coll = new ResourceCollection();
            Query qry = new Query(Resource.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public ResourceCollection FetchByID(object ResourceKey)
        {
            ResourceCollection coll = new ResourceCollection().Where("Resource_Key", ResourceKey).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public ResourceCollection FetchByQuery(Query qry)
        {
            ResourceCollection coll = new ResourceCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object ResourceKey)
        {
            return (Resource.Delete(ResourceKey) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object ResourceKey)
        {
            return (Resource.Destroy(ResourceKey) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(string GroupName,long FBCreator,DateTime SignedUp,DateTime LastChange,string DesiredCurrency,string EmailPaypal,decimal? ServiceFeePercentage,decimal? ServiceFeeCents,decimal? ServiceFeeMax,bool? Demo,string StoreDescription,string StoreContact,string StoreTitle,int? PayMethod,bool? AdminActive,int? NetworkKey,bool? MobileSales,string PermRequestToken,string PermVerificationCode,bool? Dodirectpayment,string PfConfirmation,string PermAccessToken,string PermAccessTokenSecret,bool? ThirdPartyPayPal,string Descriptor,string Payerid)
	    {
		    Resource item = new Resource();
		    
            item.GroupName = GroupName;
            
            item.FBCreator = FBCreator;
            
            item.SignedUp = SignedUp;
            
            item.LastChange = LastChange;
            
            item.DesiredCurrency = DesiredCurrency;
            
            item.EmailPaypal = EmailPaypal;
            
            item.ServiceFeePercentage = ServiceFeePercentage;
            
            item.ServiceFeeCents = ServiceFeeCents;
            
            item.ServiceFeeMax = ServiceFeeMax;
            
            item.Demo = Demo;
            
            item.StoreDescription = StoreDescription;
            
            item.StoreContact = StoreContact;
            
            item.StoreTitle = StoreTitle;
            
            item.PayMethod = PayMethod;
            
            item.AdminActive = AdminActive;
            
            item.NetworkKey = NetworkKey;
            
            item.MobileSales = MobileSales;
            
            item.PermRequestToken = PermRequestToken;
            
            item.PermVerificationCode = PermVerificationCode;
            
            item.Dodirectpayment = Dodirectpayment;
            
            item.PfConfirmation = PfConfirmation;
            
            item.PermAccessToken = PermAccessToken;
            
            item.PermAccessTokenSecret = PermAccessTokenSecret;
            
            item.ThirdPartyPayPal = ThirdPartyPayPal;
            
            item.Descriptor = Descriptor;
            
            item.Payerid = Payerid;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int ResourceKey,string GroupName,long FBCreator,DateTime SignedUp,DateTime LastChange,string DesiredCurrency,string EmailPaypal,decimal? ServiceFeePercentage,decimal? ServiceFeeCents,decimal? ServiceFeeMax,bool? Demo,string StoreDescription,string StoreContact,string StoreTitle,int? PayMethod,bool? AdminActive,int? NetworkKey,bool? MobileSales,string PermRequestToken,string PermVerificationCode,bool? Dodirectpayment,string PfConfirmation,string PermAccessToken,string PermAccessTokenSecret,bool? ThirdPartyPayPal,string Descriptor,string Payerid)
	    {
		    Resource item = new Resource();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.ResourceKey = ResourceKey;
				
			item.GroupName = GroupName;
				
			item.FBCreator = FBCreator;
				
			item.SignedUp = SignedUp;
				
			item.LastChange = LastChange;
				
			item.DesiredCurrency = DesiredCurrency;
				
			item.EmailPaypal = EmailPaypal;
				
			item.ServiceFeePercentage = ServiceFeePercentage;
				
			item.ServiceFeeCents = ServiceFeeCents;
				
			item.ServiceFeeMax = ServiceFeeMax;
				
			item.Demo = Demo;
				
			item.StoreDescription = StoreDescription;
				
			item.StoreContact = StoreContact;
				
			item.StoreTitle = StoreTitle;
				
			item.PayMethod = PayMethod;
				
			item.AdminActive = AdminActive;
				
			item.NetworkKey = NetworkKey;
				
			item.MobileSales = MobileSales;
				
			item.PermRequestToken = PermRequestToken;
				
			item.PermVerificationCode = PermVerificationCode;
				
			item.Dodirectpayment = Dodirectpayment;
				
			item.PfConfirmation = PfConfirmation;
				
			item.PermAccessToken = PermAccessToken;
				
			item.PermAccessTokenSecret = PermAccessTokenSecret;
				
			item.ThirdPartyPayPal = ThirdPartyPayPal;
				
			item.Descriptor = Descriptor;
				
			item.Payerid = Payerid;
				
	        item.Save(UserName);
	    }
    }
}
