using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Eventomatic_DB
{
	/// <summary>
	/// Strongly-typed collection for the TransactionsOut class.
	/// </summary>
    [Serializable]
	public partial class TransactionsOutCollection : ActiveList<TransactionsOut, TransactionsOutCollection>
	{	   
		public TransactionsOutCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TransactionsOutCollection</returns>
		public TransactionsOutCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TransactionsOut o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Transactions_Out table.
	/// </summary>
	[Serializable]
	public partial class TransactionsOut : ActiveRecord<TransactionsOut>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TransactionsOut()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TransactionsOut(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TransactionsOut(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TransactionsOut(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Transactions_Out", TableType.Table, DataService.GetInstance("Eventomatic"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarTxOutKey = new TableSchema.TableColumn(schema);
				colvarTxOutKey.ColumnName = "Tx_Out_Key";
				colvarTxOutKey.DataType = DbType.Int32;
				colvarTxOutKey.MaxLength = 0;
				colvarTxOutKey.AutoIncrement = true;
				colvarTxOutKey.IsNullable = false;
				colvarTxOutKey.IsPrimaryKey = true;
				colvarTxOutKey.IsForeignKey = false;
				colvarTxOutKey.IsReadOnly = false;
				colvarTxOutKey.DefaultSetting = @"";
				colvarTxOutKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTxOutKey);
				
				TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
				colvarAmount.ColumnName = "Amount";
				colvarAmount.DataType = DbType.Currency;
				colvarAmount.MaxLength = 0;
				colvarAmount.AutoIncrement = false;
				colvarAmount.IsNullable = false;
				colvarAmount.IsPrimaryKey = false;
				colvarAmount.IsForeignKey = false;
				colvarAmount.IsReadOnly = false;
				colvarAmount.DefaultSetting = @"";
				colvarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmount);
				
				TableSchema.TableColumn colvarEmailRecipient = new TableSchema.TableColumn(schema);
				colvarEmailRecipient.ColumnName = "Email_Recipient";
				colvarEmailRecipient.DataType = DbType.String;
				colvarEmailRecipient.MaxLength = 200;
				colvarEmailRecipient.AutoIncrement = false;
				colvarEmailRecipient.IsNullable = false;
				colvarEmailRecipient.IsPrimaryKey = false;
				colvarEmailRecipient.IsForeignKey = false;
				colvarEmailRecipient.IsReadOnly = false;
				colvarEmailRecipient.DefaultSetting = @"";
				colvarEmailRecipient.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmailRecipient);
				
				TableSchema.TableColumn colvarTxDate = new TableSchema.TableColumn(schema);
				colvarTxDate.ColumnName = "tx_date";
				colvarTxDate.DataType = DbType.DateTime;
				colvarTxDate.MaxLength = 0;
				colvarTxDate.AutoIncrement = false;
				colvarTxDate.IsNullable = false;
				colvarTxDate.IsPrimaryKey = false;
				colvarTxDate.IsForeignKey = false;
				colvarTxDate.IsReadOnly = false;
				colvarTxDate.DefaultSetting = @"";
				colvarTxDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTxDate);
				
				TableSchema.TableColumn colvarResourceKey = new TableSchema.TableColumn(schema);
				colvarResourceKey.ColumnName = "Resource_Key";
				colvarResourceKey.DataType = DbType.Int32;
				colvarResourceKey.MaxLength = 0;
				colvarResourceKey.AutoIncrement = false;
				colvarResourceKey.IsNullable = false;
				colvarResourceKey.IsPrimaryKey = false;
				colvarResourceKey.IsForeignKey = false;
				colvarResourceKey.IsReadOnly = false;
				colvarResourceKey.DefaultSetting = @"";
				colvarResourceKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarResourceKey);
				
				TableSchema.TableColumn colvarEventKey = new TableSchema.TableColumn(schema);
				colvarEventKey.ColumnName = "Event_Key";
				colvarEventKey.DataType = DbType.Int32;
				colvarEventKey.MaxLength = 0;
				colvarEventKey.AutoIncrement = false;
				colvarEventKey.IsNullable = false;
				colvarEventKey.IsPrimaryKey = false;
				colvarEventKey.IsForeignKey = false;
				colvarEventKey.IsReadOnly = false;
				colvarEventKey.DefaultSetting = @"";
				colvarEventKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEventKey);
				
				TableSchema.TableColumn colvarPaypalFee = new TableSchema.TableColumn(schema);
				colvarPaypalFee.ColumnName = "Paypal_Fee";
				colvarPaypalFee.DataType = DbType.Currency;
				colvarPaypalFee.MaxLength = 0;
				colvarPaypalFee.AutoIncrement = false;
				colvarPaypalFee.IsNullable = false;
				colvarPaypalFee.IsPrimaryKey = false;
				colvarPaypalFee.IsForeignKey = false;
				colvarPaypalFee.IsReadOnly = false;
				colvarPaypalFee.DefaultSetting = @"";
				colvarPaypalFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaypalFee);
				
				TableSchema.TableColumn colvarCurrency = new TableSchema.TableColumn(schema);
				colvarCurrency.ColumnName = "Currency";
				colvarCurrency.DataType = DbType.String;
				colvarCurrency.MaxLength = 3;
				colvarCurrency.AutoIncrement = false;
				colvarCurrency.IsNullable = false;
				colvarCurrency.IsPrimaryKey = false;
				colvarCurrency.IsForeignKey = false;
				colvarCurrency.IsReadOnly = false;
				colvarCurrency.DefaultSetting = @"";
				colvarCurrency.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrency);
				
				TableSchema.TableColumn colvarFBid = new TableSchema.TableColumn(schema);
				colvarFBid.ColumnName = "FBid";
				colvarFBid.DataType = DbType.Int64;
				colvarFBid.MaxLength = 0;
				colvarFBid.AutoIncrement = false;
				colvarFBid.IsNullable = false;
				colvarFBid.IsPrimaryKey = false;
				colvarFBid.IsForeignKey = false;
				colvarFBid.IsReadOnly = false;
				colvarFBid.DefaultSetting = @"";
				colvarFBid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFBid);
				
				TableSchema.TableColumn colvarType = new TableSchema.TableColumn(schema);
				colvarType.ColumnName = "type";
				colvarType.DataType = DbType.Int32;
				colvarType.MaxLength = 0;
				colvarType.AutoIncrement = false;
				colvarType.IsNullable = false;
				colvarType.IsPrimaryKey = false;
				colvarType.IsForeignKey = false;
				colvarType.IsReadOnly = false;
				colvarType.DefaultSetting = @"";
				colvarType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarType);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Eventomatic"].AddSchema("Transactions_Out",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("TxOutKey")]
		[Bindable(true)]
		public int TxOutKey 
		{
			get { return GetColumnValue<int>(Columns.TxOutKey); }
			set { SetColumnValue(Columns.TxOutKey, value); }
		}
		  
		[XmlAttribute("Amount")]
		[Bindable(true)]
		public decimal Amount 
		{
			get { return GetColumnValue<decimal>(Columns.Amount); }
			set { SetColumnValue(Columns.Amount, value); }
		}
		  
		[XmlAttribute("EmailRecipient")]
		[Bindable(true)]
		public string EmailRecipient 
		{
			get { return GetColumnValue<string>(Columns.EmailRecipient); }
			set { SetColumnValue(Columns.EmailRecipient, value); }
		}
		  
		[XmlAttribute("TxDate")]
		[Bindable(true)]
		public DateTime TxDate 
		{
			get { return GetColumnValue<DateTime>(Columns.TxDate); }
			set { SetColumnValue(Columns.TxDate, value); }
		}
		  
		[XmlAttribute("ResourceKey")]
		[Bindable(true)]
		public int ResourceKey 
		{
			get { return GetColumnValue<int>(Columns.ResourceKey); }
			set { SetColumnValue(Columns.ResourceKey, value); }
		}
		  
		[XmlAttribute("EventKey")]
		[Bindable(true)]
		public int EventKey 
		{
			get { return GetColumnValue<int>(Columns.EventKey); }
			set { SetColumnValue(Columns.EventKey, value); }
		}
		  
		[XmlAttribute("PaypalFee")]
		[Bindable(true)]
		public decimal PaypalFee 
		{
			get { return GetColumnValue<decimal>(Columns.PaypalFee); }
			set { SetColumnValue(Columns.PaypalFee, value); }
		}
		  
		[XmlAttribute("Currency")]
		[Bindable(true)]
		public string Currency 
		{
			get { return GetColumnValue<string>(Columns.Currency); }
			set { SetColumnValue(Columns.Currency, value); }
		}
		  
		[XmlAttribute("FBid")]
		[Bindable(true)]
		public long FBid 
		{
			get { return GetColumnValue<long>(Columns.FBid); }
			set { SetColumnValue(Columns.FBid, value); }
		}
		  
		[XmlAttribute("Type")]
		[Bindable(true)]
		public int Type 
		{
			get { return GetColumnValue<int>(Columns.Type); }
			set { SetColumnValue(Columns.Type, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(decimal varAmount,string varEmailRecipient,DateTime varTxDate,int varResourceKey,int varEventKey,decimal varPaypalFee,string varCurrency,long varFBid,int varType)
		{
			TransactionsOut item = new TransactionsOut();
			
			item.Amount = varAmount;
			
			item.EmailRecipient = varEmailRecipient;
			
			item.TxDate = varTxDate;
			
			item.ResourceKey = varResourceKey;
			
			item.EventKey = varEventKey;
			
			item.PaypalFee = varPaypalFee;
			
			item.Currency = varCurrency;
			
			item.FBid = varFBid;
			
			item.Type = varType;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varTxOutKey,decimal varAmount,string varEmailRecipient,DateTime varTxDate,int varResourceKey,int varEventKey,decimal varPaypalFee,string varCurrency,long varFBid,int varType)
		{
			TransactionsOut item = new TransactionsOut();
			
				item.TxOutKey = varTxOutKey;
			
				item.Amount = varAmount;
			
				item.EmailRecipient = varEmailRecipient;
			
				item.TxDate = varTxDate;
			
				item.ResourceKey = varResourceKey;
			
				item.EventKey = varEventKey;
			
				item.PaypalFee = varPaypalFee;
			
				item.Currency = varCurrency;
			
				item.FBid = varFBid;
			
				item.Type = varType;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn TxOutKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn AmountColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn EmailRecipientColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn TxDateColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ResourceKeyColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn EventKeyColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn PaypalFeeColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CurrencyColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn FBidColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn TypeColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string TxOutKey = @"Tx_Out_Key";
			 public static string Amount = @"Amount";
			 public static string EmailRecipient = @"Email_Recipient";
			 public static string TxDate = @"tx_date";
			 public static string ResourceKey = @"Resource_Key";
			 public static string EventKey = @"Event_Key";
			 public static string PaypalFee = @"Paypal_Fee";
			 public static string Currency = @"Currency";
			 public static string FBid = @"FBid";
			 public static string Type = @"type";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
