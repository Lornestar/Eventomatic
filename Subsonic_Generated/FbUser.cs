using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Eventomatic_DB
{
	/// <summary>
	/// Strongly-typed collection for the FbUser class.
	/// </summary>
    [Serializable]
	public partial class FbUserCollection : ActiveList<FbUser, FbUserCollection>
	{	   
		public FbUserCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>FbUserCollection</returns>
		public FbUserCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                FbUser o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the FB_Users table.
	/// </summary>
	[Serializable]
	public partial class FbUser : ActiveRecord<FbUser>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public FbUser()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public FbUser(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public FbUser(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public FbUser(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("FB_Users", TableType.Table, DataService.GetInstance("Eventomatic"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarFBid = new TableSchema.TableColumn(schema);
				colvarFBid.ColumnName = "FBid";
				colvarFBid.DataType = DbType.Int64;
				colvarFBid.MaxLength = 0;
				colvarFBid.AutoIncrement = false;
				colvarFBid.IsNullable = false;
				colvarFBid.IsPrimaryKey = true;
				colvarFBid.IsForeignKey = false;
				colvarFBid.IsReadOnly = false;
				colvarFBid.DefaultSetting = @"";
				colvarFBid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFBid);
				
				TableSchema.TableColumn colvarFirstName = new TableSchema.TableColumn(schema);
				colvarFirstName.ColumnName = "First_Name";
				colvarFirstName.DataType = DbType.AnsiString;
				colvarFirstName.MaxLength = 50;
				colvarFirstName.AutoIncrement = false;
				colvarFirstName.IsNullable = true;
				colvarFirstName.IsPrimaryKey = false;
				colvarFirstName.IsForeignKey = false;
				colvarFirstName.IsReadOnly = false;
				colvarFirstName.DefaultSetting = @"";
				colvarFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstName);
				
				TableSchema.TableColumn colvarLastName = new TableSchema.TableColumn(schema);
				colvarLastName.ColumnName = "Last_Name";
				colvarLastName.DataType = DbType.AnsiString;
				colvarLastName.MaxLength = 50;
				colvarLastName.AutoIncrement = false;
				colvarLastName.IsNullable = true;
				colvarLastName.IsPrimaryKey = false;
				colvarLastName.IsForeignKey = false;
				colvarLastName.IsReadOnly = false;
				colvarLastName.DefaultSetting = @"";
				colvarLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastName);
				
				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.AnsiString;
				colvarEmail.MaxLength = 200;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);
				
				TableSchema.TableColumn colvarSignedUp = new TableSchema.TableColumn(schema);
				colvarSignedUp.ColumnName = "Signed_Up";
				colvarSignedUp.DataType = DbType.DateTime;
				colvarSignedUp.MaxLength = 0;
				colvarSignedUp.AutoIncrement = false;
				colvarSignedUp.IsNullable = false;
				colvarSignedUp.IsPrimaryKey = false;
				colvarSignedUp.IsForeignKey = false;
				colvarSignedUp.IsReadOnly = false;
				colvarSignedUp.DefaultSetting = @"";
				colvarSignedUp.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSignedUp);
				
				TableSchema.TableColumn colvarLastChange = new TableSchema.TableColumn(schema);
				colvarLastChange.ColumnName = "Last_Change";
				colvarLastChange.DataType = DbType.DateTime;
				colvarLastChange.MaxLength = 0;
				colvarLastChange.AutoIncrement = false;
				colvarLastChange.IsNullable = false;
				colvarLastChange.IsPrimaryKey = false;
				colvarLastChange.IsForeignKey = false;
				colvarLastChange.IsReadOnly = false;
				colvarLastChange.DefaultSetting = @"";
				colvarLastChange.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastChange);
				
				TableSchema.TableColumn colvarResourceKey = new TableSchema.TableColumn(schema);
				colvarResourceKey.ColumnName = "Resource_Key";
				colvarResourceKey.DataType = DbType.Int32;
				colvarResourceKey.MaxLength = 0;
				colvarResourceKey.AutoIncrement = false;
				colvarResourceKey.IsNullable = true;
				colvarResourceKey.IsPrimaryKey = false;
				colvarResourceKey.IsForeignKey = false;
				colvarResourceKey.IsReadOnly = false;
				colvarResourceKey.DefaultSetting = @"";
				colvarResourceKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarResourceKey);
				
				TableSchema.TableColumn colvarAdmin = new TableSchema.TableColumn(schema);
				colvarAdmin.ColumnName = "Admin";
				colvarAdmin.DataType = DbType.Boolean;
				colvarAdmin.MaxLength = 0;
				colvarAdmin.AutoIncrement = false;
				colvarAdmin.IsNullable = true;
				colvarAdmin.IsPrimaryKey = false;
				colvarAdmin.IsForeignKey = false;
				colvarAdmin.IsReadOnly = false;
				colvarAdmin.DefaultSetting = @"";
				colvarAdmin.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAdmin);
				
				TableSchema.TableColumn colvarIpAddress = new TableSchema.TableColumn(schema);
				colvarIpAddress.ColumnName = "IP_Address";
				colvarIpAddress.DataType = DbType.String;
				colvarIpAddress.MaxLength = 50;
				colvarIpAddress.AutoIncrement = false;
				colvarIpAddress.IsNullable = true;
				colvarIpAddress.IsPrimaryKey = false;
				colvarIpAddress.IsForeignKey = false;
				colvarIpAddress.IsReadOnly = false;
				colvarIpAddress.DefaultSetting = @"";
				colvarIpAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIpAddress);
				
				TableSchema.TableColumn colvarSessionKey = new TableSchema.TableColumn(schema);
				colvarSessionKey.ColumnName = "Session_Key";
				colvarSessionKey.DataType = DbType.String;
				colvarSessionKey.MaxLength = 200;
				colvarSessionKey.AutoIncrement = false;
				colvarSessionKey.IsNullable = true;
				colvarSessionKey.IsPrimaryKey = false;
				colvarSessionKey.IsForeignKey = false;
				colvarSessionKey.IsReadOnly = false;
				colvarSessionKey.DefaultSetting = @"";
				colvarSessionKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSessionKey);
				
				TableSchema.TableColumn colvarAccessToken = new TableSchema.TableColumn(schema);
				colvarAccessToken.ColumnName = "Access_Token";
				colvarAccessToken.DataType = DbType.String;
				colvarAccessToken.MaxLength = 200;
				colvarAccessToken.AutoIncrement = false;
				colvarAccessToken.IsNullable = true;
				colvarAccessToken.IsPrimaryKey = false;
				colvarAccessToken.IsForeignKey = false;
				colvarAccessToken.IsReadOnly = false;
				colvarAccessToken.DefaultSetting = @"";
				colvarAccessToken.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccessToken);
				
				TableSchema.TableColumn colvarReferral = new TableSchema.TableColumn(schema);
				colvarReferral.ColumnName = "Referral";
				colvarReferral.DataType = DbType.Int64;
				colvarReferral.MaxLength = 0;
				colvarReferral.AutoIncrement = false;
				colvarReferral.IsNullable = true;
				colvarReferral.IsPrimaryKey = false;
				colvarReferral.IsForeignKey = false;
				colvarReferral.IsReadOnly = false;
				colvarReferral.DefaultSetting = @"";
				colvarReferral.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReferral);
				
				TableSchema.TableColumn colvarReferralEmail = new TableSchema.TableColumn(schema);
				colvarReferralEmail.ColumnName = "Referral_Email";
				colvarReferralEmail.DataType = DbType.AnsiString;
				colvarReferralEmail.MaxLength = 200;
				colvarReferralEmail.AutoIncrement = false;
				colvarReferralEmail.IsNullable = true;
				colvarReferralEmail.IsPrimaryKey = false;
				colvarReferralEmail.IsForeignKey = false;
				colvarReferralEmail.IsReadOnly = false;
				colvarReferralEmail.DefaultSetting = @"";
				colvarReferralEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReferralEmail);
				
				TableSchema.TableColumn colvarReferralRate = new TableSchema.TableColumn(schema);
				colvarReferralRate.ColumnName = "Referral_Rate";
				colvarReferralRate.DataType = DbType.Currency;
				colvarReferralRate.MaxLength = 0;
				colvarReferralRate.AutoIncrement = false;
				colvarReferralRate.IsNullable = true;
				colvarReferralRate.IsPrimaryKey = false;
				colvarReferralRate.IsForeignKey = false;
				colvarReferralRate.IsReadOnly = false;
				colvarReferralRate.DefaultSetting = @"";
				colvarReferralRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReferralRate);
				
				TableSchema.TableColumn colvarIsSpy = new TableSchema.TableColumn(schema);
				colvarIsSpy.ColumnName = "IsSpy";
				colvarIsSpy.DataType = DbType.Boolean;
				colvarIsSpy.MaxLength = 0;
				colvarIsSpy.AutoIncrement = false;
				colvarIsSpy.IsNullable = true;
				colvarIsSpy.IsPrimaryKey = false;
				colvarIsSpy.IsForeignKey = false;
				colvarIsSpy.IsReadOnly = false;
				colvarIsSpy.DefaultSetting = @"";
				colvarIsSpy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsSpy);
				
				TableSchema.TableColumn colvarGetNavigate = new TableSchema.TableColumn(schema);
				colvarGetNavigate.ColumnName = "GetNavigate";
				colvarGetNavigate.DataType = DbType.Boolean;
				colvarGetNavigate.MaxLength = 0;
				colvarGetNavigate.AutoIncrement = false;
				colvarGetNavigate.IsNullable = true;
				colvarGetNavigate.IsPrimaryKey = false;
				colvarGetNavigate.IsForeignKey = false;
				colvarGetNavigate.IsReadOnly = false;
				colvarGetNavigate.DefaultSetting = @"";
				colvarGetNavigate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGetNavigate);
				
				TableSchema.TableColumn colvarPFCurrentResource = new TableSchema.TableColumn(schema);
				colvarPFCurrentResource.ColumnName = "PFCurrentResource";
				colvarPFCurrentResource.DataType = DbType.Int32;
				colvarPFCurrentResource.MaxLength = 0;
				colvarPFCurrentResource.AutoIncrement = false;
				colvarPFCurrentResource.IsNullable = true;
				colvarPFCurrentResource.IsPrimaryKey = false;
				colvarPFCurrentResource.IsForeignKey = false;
				colvarPFCurrentResource.IsReadOnly = false;
				colvarPFCurrentResource.DefaultSetting = @"";
				colvarPFCurrentResource.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPFCurrentResource);
				
				TableSchema.TableColumn colvarPassword = new TableSchema.TableColumn(schema);
				colvarPassword.ColumnName = "Password";
				colvarPassword.DataType = DbType.String;
				colvarPassword.MaxLength = 50;
				colvarPassword.AutoIncrement = false;
				colvarPassword.IsNullable = true;
				colvarPassword.IsPrimaryKey = false;
				colvarPassword.IsForeignKey = false;
				colvarPassword.IsReadOnly = false;
				colvarPassword.DefaultSetting = @"";
				colvarPassword.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassword);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Eventomatic"].AddSchema("FB_Users",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("FBid")]
		[Bindable(true)]
		public long FBid 
		{
			get { return GetColumnValue<long>(Columns.FBid); }
			set { SetColumnValue(Columns.FBid, value); }
		}
		  
		[XmlAttribute("FirstName")]
		[Bindable(true)]
		public string FirstName 
		{
			get { return GetColumnValue<string>(Columns.FirstName); }
			set { SetColumnValue(Columns.FirstName, value); }
		}
		  
		[XmlAttribute("LastName")]
		[Bindable(true)]
		public string LastName 
		{
			get { return GetColumnValue<string>(Columns.LastName); }
			set { SetColumnValue(Columns.LastName, value); }
		}
		  
		[XmlAttribute("Email")]
		[Bindable(true)]
		public string Email 
		{
			get { return GetColumnValue<string>(Columns.Email); }
			set { SetColumnValue(Columns.Email, value); }
		}
		  
		[XmlAttribute("SignedUp")]
		[Bindable(true)]
		public DateTime SignedUp 
		{
			get { return GetColumnValue<DateTime>(Columns.SignedUp); }
			set { SetColumnValue(Columns.SignedUp, value); }
		}
		  
		[XmlAttribute("LastChange")]
		[Bindable(true)]
		public DateTime LastChange 
		{
			get { return GetColumnValue<DateTime>(Columns.LastChange); }
			set { SetColumnValue(Columns.LastChange, value); }
		}
		  
		[XmlAttribute("ResourceKey")]
		[Bindable(true)]
		public int? ResourceKey 
		{
			get { return GetColumnValue<int?>(Columns.ResourceKey); }
			set { SetColumnValue(Columns.ResourceKey, value); }
		}
		  
		[XmlAttribute("Admin")]
		[Bindable(true)]
		public bool? Admin 
		{
			get { return GetColumnValue<bool?>(Columns.Admin); }
			set { SetColumnValue(Columns.Admin, value); }
		}
		  
		[XmlAttribute("IpAddress")]
		[Bindable(true)]
		public string IpAddress 
		{
			get { return GetColumnValue<string>(Columns.IpAddress); }
			set { SetColumnValue(Columns.IpAddress, value); }
		}
		  
		[XmlAttribute("SessionKey")]
		[Bindable(true)]
		public string SessionKey 
		{
			get { return GetColumnValue<string>(Columns.SessionKey); }
			set { SetColumnValue(Columns.SessionKey, value); }
		}
		  
		[XmlAttribute("AccessToken")]
		[Bindable(true)]
		public string AccessToken 
		{
			get { return GetColumnValue<string>(Columns.AccessToken); }
			set { SetColumnValue(Columns.AccessToken, value); }
		}
		  
		[XmlAttribute("Referral")]
		[Bindable(true)]
		public long? Referral 
		{
			get { return GetColumnValue<long?>(Columns.Referral); }
			set { SetColumnValue(Columns.Referral, value); }
		}
		  
		[XmlAttribute("ReferralEmail")]
		[Bindable(true)]
		public string ReferralEmail 
		{
			get { return GetColumnValue<string>(Columns.ReferralEmail); }
			set { SetColumnValue(Columns.ReferralEmail, value); }
		}
		  
		[XmlAttribute("ReferralRate")]
		[Bindable(true)]
		public decimal? ReferralRate 
		{
			get { return GetColumnValue<decimal?>(Columns.ReferralRate); }
			set { SetColumnValue(Columns.ReferralRate, value); }
		}
		  
		[XmlAttribute("IsSpy")]
		[Bindable(true)]
		public bool? IsSpy 
		{
			get { return GetColumnValue<bool?>(Columns.IsSpy); }
			set { SetColumnValue(Columns.IsSpy, value); }
		}
		  
		[XmlAttribute("GetNavigate")]
		[Bindable(true)]
		public bool? GetNavigate 
		{
			get { return GetColumnValue<bool?>(Columns.GetNavigate); }
			set { SetColumnValue(Columns.GetNavigate, value); }
		}
		  
		[XmlAttribute("PFCurrentResource")]
		[Bindable(true)]
		public int? PFCurrentResource 
		{
			get { return GetColumnValue<int?>(Columns.PFCurrentResource); }
			set { SetColumnValue(Columns.PFCurrentResource, value); }
		}
		  
		[XmlAttribute("Password")]
		[Bindable(true)]
		public string Password 
		{
			get { return GetColumnValue<string>(Columns.Password); }
			set { SetColumnValue(Columns.Password, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public Eventomatic_DB.FbUsersPageCollection FbUsersPages()
		{
			return new Eventomatic_DB.FbUsersPageCollection().Where(FbUsersPage.Columns.FbUsers, FBid).Load();
		}
		public Eventomatic_DB.FbUsersResourceCollection FbUsersResourceRecords()
		{
			return new Eventomatic_DB.FbUsersResourceCollection().Where(FbUsersResource.Columns.FBid, FBid).Load();
		}
		public Eventomatic_DB.LogActivityCollection LogActivities()
		{
			return new Eventomatic_DB.LogActivityCollection().Where(LogActivity.Columns.Fbid, FBid).Load();
		}
		public Eventomatic_DB.ResourceReadingOtherCollection ResourceReadingOthers()
		{
			return new Eventomatic_DB.ResourceReadingOtherCollection().Where(ResourceReadingOther.Columns.FBidAdded, FBid).Load();
		}
		public Eventomatic_DB.ResourceCollection ResourceRecords()
		{
			return new Eventomatic_DB.ResourceCollection().Where(Resource.Columns.FBCreator, FBid).Load();
		}
		#endregion
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(long varFBid,string varFirstName,string varLastName,string varEmail,DateTime varSignedUp,DateTime varLastChange,int? varResourceKey,bool? varAdmin,string varIpAddress,string varSessionKey,string varAccessToken,long? varReferral,string varReferralEmail,decimal? varReferralRate,bool? varIsSpy,bool? varGetNavigate,int? varPFCurrentResource,string varPassword)
		{
			FbUser item = new FbUser();
			
			item.FBid = varFBid;
			
			item.FirstName = varFirstName;
			
			item.LastName = varLastName;
			
			item.Email = varEmail;
			
			item.SignedUp = varSignedUp;
			
			item.LastChange = varLastChange;
			
			item.ResourceKey = varResourceKey;
			
			item.Admin = varAdmin;
			
			item.IpAddress = varIpAddress;
			
			item.SessionKey = varSessionKey;
			
			item.AccessToken = varAccessToken;
			
			item.Referral = varReferral;
			
			item.ReferralEmail = varReferralEmail;
			
			item.ReferralRate = varReferralRate;
			
			item.IsSpy = varIsSpy;
			
			item.GetNavigate = varGetNavigate;
			
			item.PFCurrentResource = varPFCurrentResource;
			
			item.Password = varPassword;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varFBid,string varFirstName,string varLastName,string varEmail,DateTime varSignedUp,DateTime varLastChange,int? varResourceKey,bool? varAdmin,string varIpAddress,string varSessionKey,string varAccessToken,long? varReferral,string varReferralEmail,decimal? varReferralRate,bool? varIsSpy,bool? varGetNavigate,int? varPFCurrentResource,string varPassword)
		{
			FbUser item = new FbUser();
			
				item.FBid = varFBid;
			
				item.FirstName = varFirstName;
			
				item.LastName = varLastName;
			
				item.Email = varEmail;
			
				item.SignedUp = varSignedUp;
			
				item.LastChange = varLastChange;
			
				item.ResourceKey = varResourceKey;
			
				item.Admin = varAdmin;
			
				item.IpAddress = varIpAddress;
			
				item.SessionKey = varSessionKey;
			
				item.AccessToken = varAccessToken;
			
				item.Referral = varReferral;
			
				item.ReferralEmail = varReferralEmail;
			
				item.ReferralRate = varReferralRate;
			
				item.IsSpy = varIsSpy;
			
				item.GetNavigate = varGetNavigate;
			
				item.PFCurrentResource = varPFCurrentResource;
			
				item.Password = varPassword;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn FBidColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn FirstNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn LastNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn EmailColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn SignedUpColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn LastChangeColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ResourceKeyColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn AdminColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn IpAddressColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn SessionKeyColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn AccessTokenColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ReferralColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ReferralEmailColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ReferralRateColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn IsSpyColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn GetNavigateColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn PFCurrentResourceColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn PasswordColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string FBid = @"FBid";
			 public static string FirstName = @"First_Name";
			 public static string LastName = @"Last_Name";
			 public static string Email = @"Email";
			 public static string SignedUp = @"Signed_Up";
			 public static string LastChange = @"Last_Change";
			 public static string ResourceKey = @"Resource_Key";
			 public static string Admin = @"Admin";
			 public static string IpAddress = @"IP_Address";
			 public static string SessionKey = @"Session_Key";
			 public static string AccessToken = @"Access_Token";
			 public static string Referral = @"Referral";
			 public static string ReferralEmail = @"Referral_Email";
			 public static string ReferralRate = @"Referral_Rate";
			 public static string IsSpy = @"IsSpy";
			 public static string GetNavigate = @"GetNavigate";
			 public static string PFCurrentResource = @"PFCurrentResource";
			 public static string Password = @"Password";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
