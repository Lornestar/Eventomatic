using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Eventomatic_DB
{
	/// <summary>
	/// Strongly-typed collection for the LogActivity class.
	/// </summary>
    [Serializable]
	public partial class LogActivityCollection : ActiveList<LogActivity, LogActivityCollection>
	{	   
		public LogActivityCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LogActivityCollection</returns>
		public LogActivityCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LogActivity o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Log_Activities table.
	/// </summary>
	[Serializable]
	public partial class LogActivity : ActiveRecord<LogActivity>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LogActivity()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LogActivity(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LogActivity(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LogActivity(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Log_Activities", TableType.Table, DataService.GetInstance("Eventomatic"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarLogActivitiesKey = new TableSchema.TableColumn(schema);
				colvarLogActivitiesKey.ColumnName = "Log_Activities_Key";
				colvarLogActivitiesKey.DataType = DbType.Int32;
				colvarLogActivitiesKey.MaxLength = 0;
				colvarLogActivitiesKey.AutoIncrement = true;
				colvarLogActivitiesKey.IsNullable = false;
				colvarLogActivitiesKey.IsPrimaryKey = true;
				colvarLogActivitiesKey.IsForeignKey = false;
				colvarLogActivitiesKey.IsReadOnly = false;
				colvarLogActivitiesKey.DefaultSetting = @"";
				colvarLogActivitiesKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLogActivitiesKey);
				
				TableSchema.TableColumn colvarFbid = new TableSchema.TableColumn(schema);
				colvarFbid.ColumnName = "fbid";
				colvarFbid.DataType = DbType.Int64;
				colvarFbid.MaxLength = 0;
				colvarFbid.AutoIncrement = false;
				colvarFbid.IsNullable = false;
				colvarFbid.IsPrimaryKey = false;
				colvarFbid.IsForeignKey = true;
				colvarFbid.IsReadOnly = false;
				colvarFbid.DefaultSetting = @"";
				
					colvarFbid.ForeignKeyTableName = "FB_Users";
				schema.Columns.Add(colvarFbid);
				
				TableSchema.TableColumn colvarActivity = new TableSchema.TableColumn(schema);
				colvarActivity.ColumnName = "Activity";
				colvarActivity.DataType = DbType.Int32;
				colvarActivity.MaxLength = 0;
				colvarActivity.AutoIncrement = false;
				colvarActivity.IsNullable = false;
				colvarActivity.IsPrimaryKey = false;
				colvarActivity.IsForeignKey = true;
				colvarActivity.IsReadOnly = false;
				colvarActivity.DefaultSetting = @"";
				
					colvarActivity.ForeignKeyTableName = "Log_Activities_Possibilities";
				schema.Columns.Add(colvarActivity);
				
				TableSchema.TableColumn colvarDateOccured = new TableSchema.TableColumn(schema);
				colvarDateOccured.ColumnName = "Date_Occured";
				colvarDateOccured.DataType = DbType.DateTime;
				colvarDateOccured.MaxLength = 0;
				colvarDateOccured.AutoIncrement = false;
				colvarDateOccured.IsNullable = false;
				colvarDateOccured.IsPrimaryKey = false;
				colvarDateOccured.IsForeignKey = false;
				colvarDateOccured.IsReadOnly = false;
				colvarDateOccured.DefaultSetting = @"";
				colvarDateOccured.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateOccured);
				
				TableSchema.TableColumn colvarResourceKey = new TableSchema.TableColumn(schema);
				colvarResourceKey.ColumnName = "Resource_Key";
				colvarResourceKey.DataType = DbType.Int32;
				colvarResourceKey.MaxLength = 0;
				colvarResourceKey.AutoIncrement = false;
				colvarResourceKey.IsNullable = false;
				colvarResourceKey.IsPrimaryKey = false;
				colvarResourceKey.IsForeignKey = true;
				colvarResourceKey.IsReadOnly = false;
				colvarResourceKey.DefaultSetting = @"";
				
					colvarResourceKey.ForeignKeyTableName = "Resource";
				schema.Columns.Add(colvarResourceKey);
				
				TableSchema.TableColumn colvarFbidAdded = new TableSchema.TableColumn(schema);
				colvarFbidAdded.ColumnName = "fbid_added";
				colvarFbidAdded.DataType = DbType.Int64;
				colvarFbidAdded.MaxLength = 0;
				colvarFbidAdded.AutoIncrement = false;
				colvarFbidAdded.IsNullable = true;
				colvarFbidAdded.IsPrimaryKey = false;
				colvarFbidAdded.IsForeignKey = false;
				colvarFbidAdded.IsReadOnly = false;
				colvarFbidAdded.DefaultSetting = @"";
				colvarFbidAdded.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFbidAdded);
				
				TableSchema.TableColumn colvarEventKey = new TableSchema.TableColumn(schema);
				colvarEventKey.ColumnName = "event_key";
				colvarEventKey.DataType = DbType.Int32;
				colvarEventKey.MaxLength = 0;
				colvarEventKey.AutoIncrement = false;
				colvarEventKey.IsNullable = true;
				colvarEventKey.IsPrimaryKey = false;
				colvarEventKey.IsForeignKey = false;
				colvarEventKey.IsReadOnly = false;
				colvarEventKey.DefaultSetting = @"";
				colvarEventKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEventKey);
				
				TableSchema.TableColumn colvarTxOutKey = new TableSchema.TableColumn(schema);
				colvarTxOutKey.ColumnName = "tx_out_key";
				colvarTxOutKey.DataType = DbType.Int32;
				colvarTxOutKey.MaxLength = 0;
				colvarTxOutKey.AutoIncrement = false;
				colvarTxOutKey.IsNullable = true;
				colvarTxOutKey.IsPrimaryKey = false;
				colvarTxOutKey.IsForeignKey = false;
				colvarTxOutKey.IsReadOnly = false;
				colvarTxOutKey.DefaultSetting = @"";
				colvarTxOutKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTxOutKey);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Eventomatic"].AddSchema("Log_Activities",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("LogActivitiesKey")]
		[Bindable(true)]
		public int LogActivitiesKey 
		{
			get { return GetColumnValue<int>(Columns.LogActivitiesKey); }
			set { SetColumnValue(Columns.LogActivitiesKey, value); }
		}
		  
		[XmlAttribute("Fbid")]
		[Bindable(true)]
		public long Fbid 
		{
			get { return GetColumnValue<long>(Columns.Fbid); }
			set { SetColumnValue(Columns.Fbid, value); }
		}
		  
		[XmlAttribute("Activity")]
		[Bindable(true)]
		public int Activity 
		{
			get { return GetColumnValue<int>(Columns.Activity); }
			set { SetColumnValue(Columns.Activity, value); }
		}
		  
		[XmlAttribute("DateOccured")]
		[Bindable(true)]
		public DateTime DateOccured 
		{
			get { return GetColumnValue<DateTime>(Columns.DateOccured); }
			set { SetColumnValue(Columns.DateOccured, value); }
		}
		  
		[XmlAttribute("ResourceKey")]
		[Bindable(true)]
		public int ResourceKey 
		{
			get { return GetColumnValue<int>(Columns.ResourceKey); }
			set { SetColumnValue(Columns.ResourceKey, value); }
		}
		  
		[XmlAttribute("FbidAdded")]
		[Bindable(true)]
		public long? FbidAdded 
		{
			get { return GetColumnValue<long?>(Columns.FbidAdded); }
			set { SetColumnValue(Columns.FbidAdded, value); }
		}
		  
		[XmlAttribute("EventKey")]
		[Bindable(true)]
		public int? EventKey 
		{
			get { return GetColumnValue<int?>(Columns.EventKey); }
			set { SetColumnValue(Columns.EventKey, value); }
		}
		  
		[XmlAttribute("TxOutKey")]
		[Bindable(true)]
		public int? TxOutKey 
		{
			get { return GetColumnValue<int?>(Columns.TxOutKey); }
			set { SetColumnValue(Columns.TxOutKey, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a FbUser ActiveRecord object related to this LogActivity
		/// 
		/// </summary>
		public Eventomatic_DB.FbUser FbUser
		{
			get { return Eventomatic_DB.FbUser.FetchByID(this.Fbid); }
			set { SetColumnValue("fbid", value.FBid); }
		}
		
		
		/// <summary>
		/// Returns a LogActivitiesPossibility ActiveRecord object related to this LogActivity
		/// 
		/// </summary>
		public Eventomatic_DB.LogActivitiesPossibility LogActivitiesPossibility
		{
			get { return Eventomatic_DB.LogActivitiesPossibility.FetchByID(this.Activity); }
			set { SetColumnValue("Activity", value.LogActivitiesPossibilitiesKey); }
		}
		
		
		/// <summary>
		/// Returns a Resource ActiveRecord object related to this LogActivity
		/// 
		/// </summary>
		public Eventomatic_DB.Resource Resource
		{
			get { return Eventomatic_DB.Resource.FetchByID(this.ResourceKey); }
			set { SetColumnValue("Resource_Key", value.ResourceKey); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(long varFbid,int varActivity,DateTime varDateOccured,int varResourceKey,long? varFbidAdded,int? varEventKey,int? varTxOutKey)
		{
			LogActivity item = new LogActivity();
			
			item.Fbid = varFbid;
			
			item.Activity = varActivity;
			
			item.DateOccured = varDateOccured;
			
			item.ResourceKey = varResourceKey;
			
			item.FbidAdded = varFbidAdded;
			
			item.EventKey = varEventKey;
			
			item.TxOutKey = varTxOutKey;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varLogActivitiesKey,long varFbid,int varActivity,DateTime varDateOccured,int varResourceKey,long? varFbidAdded,int? varEventKey,int? varTxOutKey)
		{
			LogActivity item = new LogActivity();
			
				item.LogActivitiesKey = varLogActivitiesKey;
			
				item.Fbid = varFbid;
			
				item.Activity = varActivity;
			
				item.DateOccured = varDateOccured;
			
				item.ResourceKey = varResourceKey;
			
				item.FbidAdded = varFbidAdded;
			
				item.EventKey = varEventKey;
			
				item.TxOutKey = varTxOutKey;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn LogActivitiesKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn FbidColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ActivityColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DateOccuredColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ResourceKeyColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn FbidAddedColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn EventKeyColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn TxOutKeyColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string LogActivitiesKey = @"Log_Activities_Key";
			 public static string Fbid = @"fbid";
			 public static string Activity = @"Activity";
			 public static string DateOccured = @"Date_Occured";
			 public static string ResourceKey = @"Resource_Key";
			 public static string FbidAdded = @"fbid_added";
			 public static string EventKey = @"event_key";
			 public static string TxOutKey = @"tx_out_key";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
