using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Eventomatic_DB
{
	/// <summary>
	/// Strongly-typed collection for the EventX class.
	/// </summary>
    [Serializable]
	public partial class EventXCollection : ActiveList<EventX, EventXCollection>
	{	   
		public EventXCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>EventXCollection</returns>
		public EventXCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                EventX o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Events table.
	/// </summary>
	[Serializable]
	public partial class EventX : ActiveRecord<EventX>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public EventX()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public EventX(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public EventX(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public EventX(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Events", TableType.Table, DataService.GetInstance("Eventomatic"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarEventKey = new TableSchema.TableColumn(schema);
				colvarEventKey.ColumnName = "Event_Key";
				colvarEventKey.DataType = DbType.Int32;
				colvarEventKey.MaxLength = 0;
				colvarEventKey.AutoIncrement = true;
				colvarEventKey.IsNullable = false;
				colvarEventKey.IsPrimaryKey = true;
				colvarEventKey.IsForeignKey = false;
				colvarEventKey.IsReadOnly = false;
				colvarEventKey.DefaultSetting = @"";
				colvarEventKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEventKey);
				
				TableSchema.TableColumn colvarEventName = new TableSchema.TableColumn(schema);
				colvarEventName.ColumnName = "Event_Name";
				colvarEventName.DataType = DbType.String;
				colvarEventName.MaxLength = 100;
				colvarEventName.AutoIncrement = false;
				colvarEventName.IsNullable = true;
				colvarEventName.IsPrimaryKey = false;
				colvarEventName.IsForeignKey = false;
				colvarEventName.IsReadOnly = false;
				colvarEventName.DefaultSetting = @"";
				colvarEventName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEventName);
				
				TableSchema.TableColumn colvarHost = new TableSchema.TableColumn(schema);
				colvarHost.ColumnName = "Host";
				colvarHost.DataType = DbType.String;
				colvarHost.MaxLength = 100;
				colvarHost.AutoIncrement = false;
				colvarHost.IsNullable = true;
				colvarHost.IsPrimaryKey = false;
				colvarHost.IsForeignKey = false;
				colvarHost.IsReadOnly = false;
				colvarHost.DefaultSetting = @"";
				colvarHost.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHost);
				
				TableSchema.TableColumn colvarEventBegins = new TableSchema.TableColumn(schema);
				colvarEventBegins.ColumnName = "Event_Begins";
				colvarEventBegins.DataType = DbType.DateTime;
				colvarEventBegins.MaxLength = 0;
				colvarEventBegins.AutoIncrement = false;
				colvarEventBegins.IsNullable = true;
				colvarEventBegins.IsPrimaryKey = false;
				colvarEventBegins.IsForeignKey = false;
				colvarEventBegins.IsReadOnly = false;
				colvarEventBegins.DefaultSetting = @"";
				colvarEventBegins.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEventBegins);
				
				TableSchema.TableColumn colvarEventEnds = new TableSchema.TableColumn(schema);
				colvarEventEnds.ColumnName = "Event_Ends";
				colvarEventEnds.DataType = DbType.DateTime;
				colvarEventEnds.MaxLength = 0;
				colvarEventEnds.AutoIncrement = false;
				colvarEventEnds.IsNullable = true;
				colvarEventEnds.IsPrimaryKey = false;
				colvarEventEnds.IsForeignKey = false;
				colvarEventEnds.IsReadOnly = false;
				colvarEventEnds.DefaultSetting = @"";
				colvarEventEnds.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEventEnds);
				
				TableSchema.TableColumn colvarLocation = new TableSchema.TableColumn(schema);
				colvarLocation.ColumnName = "Location";
				colvarLocation.DataType = DbType.String;
				colvarLocation.MaxLength = 100;
				colvarLocation.AutoIncrement = false;
				colvarLocation.IsNullable = true;
				colvarLocation.IsPrimaryKey = false;
				colvarLocation.IsForeignKey = false;
				colvarLocation.IsReadOnly = false;
				colvarLocation.DefaultSetting = @"";
				colvarLocation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocation);
				
				TableSchema.TableColumn colvarStreet = new TableSchema.TableColumn(schema);
				colvarStreet.ColumnName = "Street";
				colvarStreet.DataType = DbType.String;
				colvarStreet.MaxLength = 100;
				colvarStreet.AutoIncrement = false;
				colvarStreet.IsNullable = true;
				colvarStreet.IsPrimaryKey = false;
				colvarStreet.IsForeignKey = false;
				colvarStreet.IsReadOnly = false;
				colvarStreet.DefaultSetting = @"";
				colvarStreet.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreet);
				
				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "City";
				colvarCity.DataType = DbType.String;
				colvarCity.MaxLength = 100;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = true;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);
				
				TableSchema.TableColumn colvarPhone = new TableSchema.TableColumn(schema);
				colvarPhone.ColumnName = "Phone";
				colvarPhone.DataType = DbType.String;
				colvarPhone.MaxLength = 15;
				colvarPhone.AutoIncrement = false;
				colvarPhone.IsNullable = true;
				colvarPhone.IsPrimaryKey = false;
				colvarPhone.IsForeignKey = false;
				colvarPhone.IsReadOnly = false;
				colvarPhone.DefaultSetting = @"";
				colvarPhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhone);
				
				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.String;
				colvarEmail.MaxLength = 100;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);
				
				TableSchema.TableColumn colvarAdditionalComments = new TableSchema.TableColumn(schema);
				colvarAdditionalComments.ColumnName = "Additional_Comments";
				colvarAdditionalComments.DataType = DbType.AnsiString;
				colvarAdditionalComments.MaxLength = 2147483647;
				colvarAdditionalComments.AutoIncrement = false;
				colvarAdditionalComments.IsNullable = true;
				colvarAdditionalComments.IsPrimaryKey = false;
				colvarAdditionalComments.IsForeignKey = false;
				colvarAdditionalComments.IsReadOnly = false;
				colvarAdditionalComments.DefaultSetting = @"";
				colvarAdditionalComments.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAdditionalComments);
				
				TableSchema.TableColumn colvarImageUrl = new TableSchema.TableColumn(schema);
				colvarImageUrl.ColumnName = "Image_URL";
				colvarImageUrl.DataType = DbType.String;
				colvarImageUrl.MaxLength = 200;
				colvarImageUrl.AutoIncrement = false;
				colvarImageUrl.IsNullable = true;
				colvarImageUrl.IsPrimaryKey = false;
				colvarImageUrl.IsForeignKey = false;
				colvarImageUrl.IsReadOnly = false;
				colvarImageUrl.DefaultSetting = @"";
				colvarImageUrl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarImageUrl);
				
				TableSchema.TableColumn colvarDisplayTicketsAvailable = new TableSchema.TableColumn(schema);
				colvarDisplayTicketsAvailable.ColumnName = "Display_Tickets_Available";
				colvarDisplayTicketsAvailable.DataType = DbType.Boolean;
				colvarDisplayTicketsAvailable.MaxLength = 0;
				colvarDisplayTicketsAvailable.AutoIncrement = false;
				colvarDisplayTicketsAvailable.IsNullable = true;
				colvarDisplayTicketsAvailable.IsPrimaryKey = false;
				colvarDisplayTicketsAvailable.IsForeignKey = false;
				colvarDisplayTicketsAvailable.IsReadOnly = false;
				colvarDisplayTicketsAvailable.DefaultSetting = @"";
				colvarDisplayTicketsAvailable.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDisplayTicketsAvailable);
				
				TableSchema.TableColumn colvarConfirmation = new TableSchema.TableColumn(schema);
				colvarConfirmation.ColumnName = "Confirmation";
				colvarConfirmation.DataType = DbType.String;
				colvarConfirmation.MaxLength = 4000;
				colvarConfirmation.AutoIncrement = false;
				colvarConfirmation.IsNullable = true;
				colvarConfirmation.IsPrimaryKey = false;
				colvarConfirmation.IsForeignKey = false;
				colvarConfirmation.IsReadOnly = false;
				colvarConfirmation.DefaultSetting = @"";
				colvarConfirmation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConfirmation);
				
				TableSchema.TableColumn colvarResourceKey = new TableSchema.TableColumn(schema);
				colvarResourceKey.ColumnName = "Resource_Key";
				colvarResourceKey.DataType = DbType.Int32;
				colvarResourceKey.MaxLength = 0;
				colvarResourceKey.AutoIncrement = false;
				colvarResourceKey.IsNullable = true;
				colvarResourceKey.IsPrimaryKey = false;
				colvarResourceKey.IsForeignKey = true;
				colvarResourceKey.IsReadOnly = false;
				colvarResourceKey.DefaultSetting = @"";
				
					colvarResourceKey.ForeignKeyTableName = "Resource";
				schema.Columns.Add(colvarResourceKey);
				
				TableSchema.TableColumn colvarEid = new TableSchema.TableColumn(schema);
				colvarEid.ColumnName = "eid";
				colvarEid.DataType = DbType.AnsiString;
				colvarEid.MaxLength = 40;
				colvarEid.AutoIncrement = false;
				colvarEid.IsNullable = true;
				colvarEid.IsPrimaryKey = false;
				colvarEid.IsForeignKey = false;
				colvarEid.IsReadOnly = false;
				colvarEid.DefaultSetting = @"";
				colvarEid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEid);
				
				TableSchema.TableColumn colvarBeginSelling = new TableSchema.TableColumn(schema);
				colvarBeginSelling.ColumnName = "Begin_Selling";
				colvarBeginSelling.DataType = DbType.DateTime;
				colvarBeginSelling.MaxLength = 0;
				colvarBeginSelling.AutoIncrement = false;
				colvarBeginSelling.IsNullable = true;
				colvarBeginSelling.IsPrimaryKey = false;
				colvarBeginSelling.IsForeignKey = false;
				colvarBeginSelling.IsReadOnly = false;
				colvarBeginSelling.DefaultSetting = @"";
				colvarBeginSelling.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBeginSelling);
				
				TableSchema.TableColumn colvarSellingDeadline = new TableSchema.TableColumn(schema);
				colvarSellingDeadline.ColumnName = "Selling_Deadline";
				colvarSellingDeadline.DataType = DbType.DateTime;
				colvarSellingDeadline.MaxLength = 0;
				colvarSellingDeadline.AutoIncrement = false;
				colvarSellingDeadline.IsNullable = true;
				colvarSellingDeadline.IsPrimaryKey = false;
				colvarSellingDeadline.IsForeignKey = false;
				colvarSellingDeadline.IsReadOnly = false;
				colvarSellingDeadline.DefaultSetting = @"";
				colvarSellingDeadline.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSellingDeadline);
				
				TableSchema.TableColumn colvarLastModified = new TableSchema.TableColumn(schema);
				colvarLastModified.ColumnName = "Last_Modified";
				colvarLastModified.DataType = DbType.DateTime;
				colvarLastModified.MaxLength = 0;
				colvarLastModified.AutoIncrement = false;
				colvarLastModified.IsNullable = true;
				colvarLastModified.IsPrimaryKey = false;
				colvarLastModified.IsForeignKey = false;
				colvarLastModified.IsReadOnly = false;
				colvarLastModified.DefaultSetting = @"";
				colvarLastModified.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastModified);
				
				TableSchema.TableColumn colvarServiceFeePercentage = new TableSchema.TableColumn(schema);
				colvarServiceFeePercentage.ColumnName = "Service_Fee_Percentage";
				colvarServiceFeePercentage.DataType = DbType.Currency;
				colvarServiceFeePercentage.MaxLength = 0;
				colvarServiceFeePercentage.AutoIncrement = false;
				colvarServiceFeePercentage.IsNullable = true;
				colvarServiceFeePercentage.IsPrimaryKey = false;
				colvarServiceFeePercentage.IsForeignKey = false;
				colvarServiceFeePercentage.IsReadOnly = false;
				colvarServiceFeePercentage.DefaultSetting = @"";
				colvarServiceFeePercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServiceFeePercentage);
				
				TableSchema.TableColumn colvarServiceFeeCents = new TableSchema.TableColumn(schema);
				colvarServiceFeeCents.ColumnName = "Service_Fee_Cents";
				colvarServiceFeeCents.DataType = DbType.Currency;
				colvarServiceFeeCents.MaxLength = 0;
				colvarServiceFeeCents.AutoIncrement = false;
				colvarServiceFeeCents.IsNullable = true;
				colvarServiceFeeCents.IsPrimaryKey = false;
				colvarServiceFeeCents.IsForeignKey = false;
				colvarServiceFeeCents.IsReadOnly = false;
				colvarServiceFeeCents.DefaultSetting = @"";
				colvarServiceFeeCents.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServiceFeeCents);
				
				TableSchema.TableColumn colvarServiceFeeMax = new TableSchema.TableColumn(schema);
				colvarServiceFeeMax.ColumnName = "Service_Fee_Max";
				colvarServiceFeeMax.DataType = DbType.Currency;
				colvarServiceFeeMax.MaxLength = 0;
				colvarServiceFeeMax.AutoIncrement = false;
				colvarServiceFeeMax.IsNullable = true;
				colvarServiceFeeMax.IsPrimaryKey = false;
				colvarServiceFeeMax.IsForeignKey = false;
				colvarServiceFeeMax.IsReadOnly = false;
				colvarServiceFeeMax.DefaultSetting = @"";
				colvarServiceFeeMax.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServiceFeeMax);
				
				TableSchema.TableColumn colvarTicketMax = new TableSchema.TableColumn(schema);
				colvarTicketMax.ColumnName = "Ticket_Max";
				colvarTicketMax.DataType = DbType.Int32;
				colvarTicketMax.MaxLength = 0;
				colvarTicketMax.AutoIncrement = false;
				colvarTicketMax.IsNullable = true;
				colvarTicketMax.IsPrimaryKey = false;
				colvarTicketMax.IsForeignKey = false;
				colvarTicketMax.IsReadOnly = false;
				colvarTicketMax.DefaultSetting = @"";
				colvarTicketMax.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTicketMax);
				
				TableSchema.TableColumn colvarVisible = new TableSchema.TableColumn(schema);
				colvarVisible.ColumnName = "Visible";
				colvarVisible.DataType = DbType.Boolean;
				colvarVisible.MaxLength = 0;
				colvarVisible.AutoIncrement = false;
				colvarVisible.IsNullable = true;
				colvarVisible.IsPrimaryKey = false;
				colvarVisible.IsForeignKey = false;
				colvarVisible.IsReadOnly = false;
				colvarVisible.DefaultSetting = @"";
				colvarVisible.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVisible);
				
				TableSchema.TableColumn colvarBkImgUrl = new TableSchema.TableColumn(schema);
				colvarBkImgUrl.ColumnName = "BkImgUrl";
				colvarBkImgUrl.DataType = DbType.String;
				colvarBkImgUrl.MaxLength = 200;
				colvarBkImgUrl.AutoIncrement = false;
				colvarBkImgUrl.IsNullable = true;
				colvarBkImgUrl.IsPrimaryKey = false;
				colvarBkImgUrl.IsForeignKey = false;
				colvarBkImgUrl.IsReadOnly = false;
				colvarBkImgUrl.DefaultSetting = @"";
				colvarBkImgUrl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBkImgUrl);
				
				TableSchema.TableColumn colvarTimezone = new TableSchema.TableColumn(schema);
				colvarTimezone.ColumnName = "Timezone";
				colvarTimezone.DataType = DbType.Decimal;
				colvarTimezone.MaxLength = 0;
				colvarTimezone.AutoIncrement = false;
				colvarTimezone.IsNullable = true;
				colvarTimezone.IsPrimaryKey = false;
				colvarTimezone.IsForeignKey = false;
				colvarTimezone.IsReadOnly = false;
				colvarTimezone.DefaultSetting = @"";
				colvarTimezone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTimezone);
				
				TableSchema.TableColumn colvarTicketNum = new TableSchema.TableColumn(schema);
				colvarTicketNum.ColumnName = "TicketNum";
				colvarTicketNum.DataType = DbType.Int32;
				colvarTicketNum.MaxLength = 0;
				colvarTicketNum.AutoIncrement = false;
				colvarTicketNum.IsNullable = false;
				colvarTicketNum.IsPrimaryKey = false;
				colvarTicketNum.IsForeignKey = false;
				colvarTicketNum.IsReadOnly = false;
				colvarTicketNum.DefaultSetting = @"";
				colvarTicketNum.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTicketNum);
				
				TableSchema.TableColumn colvarDonation = new TableSchema.TableColumn(schema);
				colvarDonation.ColumnName = "Donation";
				colvarDonation.DataType = DbType.Boolean;
				colvarDonation.MaxLength = 0;
				colvarDonation.AutoIncrement = false;
				colvarDonation.IsNullable = true;
				colvarDonation.IsPrimaryKey = false;
				colvarDonation.IsForeignKey = false;
				colvarDonation.IsReadOnly = false;
				colvarDonation.DefaultSetting = @"";
				colvarDonation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDonation);
				
				TableSchema.TableColumn colvarViews = new TableSchema.TableColumn(schema);
				colvarViews.ColumnName = "Views";
				colvarViews.DataType = DbType.Int32;
				colvarViews.MaxLength = 0;
				colvarViews.AutoIncrement = false;
				colvarViews.IsNullable = true;
				colvarViews.IsPrimaryKey = false;
				colvarViews.IsForeignKey = false;
				colvarViews.IsReadOnly = false;
				colvarViews.DefaultSetting = @"";
				colvarViews.ForeignKeyTableName = "";
				schema.Columns.Add(colvarViews);
				
				TableSchema.TableColumn colvarIsFundraiser = new TableSchema.TableColumn(schema);
				colvarIsFundraiser.ColumnName = "IsFundraiser";
				colvarIsFundraiser.DataType = DbType.Boolean;
				colvarIsFundraiser.MaxLength = 0;
				colvarIsFundraiser.AutoIncrement = false;
				colvarIsFundraiser.IsNullable = true;
				colvarIsFundraiser.IsPrimaryKey = false;
				colvarIsFundraiser.IsForeignKey = false;
				colvarIsFundraiser.IsReadOnly = false;
				colvarIsFundraiser.DefaultSetting = @"";
				colvarIsFundraiser.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsFundraiser);
				
				TableSchema.TableColumn colvarIsHideFee = new TableSchema.TableColumn(schema);
				colvarIsHideFee.ColumnName = "IsHideFee";
				colvarIsHideFee.DataType = DbType.Boolean;
				colvarIsHideFee.MaxLength = 0;
				colvarIsHideFee.AutoIncrement = false;
				colvarIsHideFee.IsNullable = true;
				colvarIsHideFee.IsPrimaryKey = false;
				colvarIsHideFee.IsForeignKey = false;
				colvarIsHideFee.IsReadOnly = false;
				colvarIsHideFee.DefaultSetting = @"";
				colvarIsHideFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsHideFee);
				
				TableSchema.TableColumn colvarEventType = new TableSchema.TableColumn(schema);
				colvarEventType.ColumnName = "Event_Type";
				colvarEventType.DataType = DbType.Int32;
				colvarEventType.MaxLength = 0;
				colvarEventType.AutoIncrement = false;
				colvarEventType.IsNullable = true;
				colvarEventType.IsPrimaryKey = false;
				colvarEventType.IsForeignKey = false;
				colvarEventType.IsReadOnly = false;
				colvarEventType.DefaultSetting = @"";
				colvarEventType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEventType);
				
				TableSchema.TableColumn colvarLeaderPrize = new TableSchema.TableColumn(schema);
				colvarLeaderPrize.ColumnName = "Leader_Prize";
				colvarLeaderPrize.DataType = DbType.String;
				colvarLeaderPrize.MaxLength = 400;
				colvarLeaderPrize.AutoIncrement = false;
				colvarLeaderPrize.IsNullable = true;
				colvarLeaderPrize.IsPrimaryKey = false;
				colvarLeaderPrize.IsForeignKey = false;
				colvarLeaderPrize.IsReadOnly = false;
				colvarLeaderPrize.DefaultSetting = @"";
				colvarLeaderPrize.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeaderPrize);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Eventomatic"].AddSchema("Events",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("EventKey")]
		[Bindable(true)]
		public int EventKey 
		{
			get { return GetColumnValue<int>(Columns.EventKey); }
			set { SetColumnValue(Columns.EventKey, value); }
		}
		  
		[XmlAttribute("EventName")]
		[Bindable(true)]
		public string EventName 
		{
			get { return GetColumnValue<string>(Columns.EventName); }
			set { SetColumnValue(Columns.EventName, value); }
		}
		  
		[XmlAttribute("Host")]
		[Bindable(true)]
		public string Host 
		{
			get { return GetColumnValue<string>(Columns.Host); }
			set { SetColumnValue(Columns.Host, value); }
		}
		  
		[XmlAttribute("EventBegins")]
		[Bindable(true)]
		public DateTime? EventBegins 
		{
			get { return GetColumnValue<DateTime?>(Columns.EventBegins); }
			set { SetColumnValue(Columns.EventBegins, value); }
		}
		  
		[XmlAttribute("EventEnds")]
		[Bindable(true)]
		public DateTime? EventEnds 
		{
			get { return GetColumnValue<DateTime?>(Columns.EventEnds); }
			set { SetColumnValue(Columns.EventEnds, value); }
		}
		  
		[XmlAttribute("Location")]
		[Bindable(true)]
		public string Location 
		{
			get { return GetColumnValue<string>(Columns.Location); }
			set { SetColumnValue(Columns.Location, value); }
		}
		  
		[XmlAttribute("Street")]
		[Bindable(true)]
		public string Street 
		{
			get { return GetColumnValue<string>(Columns.Street); }
			set { SetColumnValue(Columns.Street, value); }
		}
		  
		[XmlAttribute("City")]
		[Bindable(true)]
		public string City 
		{
			get { return GetColumnValue<string>(Columns.City); }
			set { SetColumnValue(Columns.City, value); }
		}
		  
		[XmlAttribute("Phone")]
		[Bindable(true)]
		public string Phone 
		{
			get { return GetColumnValue<string>(Columns.Phone); }
			set { SetColumnValue(Columns.Phone, value); }
		}
		  
		[XmlAttribute("Email")]
		[Bindable(true)]
		public string Email 
		{
			get { return GetColumnValue<string>(Columns.Email); }
			set { SetColumnValue(Columns.Email, value); }
		}
		  
		[XmlAttribute("AdditionalComments")]
		[Bindable(true)]
		public string AdditionalComments 
		{
			get { return GetColumnValue<string>(Columns.AdditionalComments); }
			set { SetColumnValue(Columns.AdditionalComments, value); }
		}
		  
		[XmlAttribute("ImageUrl")]
		[Bindable(true)]
		public string ImageUrl 
		{
			get { return GetColumnValue<string>(Columns.ImageUrl); }
			set { SetColumnValue(Columns.ImageUrl, value); }
		}
		  
		[XmlAttribute("DisplayTicketsAvailable")]
		[Bindable(true)]
		public bool? DisplayTicketsAvailable 
		{
			get { return GetColumnValue<bool?>(Columns.DisplayTicketsAvailable); }
			set { SetColumnValue(Columns.DisplayTicketsAvailable, value); }
		}
		  
		[XmlAttribute("Confirmation")]
		[Bindable(true)]
		public string Confirmation 
		{
			get { return GetColumnValue<string>(Columns.Confirmation); }
			set { SetColumnValue(Columns.Confirmation, value); }
		}
		  
		[XmlAttribute("ResourceKey")]
		[Bindable(true)]
		public int? ResourceKey 
		{
			get { return GetColumnValue<int?>(Columns.ResourceKey); }
			set { SetColumnValue(Columns.ResourceKey, value); }
		}
		  
		[XmlAttribute("Eid")]
		[Bindable(true)]
		public string Eid 
		{
			get { return GetColumnValue<string>(Columns.Eid); }
			set { SetColumnValue(Columns.Eid, value); }
		}
		  
		[XmlAttribute("BeginSelling")]
		[Bindable(true)]
		public DateTime? BeginSelling 
		{
			get { return GetColumnValue<DateTime?>(Columns.BeginSelling); }
			set { SetColumnValue(Columns.BeginSelling, value); }
		}
		  
		[XmlAttribute("SellingDeadline")]
		[Bindable(true)]
		public DateTime? SellingDeadline 
		{
			get { return GetColumnValue<DateTime?>(Columns.SellingDeadline); }
			set { SetColumnValue(Columns.SellingDeadline, value); }
		}
		  
		[XmlAttribute("LastModified")]
		[Bindable(true)]
		public DateTime? LastModified 
		{
			get { return GetColumnValue<DateTime?>(Columns.LastModified); }
			set { SetColumnValue(Columns.LastModified, value); }
		}
		  
		[XmlAttribute("ServiceFeePercentage")]
		[Bindable(true)]
		public decimal? ServiceFeePercentage 
		{
			get { return GetColumnValue<decimal?>(Columns.ServiceFeePercentage); }
			set { SetColumnValue(Columns.ServiceFeePercentage, value); }
		}
		  
		[XmlAttribute("ServiceFeeCents")]
		[Bindable(true)]
		public decimal? ServiceFeeCents 
		{
			get { return GetColumnValue<decimal?>(Columns.ServiceFeeCents); }
			set { SetColumnValue(Columns.ServiceFeeCents, value); }
		}
		  
		[XmlAttribute("ServiceFeeMax")]
		[Bindable(true)]
		public decimal? ServiceFeeMax 
		{
			get { return GetColumnValue<decimal?>(Columns.ServiceFeeMax); }
			set { SetColumnValue(Columns.ServiceFeeMax, value); }
		}
		  
		[XmlAttribute("TicketMax")]
		[Bindable(true)]
		public int? TicketMax 
		{
			get { return GetColumnValue<int?>(Columns.TicketMax); }
			set { SetColumnValue(Columns.TicketMax, value); }
		}
		  
		[XmlAttribute("Visible")]
		[Bindable(true)]
		public bool? Visible 
		{
			get { return GetColumnValue<bool?>(Columns.Visible); }
			set { SetColumnValue(Columns.Visible, value); }
		}
		  
		[XmlAttribute("BkImgUrl")]
		[Bindable(true)]
		public string BkImgUrl 
		{
			get { return GetColumnValue<string>(Columns.BkImgUrl); }
			set { SetColumnValue(Columns.BkImgUrl, value); }
		}
		  
		[XmlAttribute("Timezone")]
		[Bindable(true)]
		public decimal? Timezone 
		{
			get { return GetColumnValue<decimal?>(Columns.Timezone); }
			set { SetColumnValue(Columns.Timezone, value); }
		}
		  
		[XmlAttribute("TicketNum")]
		[Bindable(true)]
		public int TicketNum 
		{
			get { return GetColumnValue<int>(Columns.TicketNum); }
			set { SetColumnValue(Columns.TicketNum, value); }
		}
		  
		[XmlAttribute("Donation")]
		[Bindable(true)]
		public bool? Donation 
		{
			get { return GetColumnValue<bool?>(Columns.Donation); }
			set { SetColumnValue(Columns.Donation, value); }
		}
		  
		[XmlAttribute("Views")]
		[Bindable(true)]
		public int? Views 
		{
			get { return GetColumnValue<int?>(Columns.Views); }
			set { SetColumnValue(Columns.Views, value); }
		}
		  
		[XmlAttribute("IsFundraiser")]
		[Bindable(true)]
		public bool? IsFundraiser 
		{
			get { return GetColumnValue<bool?>(Columns.IsFundraiser); }
			set { SetColumnValue(Columns.IsFundraiser, value); }
		}
		  
		[XmlAttribute("IsHideFee")]
		[Bindable(true)]
		public bool? IsHideFee 
		{
			get { return GetColumnValue<bool?>(Columns.IsHideFee); }
			set { SetColumnValue(Columns.IsHideFee, value); }
		}
		  
		[XmlAttribute("EventType")]
		[Bindable(true)]
		public int? EventType 
		{
			get { return GetColumnValue<int?>(Columns.EventType); }
			set { SetColumnValue(Columns.EventType, value); }
		}
		  
		[XmlAttribute("LeaderPrize")]
		[Bindable(true)]
		public string LeaderPrize 
		{
			get { return GetColumnValue<string>(Columns.LeaderPrize); }
			set { SetColumnValue(Columns.LeaderPrize, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public Eventomatic_DB.QuestionCollection QuestionRecords()
		{
			return new Eventomatic_DB.QuestionCollection().Where(Question.Columns.EventKey, EventKey).Load();
		}
		public Eventomatic_DB.QuestionsAnsweredCollection QuestionsAnsweredRecords()
		{
			return new Eventomatic_DB.QuestionsAnsweredCollection().Where(QuestionsAnswered.Columns.EventKey, EventKey).Load();
		}
		public Eventomatic_DB.TicketCollection Tickets()
		{
			return new Eventomatic_DB.TicketCollection().Where(Ticket.Columns.EventKey, EventKey).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a Resource ActiveRecord object related to this EventX
		/// 
		/// </summary>
		public Eventomatic_DB.Resource Resource
		{
			get { return Eventomatic_DB.Resource.FetchByID(this.ResourceKey); }
			set { SetColumnValue("Resource_Key", value.ResourceKey); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varEventName,string varHost,DateTime? varEventBegins,DateTime? varEventEnds,string varLocation,string varStreet,string varCity,string varPhone,string varEmail,string varAdditionalComments,string varImageUrl,bool? varDisplayTicketsAvailable,string varConfirmation,int? varResourceKey,string varEid,DateTime? varBeginSelling,DateTime? varSellingDeadline,DateTime? varLastModified,decimal? varServiceFeePercentage,decimal? varServiceFeeCents,decimal? varServiceFeeMax,int? varTicketMax,bool? varVisible,string varBkImgUrl,decimal? varTimezone,int varTicketNum,bool? varDonation,int? varViews,bool? varIsFundraiser,bool? varIsHideFee,int? varEventType,string varLeaderPrize)
		{
			EventX item = new EventX();
			
			item.EventName = varEventName;
			
			item.Host = varHost;
			
			item.EventBegins = varEventBegins;
			
			item.EventEnds = varEventEnds;
			
			item.Location = varLocation;
			
			item.Street = varStreet;
			
			item.City = varCity;
			
			item.Phone = varPhone;
			
			item.Email = varEmail;
			
			item.AdditionalComments = varAdditionalComments;
			
			item.ImageUrl = varImageUrl;
			
			item.DisplayTicketsAvailable = varDisplayTicketsAvailable;
			
			item.Confirmation = varConfirmation;
			
			item.ResourceKey = varResourceKey;
			
			item.Eid = varEid;
			
			item.BeginSelling = varBeginSelling;
			
			item.SellingDeadline = varSellingDeadline;
			
			item.LastModified = varLastModified;
			
			item.ServiceFeePercentage = varServiceFeePercentage;
			
			item.ServiceFeeCents = varServiceFeeCents;
			
			item.ServiceFeeMax = varServiceFeeMax;
			
			item.TicketMax = varTicketMax;
			
			item.Visible = varVisible;
			
			item.BkImgUrl = varBkImgUrl;
			
			item.Timezone = varTimezone;
			
			item.TicketNum = varTicketNum;
			
			item.Donation = varDonation;
			
			item.Views = varViews;
			
			item.IsFundraiser = varIsFundraiser;
			
			item.IsHideFee = varIsHideFee;
			
			item.EventType = varEventType;
			
			item.LeaderPrize = varLeaderPrize;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varEventKey,string varEventName,string varHost,DateTime? varEventBegins,DateTime? varEventEnds,string varLocation,string varStreet,string varCity,string varPhone,string varEmail,string varAdditionalComments,string varImageUrl,bool? varDisplayTicketsAvailable,string varConfirmation,int? varResourceKey,string varEid,DateTime? varBeginSelling,DateTime? varSellingDeadline,DateTime? varLastModified,decimal? varServiceFeePercentage,decimal? varServiceFeeCents,decimal? varServiceFeeMax,int? varTicketMax,bool? varVisible,string varBkImgUrl,decimal? varTimezone,int varTicketNum,bool? varDonation,int? varViews,bool? varIsFundraiser,bool? varIsHideFee,int? varEventType,string varLeaderPrize)
		{
			EventX item = new EventX();
			
				item.EventKey = varEventKey;
			
				item.EventName = varEventName;
			
				item.Host = varHost;
			
				item.EventBegins = varEventBegins;
			
				item.EventEnds = varEventEnds;
			
				item.Location = varLocation;
			
				item.Street = varStreet;
			
				item.City = varCity;
			
				item.Phone = varPhone;
			
				item.Email = varEmail;
			
				item.AdditionalComments = varAdditionalComments;
			
				item.ImageUrl = varImageUrl;
			
				item.DisplayTicketsAvailable = varDisplayTicketsAvailable;
			
				item.Confirmation = varConfirmation;
			
				item.ResourceKey = varResourceKey;
			
				item.Eid = varEid;
			
				item.BeginSelling = varBeginSelling;
			
				item.SellingDeadline = varSellingDeadline;
			
				item.LastModified = varLastModified;
			
				item.ServiceFeePercentage = varServiceFeePercentage;
			
				item.ServiceFeeCents = varServiceFeeCents;
			
				item.ServiceFeeMax = varServiceFeeMax;
			
				item.TicketMax = varTicketMax;
			
				item.Visible = varVisible;
			
				item.BkImgUrl = varBkImgUrl;
			
				item.Timezone = varTimezone;
			
				item.TicketNum = varTicketNum;
			
				item.Donation = varDonation;
			
				item.Views = varViews;
			
				item.IsFundraiser = varIsFundraiser;
			
				item.IsHideFee = varIsHideFee;
			
				item.EventType = varEventType;
			
				item.LeaderPrize = varLeaderPrize;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn EventKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn EventNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn HostColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn EventBeginsColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn EventEndsColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn LocationColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn StreetColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CityColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn PhoneColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn EmailColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn AdditionalCommentsColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ImageUrlColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn DisplayTicketsAvailableColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ConfirmationColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn ResourceKeyColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn EidColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn BeginSellingColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn SellingDeadlineColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn LastModifiedColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn ServiceFeePercentageColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn ServiceFeeCentsColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn ServiceFeeMaxColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn TicketMaxColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn VisibleColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn BkImgUrlColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn TimezoneColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn TicketNumColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn DonationColumn
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn ViewsColumn
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        public static TableSchema.TableColumn IsFundraiserColumn
        {
            get { return Schema.Columns[29]; }
        }
        
        
        
        public static TableSchema.TableColumn IsHideFeeColumn
        {
            get { return Schema.Columns[30]; }
        }
        
        
        
        public static TableSchema.TableColumn EventTypeColumn
        {
            get { return Schema.Columns[31]; }
        }
        
        
        
        public static TableSchema.TableColumn LeaderPrizeColumn
        {
            get { return Schema.Columns[32]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string EventKey = @"Event_Key";
			 public static string EventName = @"Event_Name";
			 public static string Host = @"Host";
			 public static string EventBegins = @"Event_Begins";
			 public static string EventEnds = @"Event_Ends";
			 public static string Location = @"Location";
			 public static string Street = @"Street";
			 public static string City = @"City";
			 public static string Phone = @"Phone";
			 public static string Email = @"Email";
			 public static string AdditionalComments = @"Additional_Comments";
			 public static string ImageUrl = @"Image_URL";
			 public static string DisplayTicketsAvailable = @"Display_Tickets_Available";
			 public static string Confirmation = @"Confirmation";
			 public static string ResourceKey = @"Resource_Key";
			 public static string Eid = @"eid";
			 public static string BeginSelling = @"Begin_Selling";
			 public static string SellingDeadline = @"Selling_Deadline";
			 public static string LastModified = @"Last_Modified";
			 public static string ServiceFeePercentage = @"Service_Fee_Percentage";
			 public static string ServiceFeeCents = @"Service_Fee_Cents";
			 public static string ServiceFeeMax = @"Service_Fee_Max";
			 public static string TicketMax = @"Ticket_Max";
			 public static string Visible = @"Visible";
			 public static string BkImgUrl = @"BkImgUrl";
			 public static string Timezone = @"Timezone";
			 public static string TicketNum = @"TicketNum";
			 public static string Donation = @"Donation";
			 public static string Views = @"Views";
			 public static string IsFundraiser = @"IsFundraiser";
			 public static string IsHideFee = @"IsHideFee";
			 public static string EventType = @"Event_Type";
			 public static string LeaderPrize = @"Leader_Prize";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
