using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Eventomatic_DB
{
    /// <summary>
    /// Controller class for Transactions_Out
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TransactionsOutController
    {
        // Preload our schema..
        TransactionsOut thisSchemaLoad = new TransactionsOut();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TransactionsOutCollection FetchAll()
        {
            TransactionsOutCollection coll = new TransactionsOutCollection();
            Query qry = new Query(TransactionsOut.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TransactionsOutCollection FetchByID(object TxOutKey)
        {
            TransactionsOutCollection coll = new TransactionsOutCollection().Where("Tx_Out_Key", TxOutKey).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TransactionsOutCollection FetchByQuery(Query qry)
        {
            TransactionsOutCollection coll = new TransactionsOutCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object TxOutKey)
        {
            return (TransactionsOut.Delete(TxOutKey) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object TxOutKey)
        {
            return (TransactionsOut.Destroy(TxOutKey) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(decimal Amount,string EmailRecipient,DateTime TxDate,int ResourceKey,int EventKey,decimal PaypalFee,string Currency,long FBid,int Type)
	    {
		    TransactionsOut item = new TransactionsOut();
		    
            item.Amount = Amount;
            
            item.EmailRecipient = EmailRecipient;
            
            item.TxDate = TxDate;
            
            item.ResourceKey = ResourceKey;
            
            item.EventKey = EventKey;
            
            item.PaypalFee = PaypalFee;
            
            item.Currency = Currency;
            
            item.FBid = FBid;
            
            item.Type = Type;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int TxOutKey,decimal Amount,string EmailRecipient,DateTime TxDate,int ResourceKey,int EventKey,decimal PaypalFee,string Currency,long FBid,int Type)
	    {
		    TransactionsOut item = new TransactionsOut();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.TxOutKey = TxOutKey;
				
			item.Amount = Amount;
				
			item.EmailRecipient = EmailRecipient;
				
			item.TxDate = TxDate;
				
			item.ResourceKey = ResourceKey;
				
			item.EventKey = EventKey;
				
			item.PaypalFee = PaypalFee;
				
			item.Currency = Currency;
				
			item.FBid = FBid;
				
			item.Type = Type;
				
	        item.Save(UserName);
	    }
    }
}
