using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Eventomatic_DB
{
	/// <summary>
	/// Strongly-typed collection for the ResourceReadingOther class.
	/// </summary>
    [Serializable]
	public partial class ResourceReadingOtherCollection : ActiveList<ResourceReadingOther, ResourceReadingOtherCollection>
	{	   
		public ResourceReadingOtherCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ResourceReadingOtherCollection</returns>
		public ResourceReadingOtherCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                ResourceReadingOther o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Resource_Reading_Others table.
	/// </summary>
	[Serializable]
	public partial class ResourceReadingOther : ActiveRecord<ResourceReadingOther>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public ResourceReadingOther()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public ResourceReadingOther(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public ResourceReadingOther(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public ResourceReadingOther(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Resource_Reading_Others", TableType.Table, DataService.GetInstance("Eventomatic"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarResourceReadingOthersKey = new TableSchema.TableColumn(schema);
				colvarResourceReadingOthersKey.ColumnName = "Resource_Reading_Others_Key";
				colvarResourceReadingOthersKey.DataType = DbType.Int32;
				colvarResourceReadingOthersKey.MaxLength = 0;
				colvarResourceReadingOthersKey.AutoIncrement = true;
				colvarResourceReadingOthersKey.IsNullable = false;
				colvarResourceReadingOthersKey.IsPrimaryKey = true;
				colvarResourceReadingOthersKey.IsForeignKey = false;
				colvarResourceReadingOthersKey.IsReadOnly = false;
				colvarResourceReadingOthersKey.DefaultSetting = @"";
				colvarResourceReadingOthersKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarResourceReadingOthersKey);
				
				TableSchema.TableColumn colvarResourceKey = new TableSchema.TableColumn(schema);
				colvarResourceKey.ColumnName = "Resource_Key";
				colvarResourceKey.DataType = DbType.Int32;
				colvarResourceKey.MaxLength = 0;
				colvarResourceKey.AutoIncrement = false;
				colvarResourceKey.IsNullable = false;
				colvarResourceKey.IsPrimaryKey = false;
				colvarResourceKey.IsForeignKey = true;
				colvarResourceKey.IsReadOnly = false;
				colvarResourceKey.DefaultSetting = @"";
				
					colvarResourceKey.ForeignKeyTableName = "Resource";
				schema.Columns.Add(colvarResourceKey);
				
				TableSchema.TableColumn colvarResourceKeyReading = new TableSchema.TableColumn(schema);
				colvarResourceKeyReading.ColumnName = "Resource_Key_Reading";
				colvarResourceKeyReading.DataType = DbType.Int32;
				colvarResourceKeyReading.MaxLength = 0;
				colvarResourceKeyReading.AutoIncrement = false;
				colvarResourceKeyReading.IsNullable = false;
				colvarResourceKeyReading.IsPrimaryKey = false;
				colvarResourceKeyReading.IsForeignKey = true;
				colvarResourceKeyReading.IsReadOnly = false;
				colvarResourceKeyReading.DefaultSetting = @"";
				
					colvarResourceKeyReading.ForeignKeyTableName = "Resource";
				schema.Columns.Add(colvarResourceKeyReading);
				
				TableSchema.TableColumn colvarDateAdded = new TableSchema.TableColumn(schema);
				colvarDateAdded.ColumnName = "Date_Added";
				colvarDateAdded.DataType = DbType.DateTime;
				colvarDateAdded.MaxLength = 0;
				colvarDateAdded.AutoIncrement = false;
				colvarDateAdded.IsNullable = false;
				colvarDateAdded.IsPrimaryKey = false;
				colvarDateAdded.IsForeignKey = false;
				colvarDateAdded.IsReadOnly = false;
				colvarDateAdded.DefaultSetting = @"";
				colvarDateAdded.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateAdded);
				
				TableSchema.TableColumn colvarFBidAdded = new TableSchema.TableColumn(schema);
				colvarFBidAdded.ColumnName = "FBid_Added";
				colvarFBidAdded.DataType = DbType.Int64;
				colvarFBidAdded.MaxLength = 0;
				colvarFBidAdded.AutoIncrement = false;
				colvarFBidAdded.IsNullable = false;
				colvarFBidAdded.IsPrimaryKey = false;
				colvarFBidAdded.IsForeignKey = true;
				colvarFBidAdded.IsReadOnly = false;
				colvarFBidAdded.DefaultSetting = @"";
				
					colvarFBidAdded.ForeignKeyTableName = "FB_Users";
				schema.Columns.Add(colvarFBidAdded);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Eventomatic"].AddSchema("Resource_Reading_Others",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ResourceReadingOthersKey")]
		[Bindable(true)]
		public int ResourceReadingOthersKey 
		{
			get { return GetColumnValue<int>(Columns.ResourceReadingOthersKey); }
			set { SetColumnValue(Columns.ResourceReadingOthersKey, value); }
		}
		  
		[XmlAttribute("ResourceKey")]
		[Bindable(true)]
		public int ResourceKey 
		{
			get { return GetColumnValue<int>(Columns.ResourceKey); }
			set { SetColumnValue(Columns.ResourceKey, value); }
		}
		  
		[XmlAttribute("ResourceKeyReading")]
		[Bindable(true)]
		public int ResourceKeyReading 
		{
			get { return GetColumnValue<int>(Columns.ResourceKeyReading); }
			set { SetColumnValue(Columns.ResourceKeyReading, value); }
		}
		  
		[XmlAttribute("DateAdded")]
		[Bindable(true)]
		public DateTime DateAdded 
		{
			get { return GetColumnValue<DateTime>(Columns.DateAdded); }
			set { SetColumnValue(Columns.DateAdded, value); }
		}
		  
		[XmlAttribute("FBidAdded")]
		[Bindable(true)]
		public long FBidAdded 
		{
			get { return GetColumnValue<long>(Columns.FBidAdded); }
			set { SetColumnValue(Columns.FBidAdded, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a FbUser ActiveRecord object related to this ResourceReadingOther
		/// 
		/// </summary>
		public Eventomatic_DB.FbUser FbUser
		{
			get { return Eventomatic_DB.FbUser.FetchByID(this.FBidAdded); }
			set { SetColumnValue("FBid_Added", value.FBid); }
		}
		
		
		/// <summary>
		/// Returns a Resource ActiveRecord object related to this ResourceReadingOther
		/// 
		/// </summary>
		public Eventomatic_DB.Resource Resource
		{
			get { return Eventomatic_DB.Resource.FetchByID(this.ResourceKey); }
			set { SetColumnValue("Resource_Key", value.ResourceKey); }
		}
		
		
		/// <summary>
		/// Returns a Resource ActiveRecord object related to this ResourceReadingOther
		/// 
		/// </summary>
		public Eventomatic_DB.Resource ResourceToResourceKeyReading
		{
			get { return Eventomatic_DB.Resource.FetchByID(this.ResourceKeyReading); }
			set { SetColumnValue("Resource_Key_Reading", value.ResourceKey); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varResourceKey,int varResourceKeyReading,DateTime varDateAdded,long varFBidAdded)
		{
			ResourceReadingOther item = new ResourceReadingOther();
			
			item.ResourceKey = varResourceKey;
			
			item.ResourceKeyReading = varResourceKeyReading;
			
			item.DateAdded = varDateAdded;
			
			item.FBidAdded = varFBidAdded;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varResourceReadingOthersKey,int varResourceKey,int varResourceKeyReading,DateTime varDateAdded,long varFBidAdded)
		{
			ResourceReadingOther item = new ResourceReadingOther();
			
				item.ResourceReadingOthersKey = varResourceReadingOthersKey;
			
				item.ResourceKey = varResourceKey;
			
				item.ResourceKeyReading = varResourceKeyReading;
			
				item.DateAdded = varDateAdded;
			
				item.FBidAdded = varFBidAdded;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ResourceReadingOthersKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ResourceKeyColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ResourceKeyReadingColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DateAddedColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn FBidAddedColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ResourceReadingOthersKey = @"Resource_Reading_Others_Key";
			 public static string ResourceKey = @"Resource_Key";
			 public static string ResourceKeyReading = @"Resource_Key_Reading";
			 public static string DateAdded = @"Date_Added";
			 public static string FBidAdded = @"FBid_Added";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
