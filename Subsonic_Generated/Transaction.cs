using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Eventomatic_DB
{
	/// <summary>
	/// Strongly-typed collection for the Transaction class.
	/// </summary>
    [Serializable]
	public partial class TransactionCollection : ActiveList<Transaction, TransactionCollection>
	{	   
		public TransactionCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TransactionCollection</returns>
		public TransactionCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Transaction o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Transactions table.
	/// </summary>
	[Serializable]
	public partial class Transaction : ActiveRecord<Transaction>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Transaction()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Transaction(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Transaction(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Transaction(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Transactions", TableType.Table, DataService.GetInstance("Eventomatic"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarTxKey = new TableSchema.TableColumn(schema);
				colvarTxKey.ColumnName = "Tx_Key";
				colvarTxKey.DataType = DbType.Int32;
				colvarTxKey.MaxLength = 0;
				colvarTxKey.AutoIncrement = true;
				colvarTxKey.IsNullable = false;
				colvarTxKey.IsPrimaryKey = true;
				colvarTxKey.IsForeignKey = false;
				colvarTxKey.IsReadOnly = false;
				colvarTxKey.DefaultSetting = @"";
				colvarTxKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTxKey);
				
				TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
				colvarAmount.ColumnName = "Amount";
				colvarAmount.DataType = DbType.Currency;
				colvarAmount.MaxLength = 0;
				colvarAmount.AutoIncrement = false;
				colvarAmount.IsNullable = false;
				colvarAmount.IsPrimaryKey = false;
				colvarAmount.IsForeignKey = false;
				colvarAmount.IsReadOnly = false;
				colvarAmount.DefaultSetting = @"";
				colvarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmount);
				
				TableSchema.TableColumn colvarEmailBuyer = new TableSchema.TableColumn(schema);
				colvarEmailBuyer.ColumnName = "Email_Buyer";
				colvarEmailBuyer.DataType = DbType.String;
				colvarEmailBuyer.MaxLength = 200;
				colvarEmailBuyer.AutoIncrement = false;
				colvarEmailBuyer.IsNullable = true;
				colvarEmailBuyer.IsPrimaryKey = false;
				colvarEmailBuyer.IsForeignKey = false;
				colvarEmailBuyer.IsReadOnly = false;
				colvarEmailBuyer.DefaultSetting = @"";
				colvarEmailBuyer.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmailBuyer);
				
				TableSchema.TableColumn colvarEmailSeller = new TableSchema.TableColumn(schema);
				colvarEmailSeller.ColumnName = "Email_Seller";
				colvarEmailSeller.DataType = DbType.String;
				colvarEmailSeller.MaxLength = 200;
				colvarEmailSeller.AutoIncrement = false;
				colvarEmailSeller.IsNullable = true;
				colvarEmailSeller.IsPrimaryKey = false;
				colvarEmailSeller.IsForeignKey = false;
				colvarEmailSeller.IsReadOnly = false;
				colvarEmailSeller.DefaultSetting = @"";
				colvarEmailSeller.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmailSeller);
				
				TableSchema.TableColumn colvarInitDate = new TableSchema.TableColumn(schema);
				colvarInitDate.ColumnName = "Init_Date";
				colvarInitDate.DataType = DbType.DateTime;
				colvarInitDate.MaxLength = 0;
				colvarInitDate.AutoIncrement = false;
				colvarInitDate.IsNullable = false;
				colvarInitDate.IsPrimaryKey = false;
				colvarInitDate.IsForeignKey = false;
				colvarInitDate.IsReadOnly = false;
				colvarInitDate.DefaultSetting = @"";
				colvarInitDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInitDate);
				
				TableSchema.TableColumn colvarEventKey = new TableSchema.TableColumn(schema);
				colvarEventKey.ColumnName = "Event_Key";
				colvarEventKey.DataType = DbType.Int32;
				colvarEventKey.MaxLength = 0;
				colvarEventKey.AutoIncrement = false;
				colvarEventKey.IsNullable = true;
				colvarEventKey.IsPrimaryKey = false;
				colvarEventKey.IsForeignKey = false;
				colvarEventKey.IsReadOnly = false;
				colvarEventKey.DefaultSetting = @"";
				colvarEventKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEventKey);
				
				TableSchema.TableColumn colvarCurrency = new TableSchema.TableColumn(schema);
				colvarCurrency.ColumnName = "Currency";
				colvarCurrency.DataType = DbType.String;
				colvarCurrency.MaxLength = 3;
				colvarCurrency.AutoIncrement = false;
				colvarCurrency.IsNullable = false;
				colvarCurrency.IsPrimaryKey = false;
				colvarCurrency.IsForeignKey = false;
				colvarCurrency.IsReadOnly = false;
				colvarCurrency.DefaultSetting = @"";
				colvarCurrency.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrency);
				
				TableSchema.TableColumn colvarItemDescription = new TableSchema.TableColumn(schema);
				colvarItemDescription.ColumnName = "Item_Description";
				colvarItemDescription.DataType = DbType.String;
				colvarItemDescription.MaxLength = 500;
				colvarItemDescription.AutoIncrement = false;
				colvarItemDescription.IsNullable = true;
				colvarItemDescription.IsPrimaryKey = false;
				colvarItemDescription.IsForeignKey = false;
				colvarItemDescription.IsReadOnly = false;
				colvarItemDescription.DefaultSetting = @"";
				colvarItemDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemDescription);
				
				TableSchema.TableColumn colvarTxStatus = new TableSchema.TableColumn(schema);
				colvarTxStatus.ColumnName = "Tx_Status";
				colvarTxStatus.DataType = DbType.Int32;
				colvarTxStatus.MaxLength = 0;
				colvarTxStatus.AutoIncrement = false;
				colvarTxStatus.IsNullable = true;
				colvarTxStatus.IsPrimaryKey = false;
				colvarTxStatus.IsForeignKey = false;
				colvarTxStatus.IsReadOnly = false;
				colvarTxStatus.DefaultSetting = @"";
				colvarTxStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTxStatus);
				
				TableSchema.TableColumn colvarConfirmationDate = new TableSchema.TableColumn(schema);
				colvarConfirmationDate.ColumnName = "Confirmation_Date";
				colvarConfirmationDate.DataType = DbType.DateTime;
				colvarConfirmationDate.MaxLength = 0;
				colvarConfirmationDate.AutoIncrement = false;
				colvarConfirmationDate.IsNullable = true;
				colvarConfirmationDate.IsPrimaryKey = false;
				colvarConfirmationDate.IsForeignKey = false;
				colvarConfirmationDate.IsReadOnly = false;
				colvarConfirmationDate.DefaultSetting = @"";
				colvarConfirmationDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConfirmationDate);
				
				TableSchema.TableColumn colvarTxnId = new TableSchema.TableColumn(schema);
				colvarTxnId.ColumnName = "txn_id";
				colvarTxnId.DataType = DbType.String;
				colvarTxnId.MaxLength = 19;
				colvarTxnId.AutoIncrement = false;
				colvarTxnId.IsNullable = true;
				colvarTxnId.IsPrimaryKey = false;
				colvarTxnId.IsForeignKey = false;
				colvarTxnId.IsReadOnly = false;
				colvarTxnId.DefaultSetting = @"";
				colvarTxnId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTxnId);
				
				TableSchema.TableColumn colvarMcGross = new TableSchema.TableColumn(schema);
				colvarMcGross.ColumnName = "mc_gross";
				colvarMcGross.DataType = DbType.Currency;
				colvarMcGross.MaxLength = 0;
				colvarMcGross.AutoIncrement = false;
				colvarMcGross.IsNullable = true;
				colvarMcGross.IsPrimaryKey = false;
				colvarMcGross.IsForeignKey = false;
				colvarMcGross.IsReadOnly = false;
				colvarMcGross.DefaultSetting = @"";
				colvarMcGross.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMcGross);
				
				TableSchema.TableColumn colvarPayerId = new TableSchema.TableColumn(schema);
				colvarPayerId.ColumnName = "payer_id";
				colvarPayerId.DataType = DbType.String;
				colvarPayerId.MaxLength = 100;
				colvarPayerId.AutoIncrement = false;
				colvarPayerId.IsNullable = true;
				colvarPayerId.IsPrimaryKey = false;
				colvarPayerId.IsForeignKey = false;
				colvarPayerId.IsReadOnly = false;
				colvarPayerId.DefaultSetting = @"";
				colvarPayerId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPayerId);
				
				TableSchema.TableColumn colvarTax = new TableSchema.TableColumn(schema);
				colvarTax.ColumnName = "tax";
				colvarTax.DataType = DbType.Currency;
				colvarTax.MaxLength = 0;
				colvarTax.AutoIncrement = false;
				colvarTax.IsNullable = true;
				colvarTax.IsPrimaryKey = false;
				colvarTax.IsForeignKey = false;
				colvarTax.IsReadOnly = false;
				colvarTax.DefaultSetting = @"";
				colvarTax.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTax);
				
				TableSchema.TableColumn colvarPaymentStatus = new TableSchema.TableColumn(schema);
				colvarPaymentStatus.ColumnName = "payment_status";
				colvarPaymentStatus.DataType = DbType.String;
				colvarPaymentStatus.MaxLength = 100;
				colvarPaymentStatus.AutoIncrement = false;
				colvarPaymentStatus.IsNullable = true;
				colvarPaymentStatus.IsPrimaryKey = false;
				colvarPaymentStatus.IsForeignKey = false;
				colvarPaymentStatus.IsReadOnly = false;
				colvarPaymentStatus.DefaultSetting = @"";
				colvarPaymentStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentStatus);
				
				TableSchema.TableColumn colvarPayerStatus = new TableSchema.TableColumn(schema);
				colvarPayerStatus.ColumnName = "payer_status";
				colvarPayerStatus.DataType = DbType.String;
				colvarPayerStatus.MaxLength = 100;
				colvarPayerStatus.AutoIncrement = false;
				colvarPayerStatus.IsNullable = true;
				colvarPayerStatus.IsPrimaryKey = false;
				colvarPayerStatus.IsForeignKey = false;
				colvarPayerStatus.IsReadOnly = false;
				colvarPayerStatus.DefaultSetting = @"";
				colvarPayerStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPayerStatus);
				
				TableSchema.TableColumn colvarBusinessEmail = new TableSchema.TableColumn(schema);
				colvarBusinessEmail.ColumnName = "business_email";
				colvarBusinessEmail.DataType = DbType.String;
				colvarBusinessEmail.MaxLength = 200;
				colvarBusinessEmail.AutoIncrement = false;
				colvarBusinessEmail.IsNullable = true;
				colvarBusinessEmail.IsPrimaryKey = false;
				colvarBusinessEmail.IsForeignKey = false;
				colvarBusinessEmail.IsReadOnly = false;
				colvarBusinessEmail.DefaultSetting = @"";
				colvarBusinessEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBusinessEmail);
				
				TableSchema.TableColumn colvarPayerEmail = new TableSchema.TableColumn(schema);
				colvarPayerEmail.ColumnName = "payer_email";
				colvarPayerEmail.DataType = DbType.String;
				colvarPayerEmail.MaxLength = 200;
				colvarPayerEmail.AutoIncrement = false;
				colvarPayerEmail.IsNullable = true;
				colvarPayerEmail.IsPrimaryKey = false;
				colvarPayerEmail.IsForeignKey = false;
				colvarPayerEmail.IsReadOnly = false;
				colvarPayerEmail.DefaultSetting = @"";
				colvarPayerEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPayerEmail);
				
				TableSchema.TableColumn colvarPaymentType = new TableSchema.TableColumn(schema);
				colvarPaymentType.ColumnName = "payment_type";
				colvarPaymentType.DataType = DbType.String;
				colvarPaymentType.MaxLength = 200;
				colvarPaymentType.AutoIncrement = false;
				colvarPaymentType.IsNullable = true;
				colvarPaymentType.IsPrimaryKey = false;
				colvarPaymentType.IsForeignKey = false;
				colvarPaymentType.IsReadOnly = false;
				colvarPaymentType.DefaultSetting = @"";
				colvarPaymentType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentType);
				
				TableSchema.TableColumn colvarMcCurrency = new TableSchema.TableColumn(schema);
				colvarMcCurrency.ColumnName = "mc_currency";
				colvarMcCurrency.DataType = DbType.String;
				colvarMcCurrency.MaxLength = 20;
				colvarMcCurrency.AutoIncrement = false;
				colvarMcCurrency.IsNullable = true;
				colvarMcCurrency.IsPrimaryKey = false;
				colvarMcCurrency.IsForeignKey = false;
				colvarMcCurrency.IsReadOnly = false;
				colvarMcCurrency.DefaultSetting = @"";
				colvarMcCurrency.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMcCurrency);
				
				TableSchema.TableColumn colvarTransactionSubject = new TableSchema.TableColumn(schema);
				colvarTransactionSubject.ColumnName = "transaction_subject";
				colvarTransactionSubject.DataType = DbType.String;
				colvarTransactionSubject.MaxLength = 200;
				colvarTransactionSubject.AutoIncrement = false;
				colvarTransactionSubject.IsNullable = true;
				colvarTransactionSubject.IsPrimaryKey = false;
				colvarTransactionSubject.IsForeignKey = false;
				colvarTransactionSubject.IsReadOnly = false;
				colvarTransactionSubject.DefaultSetting = @"";
				colvarTransactionSubject.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTransactionSubject);
				
				TableSchema.TableColumn colvarLastName = new TableSchema.TableColumn(schema);
				colvarLastName.ColumnName = "last_name";
				colvarLastName.DataType = DbType.String;
				colvarLastName.MaxLength = 200;
				colvarLastName.AutoIncrement = false;
				colvarLastName.IsNullable = true;
				colvarLastName.IsPrimaryKey = false;
				colvarLastName.IsForeignKey = false;
				colvarLastName.IsReadOnly = false;
				colvarLastName.DefaultSetting = @"";
				colvarLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastName);
				
				TableSchema.TableColumn colvarFirstName = new TableSchema.TableColumn(schema);
				colvarFirstName.ColumnName = "first_name";
				colvarFirstName.DataType = DbType.String;
				colvarFirstName.MaxLength = 200;
				colvarFirstName.AutoIncrement = false;
				colvarFirstName.IsNullable = true;
				colvarFirstName.IsPrimaryKey = false;
				colvarFirstName.IsForeignKey = false;
				colvarFirstName.IsReadOnly = false;
				colvarFirstName.DefaultSetting = @"";
				colvarFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstName);
				
				TableSchema.TableColumn colvarTransactionLog = new TableSchema.TableColumn(schema);
				colvarTransactionLog.ColumnName = "Transaction_Log";
				colvarTransactionLog.DataType = DbType.String;
				colvarTransactionLog.MaxLength = 400;
				colvarTransactionLog.AutoIncrement = false;
				colvarTransactionLog.IsNullable = true;
				colvarTransactionLog.IsPrimaryKey = false;
				colvarTransactionLog.IsForeignKey = false;
				colvarTransactionLog.IsReadOnly = false;
				colvarTransactionLog.DefaultSetting = @"";
				colvarTransactionLog.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTransactionLog);
				
				TableSchema.TableColumn colvarGuestListFirstName = new TableSchema.TableColumn(schema);
				colvarGuestListFirstName.ColumnName = "GuestList_First_Name";
				colvarGuestListFirstName.DataType = DbType.String;
				colvarGuestListFirstName.MaxLength = 200;
				colvarGuestListFirstName.AutoIncrement = false;
				colvarGuestListFirstName.IsNullable = true;
				colvarGuestListFirstName.IsPrimaryKey = false;
				colvarGuestListFirstName.IsForeignKey = false;
				colvarGuestListFirstName.IsReadOnly = false;
				colvarGuestListFirstName.DefaultSetting = @"";
				colvarGuestListFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGuestListFirstName);
				
				TableSchema.TableColumn colvarGuestListLastName = new TableSchema.TableColumn(schema);
				colvarGuestListLastName.ColumnName = "GuestList_Last_Name";
				colvarGuestListLastName.DataType = DbType.String;
				colvarGuestListLastName.MaxLength = 200;
				colvarGuestListLastName.AutoIncrement = false;
				colvarGuestListLastName.IsNullable = true;
				colvarGuestListLastName.IsPrimaryKey = false;
				colvarGuestListLastName.IsForeignKey = false;
				colvarGuestListLastName.IsReadOnly = false;
				colvarGuestListLastName.DefaultSetting = @"";
				colvarGuestListLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGuestListLastName);
				
				TableSchema.TableColumn colvarServiceFee = new TableSchema.TableColumn(schema);
				colvarServiceFee.ColumnName = "Service_Fee";
				colvarServiceFee.DataType = DbType.Currency;
				colvarServiceFee.MaxLength = 0;
				colvarServiceFee.AutoIncrement = false;
				colvarServiceFee.IsNullable = true;
				colvarServiceFee.IsPrimaryKey = false;
				colvarServiceFee.IsForeignKey = false;
				colvarServiceFee.IsReadOnly = false;
				colvarServiceFee.DefaultSetting = @"";
				colvarServiceFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServiceFee);
				
				TableSchema.TableColumn colvarIpAddress = new TableSchema.TableColumn(schema);
				colvarIpAddress.ColumnName = "IP_Address";
				colvarIpAddress.DataType = DbType.String;
				colvarIpAddress.MaxLength = 50;
				colvarIpAddress.AutoIncrement = false;
				colvarIpAddress.IsNullable = true;
				colvarIpAddress.IsPrimaryKey = false;
				colvarIpAddress.IsForeignKey = false;
				colvarIpAddress.IsReadOnly = false;
				colvarIpAddress.DefaultSetting = @"";
				colvarIpAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIpAddress);
				
				TableSchema.TableColumn colvarFbidSeller = new TableSchema.TableColumn(schema);
				colvarFbidSeller.ColumnName = "fbid_Seller";
				colvarFbidSeller.DataType = DbType.Int64;
				colvarFbidSeller.MaxLength = 0;
				colvarFbidSeller.AutoIncrement = false;
				colvarFbidSeller.IsNullable = true;
				colvarFbidSeller.IsPrimaryKey = false;
				colvarFbidSeller.IsForeignKey = false;
				colvarFbidSeller.IsReadOnly = false;
				colvarFbidSeller.DefaultSetting = @"";
				colvarFbidSeller.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFbidSeller);
				
				TableSchema.TableColumn colvarFbidBuyer = new TableSchema.TableColumn(schema);
				colvarFbidBuyer.ColumnName = "fbid_Buyer";
				colvarFbidBuyer.DataType = DbType.Int64;
				colvarFbidBuyer.MaxLength = 0;
				colvarFbidBuyer.AutoIncrement = false;
				colvarFbidBuyer.IsNullable = true;
				colvarFbidBuyer.IsPrimaryKey = false;
				colvarFbidBuyer.IsForeignKey = false;
				colvarFbidBuyer.IsReadOnly = false;
				colvarFbidBuyer.DefaultSetting = @"";
				colvarFbidBuyer.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFbidBuyer);
				
				TableSchema.TableColumn colvarMerchantFee = new TableSchema.TableColumn(schema);
				colvarMerchantFee.ColumnName = "Merchant_Fee";
				colvarMerchantFee.DataType = DbType.Currency;
				colvarMerchantFee.MaxLength = 0;
				colvarMerchantFee.AutoIncrement = false;
				colvarMerchantFee.IsNullable = true;
				colvarMerchantFee.IsPrimaryKey = false;
				colvarMerchantFee.IsForeignKey = false;
				colvarMerchantFee.IsReadOnly = false;
				colvarMerchantFee.DefaultSetting = @"";
				colvarMerchantFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMerchantFee);
				
				TableSchema.TableColumn colvarGroupstoreProfit = new TableSchema.TableColumn(schema);
				colvarGroupstoreProfit.ColumnName = "Groupstore_Profit";
				colvarGroupstoreProfit.DataType = DbType.Currency;
				colvarGroupstoreProfit.MaxLength = 0;
				colvarGroupstoreProfit.AutoIncrement = false;
				colvarGroupstoreProfit.IsNullable = true;
				colvarGroupstoreProfit.IsPrimaryKey = false;
				colvarGroupstoreProfit.IsForeignKey = false;
				colvarGroupstoreProfit.IsReadOnly = false;
				colvarGroupstoreProfit.DefaultSetting = @"";
				colvarGroupstoreProfit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGroupstoreProfit);
				
				TableSchema.TableColumn colvarToken = new TableSchema.TableColumn(schema);
				colvarToken.ColumnName = "token";
				colvarToken.DataType = DbType.String;
				colvarToken.MaxLength = 100;
				colvarToken.AutoIncrement = false;
				colvarToken.IsNullable = true;
				colvarToken.IsPrimaryKey = false;
				colvarToken.IsForeignKey = false;
				colvarToken.IsReadOnly = false;
				colvarToken.DefaultSetting = @"";
				colvarToken.ForeignKeyTableName = "";
				schema.Columns.Add(colvarToken);
				
				TableSchema.TableColumn colvarTicketAmountEmail = new TableSchema.TableColumn(schema);
				colvarTicketAmountEmail.ColumnName = "ticket_amount_email";
				colvarTicketAmountEmail.DataType = DbType.String;
				colvarTicketAmountEmail.MaxLength = 200;
				colvarTicketAmountEmail.AutoIncrement = false;
				colvarTicketAmountEmail.IsNullable = true;
				colvarTicketAmountEmail.IsPrimaryKey = false;
				colvarTicketAmountEmail.IsForeignKey = false;
				colvarTicketAmountEmail.IsReadOnly = false;
				colvarTicketAmountEmail.DefaultSetting = @"";
				colvarTicketAmountEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTicketAmountEmail);
				
				TableSchema.TableColumn colvarTxtype = new TableSchema.TableColumn(schema);
				colvarTxtype.ColumnName = "txtype";
				colvarTxtype.DataType = DbType.Int32;
				colvarTxtype.MaxLength = 0;
				colvarTxtype.AutoIncrement = false;
				colvarTxtype.IsNullable = true;
				colvarTxtype.IsPrimaryKey = false;
				colvarTxtype.IsForeignKey = false;
				colvarTxtype.IsReadOnly = false;
				colvarTxtype.DefaultSetting = @"";
				colvarTxtype.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTxtype);
				
				TableSchema.TableColumn colvarPfsms = new TableSchema.TableColumn(schema);
				colvarPfsms.ColumnName = "pfsms";
				colvarPfsms.DataType = DbType.String;
				colvarPfsms.MaxLength = 20;
				colvarPfsms.AutoIncrement = false;
				colvarPfsms.IsNullable = true;
				colvarPfsms.IsPrimaryKey = false;
				colvarPfsms.IsForeignKey = false;
				colvarPfsms.IsReadOnly = false;
				colvarPfsms.DefaultSetting = @"";
				colvarPfsms.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPfsms);
				
				TableSchema.TableColumn colvarCorrelationId = new TableSchema.TableColumn(schema);
				colvarCorrelationId.ColumnName = "Correlation_ID";
				colvarCorrelationId.DataType = DbType.String;
				colvarCorrelationId.MaxLength = 50;
				colvarCorrelationId.AutoIncrement = false;
				colvarCorrelationId.IsNullable = true;
				colvarCorrelationId.IsPrimaryKey = false;
				colvarCorrelationId.IsForeignKey = false;
				colvarCorrelationId.IsReadOnly = false;
				colvarCorrelationId.DefaultSetting = @"";
				colvarCorrelationId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCorrelationId);
				
				TableSchema.TableColumn colvarReceiptId = new TableSchema.TableColumn(schema);
				colvarReceiptId.ColumnName = "Receipt_ID";
				colvarReceiptId.DataType = DbType.String;
				colvarReceiptId.MaxLength = 10;
				colvarReceiptId.AutoIncrement = false;
				colvarReceiptId.IsNullable = true;
				colvarReceiptId.IsPrimaryKey = false;
				colvarReceiptId.IsForeignKey = false;
				colvarReceiptId.IsReadOnly = false;
				colvarReceiptId.DefaultSetting = @"";
				colvarReceiptId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiptId);
				
				TableSchema.TableColumn colvarLatitude = new TableSchema.TableColumn(schema);
				colvarLatitude.ColumnName = "Latitude";
				colvarLatitude.DataType = DbType.String;
				colvarLatitude.MaxLength = 50;
				colvarLatitude.AutoIncrement = false;
				colvarLatitude.IsNullable = true;
				colvarLatitude.IsPrimaryKey = false;
				colvarLatitude.IsForeignKey = false;
				colvarLatitude.IsReadOnly = false;
				colvarLatitude.DefaultSetting = @"";
				colvarLatitude.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLatitude);
				
				TableSchema.TableColumn colvarLongitude = new TableSchema.TableColumn(schema);
				colvarLongitude.ColumnName = "Longitude";
				colvarLongitude.DataType = DbType.String;
				colvarLongitude.MaxLength = 50;
				colvarLongitude.AutoIncrement = false;
				colvarLongitude.IsNullable = true;
				colvarLongitude.IsPrimaryKey = false;
				colvarLongitude.IsForeignKey = false;
				colvarLongitude.IsReadOnly = false;
				colvarLongitude.DefaultSetting = @"";
				colvarLongitude.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLongitude);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Eventomatic"].AddSchema("Transactions",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("TxKey")]
		[Bindable(true)]
		public int TxKey 
		{
			get { return GetColumnValue<int>(Columns.TxKey); }
			set { SetColumnValue(Columns.TxKey, value); }
		}
		  
		[XmlAttribute("Amount")]
		[Bindable(true)]
		public decimal Amount 
		{
			get { return GetColumnValue<decimal>(Columns.Amount); }
			set { SetColumnValue(Columns.Amount, value); }
		}
		  
		[XmlAttribute("EmailBuyer")]
		[Bindable(true)]
		public string EmailBuyer 
		{
			get { return GetColumnValue<string>(Columns.EmailBuyer); }
			set { SetColumnValue(Columns.EmailBuyer, value); }
		}
		  
		[XmlAttribute("EmailSeller")]
		[Bindable(true)]
		public string EmailSeller 
		{
			get { return GetColumnValue<string>(Columns.EmailSeller); }
			set { SetColumnValue(Columns.EmailSeller, value); }
		}
		  
		[XmlAttribute("InitDate")]
		[Bindable(true)]
		public DateTime InitDate 
		{
			get { return GetColumnValue<DateTime>(Columns.InitDate); }
			set { SetColumnValue(Columns.InitDate, value); }
		}
		  
		[XmlAttribute("EventKey")]
		[Bindable(true)]
		public int? EventKey 
		{
			get { return GetColumnValue<int?>(Columns.EventKey); }
			set { SetColumnValue(Columns.EventKey, value); }
		}
		  
		[XmlAttribute("Currency")]
		[Bindable(true)]
		public string Currency 
		{
			get { return GetColumnValue<string>(Columns.Currency); }
			set { SetColumnValue(Columns.Currency, value); }
		}
		  
		[XmlAttribute("ItemDescription")]
		[Bindable(true)]
		public string ItemDescription 
		{
			get { return GetColumnValue<string>(Columns.ItemDescription); }
			set { SetColumnValue(Columns.ItemDescription, value); }
		}
		  
		[XmlAttribute("TxStatus")]
		[Bindable(true)]
		public int? TxStatus 
		{
			get { return GetColumnValue<int?>(Columns.TxStatus); }
			set { SetColumnValue(Columns.TxStatus, value); }
		}
		  
		[XmlAttribute("ConfirmationDate")]
		[Bindable(true)]
		public DateTime? ConfirmationDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ConfirmationDate); }
			set { SetColumnValue(Columns.ConfirmationDate, value); }
		}
		  
		[XmlAttribute("TxnId")]
		[Bindable(true)]
		public string TxnId 
		{
			get { return GetColumnValue<string>(Columns.TxnId); }
			set { SetColumnValue(Columns.TxnId, value); }
		}
		  
		[XmlAttribute("McGross")]
		[Bindable(true)]
		public decimal? McGross 
		{
			get { return GetColumnValue<decimal?>(Columns.McGross); }
			set { SetColumnValue(Columns.McGross, value); }
		}
		  
		[XmlAttribute("PayerId")]
		[Bindable(true)]
		public string PayerId 
		{
			get { return GetColumnValue<string>(Columns.PayerId); }
			set { SetColumnValue(Columns.PayerId, value); }
		}
		  
		[XmlAttribute("Tax")]
		[Bindable(true)]
		public decimal? Tax 
		{
			get { return GetColumnValue<decimal?>(Columns.Tax); }
			set { SetColumnValue(Columns.Tax, value); }
		}
		  
		[XmlAttribute("PaymentStatus")]
		[Bindable(true)]
		public string PaymentStatus 
		{
			get { return GetColumnValue<string>(Columns.PaymentStatus); }
			set { SetColumnValue(Columns.PaymentStatus, value); }
		}
		  
		[XmlAttribute("PayerStatus")]
		[Bindable(true)]
		public string PayerStatus 
		{
			get { return GetColumnValue<string>(Columns.PayerStatus); }
			set { SetColumnValue(Columns.PayerStatus, value); }
		}
		  
		[XmlAttribute("BusinessEmail")]
		[Bindable(true)]
		public string BusinessEmail 
		{
			get { return GetColumnValue<string>(Columns.BusinessEmail); }
			set { SetColumnValue(Columns.BusinessEmail, value); }
		}
		  
		[XmlAttribute("PayerEmail")]
		[Bindable(true)]
		public string PayerEmail 
		{
			get { return GetColumnValue<string>(Columns.PayerEmail); }
			set { SetColumnValue(Columns.PayerEmail, value); }
		}
		  
		[XmlAttribute("PaymentType")]
		[Bindable(true)]
		public string PaymentType 
		{
			get { return GetColumnValue<string>(Columns.PaymentType); }
			set { SetColumnValue(Columns.PaymentType, value); }
		}
		  
		[XmlAttribute("McCurrency")]
		[Bindable(true)]
		public string McCurrency 
		{
			get { return GetColumnValue<string>(Columns.McCurrency); }
			set { SetColumnValue(Columns.McCurrency, value); }
		}
		  
		[XmlAttribute("TransactionSubject")]
		[Bindable(true)]
		public string TransactionSubject 
		{
			get { return GetColumnValue<string>(Columns.TransactionSubject); }
			set { SetColumnValue(Columns.TransactionSubject, value); }
		}
		  
		[XmlAttribute("LastName")]
		[Bindable(true)]
		public string LastName 
		{
			get { return GetColumnValue<string>(Columns.LastName); }
			set { SetColumnValue(Columns.LastName, value); }
		}
		  
		[XmlAttribute("FirstName")]
		[Bindable(true)]
		public string FirstName 
		{
			get { return GetColumnValue<string>(Columns.FirstName); }
			set { SetColumnValue(Columns.FirstName, value); }
		}
		  
		[XmlAttribute("TransactionLog")]
		[Bindable(true)]
		public string TransactionLog 
		{
			get { return GetColumnValue<string>(Columns.TransactionLog); }
			set { SetColumnValue(Columns.TransactionLog, value); }
		}
		  
		[XmlAttribute("GuestListFirstName")]
		[Bindable(true)]
		public string GuestListFirstName 
		{
			get { return GetColumnValue<string>(Columns.GuestListFirstName); }
			set { SetColumnValue(Columns.GuestListFirstName, value); }
		}
		  
		[XmlAttribute("GuestListLastName")]
		[Bindable(true)]
		public string GuestListLastName 
		{
			get { return GetColumnValue<string>(Columns.GuestListLastName); }
			set { SetColumnValue(Columns.GuestListLastName, value); }
		}
		  
		[XmlAttribute("ServiceFee")]
		[Bindable(true)]
		public decimal? ServiceFee 
		{
			get { return GetColumnValue<decimal?>(Columns.ServiceFee); }
			set { SetColumnValue(Columns.ServiceFee, value); }
		}
		  
		[XmlAttribute("IpAddress")]
		[Bindable(true)]
		public string IpAddress 
		{
			get { return GetColumnValue<string>(Columns.IpAddress); }
			set { SetColumnValue(Columns.IpAddress, value); }
		}
		  
		[XmlAttribute("FbidSeller")]
		[Bindable(true)]
		public long? FbidSeller 
		{
			get { return GetColumnValue<long?>(Columns.FbidSeller); }
			set { SetColumnValue(Columns.FbidSeller, value); }
		}
		  
		[XmlAttribute("FbidBuyer")]
		[Bindable(true)]
		public long? FbidBuyer 
		{
			get { return GetColumnValue<long?>(Columns.FbidBuyer); }
			set { SetColumnValue(Columns.FbidBuyer, value); }
		}
		  
		[XmlAttribute("MerchantFee")]
		[Bindable(true)]
		public decimal? MerchantFee 
		{
			get { return GetColumnValue<decimal?>(Columns.MerchantFee); }
			set { SetColumnValue(Columns.MerchantFee, value); }
		}
		  
		[XmlAttribute("GroupstoreProfit")]
		[Bindable(true)]
		public decimal? GroupstoreProfit 
		{
			get { return GetColumnValue<decimal?>(Columns.GroupstoreProfit); }
			set { SetColumnValue(Columns.GroupstoreProfit, value); }
		}
		  
		[XmlAttribute("Token")]
		[Bindable(true)]
		public string Token 
		{
			get { return GetColumnValue<string>(Columns.Token); }
			set { SetColumnValue(Columns.Token, value); }
		}
		  
		[XmlAttribute("TicketAmountEmail")]
		[Bindable(true)]
		public string TicketAmountEmail 
		{
			get { return GetColumnValue<string>(Columns.TicketAmountEmail); }
			set { SetColumnValue(Columns.TicketAmountEmail, value); }
		}
		  
		[XmlAttribute("Txtype")]
		[Bindable(true)]
		public int? Txtype 
		{
			get { return GetColumnValue<int?>(Columns.Txtype); }
			set { SetColumnValue(Columns.Txtype, value); }
		}
		  
		[XmlAttribute("Pfsms")]
		[Bindable(true)]
		public string Pfsms 
		{
			get { return GetColumnValue<string>(Columns.Pfsms); }
			set { SetColumnValue(Columns.Pfsms, value); }
		}
		  
		[XmlAttribute("CorrelationId")]
		[Bindable(true)]
		public string CorrelationId 
		{
			get { return GetColumnValue<string>(Columns.CorrelationId); }
			set { SetColumnValue(Columns.CorrelationId, value); }
		}
		  
		[XmlAttribute("ReceiptId")]
		[Bindable(true)]
		public string ReceiptId 
		{
			get { return GetColumnValue<string>(Columns.ReceiptId); }
			set { SetColumnValue(Columns.ReceiptId, value); }
		}
		  
		[XmlAttribute("Latitude")]
		[Bindable(true)]
		public string Latitude 
		{
			get { return GetColumnValue<string>(Columns.Latitude); }
			set { SetColumnValue(Columns.Latitude, value); }
		}
		  
		[XmlAttribute("Longitude")]
		[Bindable(true)]
		public string Longitude 
		{
			get { return GetColumnValue<string>(Columns.Longitude); }
			set { SetColumnValue(Columns.Longitude, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public Eventomatic_DB.QuestionsAnsweredCollection QuestionsAnsweredRecords()
		{
			return new Eventomatic_DB.QuestionsAnsweredCollection().Where(QuestionsAnswered.Columns.TxKey, TxKey).Load();
		}
		public Eventomatic_DB.TicketsPurchasedCollection TicketsPurchasedRecords()
		{
			return new Eventomatic_DB.TicketsPurchasedCollection().Where(TicketsPurchased.Columns.TxKey, TxKey).Load();
		}
		#endregion
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(decimal varAmount,string varEmailBuyer,string varEmailSeller,DateTime varInitDate,int? varEventKey,string varCurrency,string varItemDescription,int? varTxStatus,DateTime? varConfirmationDate,string varTxnId,decimal? varMcGross,string varPayerId,decimal? varTax,string varPaymentStatus,string varPayerStatus,string varBusinessEmail,string varPayerEmail,string varPaymentType,string varMcCurrency,string varTransactionSubject,string varLastName,string varFirstName,string varTransactionLog,string varGuestListFirstName,string varGuestListLastName,decimal? varServiceFee,string varIpAddress,long? varFbidSeller,long? varFbidBuyer,decimal? varMerchantFee,decimal? varGroupstoreProfit,string varToken,string varTicketAmountEmail,int? varTxtype,string varPfsms,string varCorrelationId,string varReceiptId,string varLatitude,string varLongitude)
		{
			Transaction item = new Transaction();
			
			item.Amount = varAmount;
			
			item.EmailBuyer = varEmailBuyer;
			
			item.EmailSeller = varEmailSeller;
			
			item.InitDate = varInitDate;
			
			item.EventKey = varEventKey;
			
			item.Currency = varCurrency;
			
			item.ItemDescription = varItemDescription;
			
			item.TxStatus = varTxStatus;
			
			item.ConfirmationDate = varConfirmationDate;
			
			item.TxnId = varTxnId;
			
			item.McGross = varMcGross;
			
			item.PayerId = varPayerId;
			
			item.Tax = varTax;
			
			item.PaymentStatus = varPaymentStatus;
			
			item.PayerStatus = varPayerStatus;
			
			item.BusinessEmail = varBusinessEmail;
			
			item.PayerEmail = varPayerEmail;
			
			item.PaymentType = varPaymentType;
			
			item.McCurrency = varMcCurrency;
			
			item.TransactionSubject = varTransactionSubject;
			
			item.LastName = varLastName;
			
			item.FirstName = varFirstName;
			
			item.TransactionLog = varTransactionLog;
			
			item.GuestListFirstName = varGuestListFirstName;
			
			item.GuestListLastName = varGuestListLastName;
			
			item.ServiceFee = varServiceFee;
			
			item.IpAddress = varIpAddress;
			
			item.FbidSeller = varFbidSeller;
			
			item.FbidBuyer = varFbidBuyer;
			
			item.MerchantFee = varMerchantFee;
			
			item.GroupstoreProfit = varGroupstoreProfit;
			
			item.Token = varToken;
			
			item.TicketAmountEmail = varTicketAmountEmail;
			
			item.Txtype = varTxtype;
			
			item.Pfsms = varPfsms;
			
			item.CorrelationId = varCorrelationId;
			
			item.ReceiptId = varReceiptId;
			
			item.Latitude = varLatitude;
			
			item.Longitude = varLongitude;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varTxKey,decimal varAmount,string varEmailBuyer,string varEmailSeller,DateTime varInitDate,int? varEventKey,string varCurrency,string varItemDescription,int? varTxStatus,DateTime? varConfirmationDate,string varTxnId,decimal? varMcGross,string varPayerId,decimal? varTax,string varPaymentStatus,string varPayerStatus,string varBusinessEmail,string varPayerEmail,string varPaymentType,string varMcCurrency,string varTransactionSubject,string varLastName,string varFirstName,string varTransactionLog,string varGuestListFirstName,string varGuestListLastName,decimal? varServiceFee,string varIpAddress,long? varFbidSeller,long? varFbidBuyer,decimal? varMerchantFee,decimal? varGroupstoreProfit,string varToken,string varTicketAmountEmail,int? varTxtype,string varPfsms,string varCorrelationId,string varReceiptId,string varLatitude,string varLongitude)
		{
			Transaction item = new Transaction();
			
				item.TxKey = varTxKey;
			
				item.Amount = varAmount;
			
				item.EmailBuyer = varEmailBuyer;
			
				item.EmailSeller = varEmailSeller;
			
				item.InitDate = varInitDate;
			
				item.EventKey = varEventKey;
			
				item.Currency = varCurrency;
			
				item.ItemDescription = varItemDescription;
			
				item.TxStatus = varTxStatus;
			
				item.ConfirmationDate = varConfirmationDate;
			
				item.TxnId = varTxnId;
			
				item.McGross = varMcGross;
			
				item.PayerId = varPayerId;
			
				item.Tax = varTax;
			
				item.PaymentStatus = varPaymentStatus;
			
				item.PayerStatus = varPayerStatus;
			
				item.BusinessEmail = varBusinessEmail;
			
				item.PayerEmail = varPayerEmail;
			
				item.PaymentType = varPaymentType;
			
				item.McCurrency = varMcCurrency;
			
				item.TransactionSubject = varTransactionSubject;
			
				item.LastName = varLastName;
			
				item.FirstName = varFirstName;
			
				item.TransactionLog = varTransactionLog;
			
				item.GuestListFirstName = varGuestListFirstName;
			
				item.GuestListLastName = varGuestListLastName;
			
				item.ServiceFee = varServiceFee;
			
				item.IpAddress = varIpAddress;
			
				item.FbidSeller = varFbidSeller;
			
				item.FbidBuyer = varFbidBuyer;
			
				item.MerchantFee = varMerchantFee;
			
				item.GroupstoreProfit = varGroupstoreProfit;
			
				item.Token = varToken;
			
				item.TicketAmountEmail = varTicketAmountEmail;
			
				item.Txtype = varTxtype;
			
				item.Pfsms = varPfsms;
			
				item.CorrelationId = varCorrelationId;
			
				item.ReceiptId = varReceiptId;
			
				item.Latitude = varLatitude;
			
				item.Longitude = varLongitude;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn TxKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn AmountColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn EmailBuyerColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn EmailSellerColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn InitDateColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn EventKeyColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn CurrencyColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemDescriptionColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn TxStatusColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ConfirmationDateColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn TxnIdColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn McGrossColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn PayerIdColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn TaxColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentStatusColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn PayerStatusColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn BusinessEmailColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn PayerEmailColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentTypeColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn McCurrencyColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn TransactionSubjectColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn LastNameColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn FirstNameColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn TransactionLogColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn GuestListFirstNameColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn GuestListLastNameColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn ServiceFeeColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn IpAddressColumn
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn FbidSellerColumn
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        public static TableSchema.TableColumn FbidBuyerColumn
        {
            get { return Schema.Columns[29]; }
        }
        
        
        
        public static TableSchema.TableColumn MerchantFeeColumn
        {
            get { return Schema.Columns[30]; }
        }
        
        
        
        public static TableSchema.TableColumn GroupstoreProfitColumn
        {
            get { return Schema.Columns[31]; }
        }
        
        
        
        public static TableSchema.TableColumn TokenColumn
        {
            get { return Schema.Columns[32]; }
        }
        
        
        
        public static TableSchema.TableColumn TicketAmountEmailColumn
        {
            get { return Schema.Columns[33]; }
        }
        
        
        
        public static TableSchema.TableColumn TxtypeColumn
        {
            get { return Schema.Columns[34]; }
        }
        
        
        
        public static TableSchema.TableColumn PfsmsColumn
        {
            get { return Schema.Columns[35]; }
        }
        
        
        
        public static TableSchema.TableColumn CorrelationIdColumn
        {
            get { return Schema.Columns[36]; }
        }
        
        
        
        public static TableSchema.TableColumn ReceiptIdColumn
        {
            get { return Schema.Columns[37]; }
        }
        
        
        
        public static TableSchema.TableColumn LatitudeColumn
        {
            get { return Schema.Columns[38]; }
        }
        
        
        
        public static TableSchema.TableColumn LongitudeColumn
        {
            get { return Schema.Columns[39]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string TxKey = @"Tx_Key";
			 public static string Amount = @"Amount";
			 public static string EmailBuyer = @"Email_Buyer";
			 public static string EmailSeller = @"Email_Seller";
			 public static string InitDate = @"Init_Date";
			 public static string EventKey = @"Event_Key";
			 public static string Currency = @"Currency";
			 public static string ItemDescription = @"Item_Description";
			 public static string TxStatus = @"Tx_Status";
			 public static string ConfirmationDate = @"Confirmation_Date";
			 public static string TxnId = @"txn_id";
			 public static string McGross = @"mc_gross";
			 public static string PayerId = @"payer_id";
			 public static string Tax = @"tax";
			 public static string PaymentStatus = @"payment_status";
			 public static string PayerStatus = @"payer_status";
			 public static string BusinessEmail = @"business_email";
			 public static string PayerEmail = @"payer_email";
			 public static string PaymentType = @"payment_type";
			 public static string McCurrency = @"mc_currency";
			 public static string TransactionSubject = @"transaction_subject";
			 public static string LastName = @"last_name";
			 public static string FirstName = @"first_name";
			 public static string TransactionLog = @"Transaction_Log";
			 public static string GuestListFirstName = @"GuestList_First_Name";
			 public static string GuestListLastName = @"GuestList_Last_Name";
			 public static string ServiceFee = @"Service_Fee";
			 public static string IpAddress = @"IP_Address";
			 public static string FbidSeller = @"fbid_Seller";
			 public static string FbidBuyer = @"fbid_Buyer";
			 public static string MerchantFee = @"Merchant_Fee";
			 public static string GroupstoreProfit = @"Groupstore_Profit";
			 public static string Token = @"token";
			 public static string TicketAmountEmail = @"ticket_amount_email";
			 public static string Txtype = @"txtype";
			 public static string Pfsms = @"pfsms";
			 public static string CorrelationId = @"Correlation_ID";
			 public static string ReceiptId = @"Receipt_ID";
			 public static string Latitude = @"Latitude";
			 public static string Longitude = @"Longitude";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
