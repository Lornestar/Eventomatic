using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Eventomatic_DB{
    public partial class SPs{
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_AnyDataInTables Procedure
        /// </summary>
        public static StoredProcedure AspnetAnyDataInTables(int? TablesToCheck)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_AnyDataInTables", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@TablesToCheck", TablesToCheck, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Applications_CreateApplication Procedure
        /// </summary>
        public static StoredProcedure AspnetApplicationsCreateApplication(string ApplicationName, Guid? ApplicationId)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Applications_CreateApplication", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddOutputParameter("@ApplicationId", DbType.Guid, null, null);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_CheckSchemaVersion Procedure
        /// </summary>
        public static StoredProcedure AspnetCheckSchemaVersion(string Feature, string CompatibleSchemaVersion)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_CheckSchemaVersion", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Feature", Feature, DbType.String, null, null);
        	
            sp.Command.AddParameter("@CompatibleSchemaVersion", CompatibleSchemaVersion, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_ChangePasswordQuestionAndAnswer Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipChangePasswordQuestionAndAnswer(string ApplicationName, string UserName, string NewPasswordQuestion, string NewPasswordAnswer)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_ChangePasswordQuestionAndAnswer", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@NewPasswordQuestion", NewPasswordQuestion, DbType.String, null, null);
        	
            sp.Command.AddParameter("@NewPasswordAnswer", NewPasswordAnswer, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_CreateUser Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipCreateUser(string ApplicationName, string UserName, string Password, string PasswordSalt, string Email, string PasswordQuestion, string PasswordAnswer, bool? IsApproved, DateTime? CurrentTimeUtc, DateTime? CreateDate, int? UniqueEmail, int? PasswordFormat, Guid? UserId)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_CreateUser", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Password", Password, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PasswordSalt", PasswordSalt, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Email", Email, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PasswordQuestion", PasswordQuestion, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PasswordAnswer", PasswordAnswer, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IsApproved", IsApproved, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@CreateDate", CreateDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@UniqueEmail", UniqueEmail, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PasswordFormat", PasswordFormat, DbType.Int32, 0, 10);
        	
            sp.Command.AddOutputParameter("@UserId", DbType.Guid, null, null);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_FindUsersByEmail Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipFindUsersByEmail(string ApplicationName, string EmailToMatch, int? PageIndex, int? PageSize)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_FindUsersByEmail", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@EmailToMatch", EmailToMatch, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_FindUsersByName Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipFindUsersByName(string ApplicationName, string UserNameToMatch, int? PageIndex, int? PageSize)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_FindUsersByName", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserNameToMatch", UserNameToMatch, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_GetAllUsers Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipGetAllUsers(string ApplicationName, int? PageIndex, int? PageSize)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_GetAllUsers", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_GetNumberOfUsersOnline Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipGetNumberOfUsersOnline(string ApplicationName, int? MinutesSinceLastInActive, DateTime? CurrentTimeUtc)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_GetNumberOfUsersOnline", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@MinutesSinceLastInActive", MinutesSinceLastInActive, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_GetPassword Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipGetPassword(string ApplicationName, string UserName, int? MaxInvalidPasswordAttempts, int? PasswordAttemptWindow, DateTime? CurrentTimeUtc, string PasswordAnswer)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_GetPassword", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@MaxInvalidPasswordAttempts", MaxInvalidPasswordAttempts, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PasswordAttemptWindow", PasswordAttemptWindow, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@PasswordAnswer", PasswordAnswer, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_GetPasswordWithFormat Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipGetPasswordWithFormat(string ApplicationName, string UserName, bool? UpdateLastLoginActivityDate, DateTime? CurrentTimeUtc)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_GetPasswordWithFormat", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UpdateLastLoginActivityDate", UpdateLastLoginActivityDate, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_GetUserByEmail Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipGetUserByEmail(string ApplicationName, string Email)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_GetUserByEmail", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Email", Email, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_GetUserByName Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipGetUserByName(string ApplicationName, string UserName, DateTime? CurrentTimeUtc, bool? UpdateLastActivity)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_GetUserByName", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@UpdateLastActivity", UpdateLastActivity, DbType.Boolean, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_GetUserByUserId Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipGetUserByUserId(Guid? UserId, DateTime? CurrentTimeUtc, bool? UpdateLastActivity)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_GetUserByUserId", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@UserId", UserId, DbType.Guid, null, null);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@UpdateLastActivity", UpdateLastActivity, DbType.Boolean, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_ResetPassword Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipResetPassword(string ApplicationName, string UserName, string NewPassword, int? MaxInvalidPasswordAttempts, int? PasswordAttemptWindow, string PasswordSalt, DateTime? CurrentTimeUtc, int? PasswordFormat, string PasswordAnswer)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_ResetPassword", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@NewPassword", NewPassword, DbType.String, null, null);
        	
            sp.Command.AddParameter("@MaxInvalidPasswordAttempts", MaxInvalidPasswordAttempts, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PasswordAttemptWindow", PasswordAttemptWindow, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PasswordSalt", PasswordSalt, DbType.String, null, null);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@PasswordFormat", PasswordFormat, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PasswordAnswer", PasswordAnswer, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_SetPassword Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipSetPassword(string ApplicationName, string UserName, string NewPassword, string PasswordSalt, DateTime? CurrentTimeUtc, int? PasswordFormat)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_SetPassword", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@NewPassword", NewPassword, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PasswordSalt", PasswordSalt, DbType.String, null, null);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@PasswordFormat", PasswordFormat, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_UnlockUser Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipUnlockUser(string ApplicationName, string UserName)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_UnlockUser", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_UpdateUser Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipUpdateUser(string ApplicationName, string UserName, string Email, string Comment, bool? IsApproved, DateTime? LastLoginDate, DateTime? LastActivityDate, int? UniqueEmail, DateTime? CurrentTimeUtc)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_UpdateUser", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Email", Email, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Comment", Comment, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IsApproved", IsApproved, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@LastLoginDate", LastLoginDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@LastActivityDate", LastActivityDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@UniqueEmail", UniqueEmail, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_UpdateUserInfo Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipUpdateUserInfo(string ApplicationName, string UserName, bool? IsPasswordCorrect, bool? UpdateLastLoginActivityDate, int? MaxInvalidPasswordAttempts, int? PasswordAttemptWindow, DateTime? CurrentTimeUtc, DateTime? LastLoginDate, DateTime? LastActivityDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_UpdateUserInfo", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IsPasswordCorrect", IsPasswordCorrect, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@UpdateLastLoginActivityDate", UpdateLastLoginActivityDate, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@MaxInvalidPasswordAttempts", MaxInvalidPasswordAttempts, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PasswordAttemptWindow", PasswordAttemptWindow, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@LastLoginDate", LastLoginDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@LastActivityDate", LastActivityDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Paths_CreatePath Procedure
        /// </summary>
        public static StoredProcedure AspnetPathsCreatePath(Guid? ApplicationId, string Path, Guid? PathId)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Paths_CreatePath", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationId", ApplicationId, DbType.Guid, null, null);
        	
            sp.Command.AddParameter("@Path", Path, DbType.String, null, null);
        	
            sp.Command.AddOutputParameter("@PathId", DbType.Guid, null, null);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Personalization_GetApplicationId Procedure
        /// </summary>
        public static StoredProcedure AspnetPersonalizationGetApplicationId(string ApplicationName, Guid? ApplicationId)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Personalization_GetApplicationId", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddOutputParameter("@ApplicationId", DbType.Guid, null, null);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_PersonalizationAdministration_DeleteAllState Procedure
        /// </summary>
        public static StoredProcedure AspnetPersonalizationAdministrationDeleteAllState(bool? AllUsersScope, string ApplicationName, int? Count)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_PersonalizationAdministration_DeleteAllState", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@AllUsersScope", AllUsersScope, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddOutputParameter("@Count", DbType.Int32, 0, 10);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_PersonalizationAdministration_FindState Procedure
        /// </summary>
        public static StoredProcedure AspnetPersonalizationAdministrationFindState(bool? AllUsersScope, string ApplicationName, int? PageIndex, int? PageSize, string Path, string UserName, DateTime? InactiveSinceDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_PersonalizationAdministration_FindState", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@AllUsersScope", AllUsersScope, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Path", Path, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@InactiveSinceDate", InactiveSinceDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_PersonalizationAdministration_GetCountOfState Procedure
        /// </summary>
        public static StoredProcedure AspnetPersonalizationAdministrationGetCountOfState(int? Count, bool? AllUsersScope, string ApplicationName, string Path, string UserName, DateTime? InactiveSinceDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_PersonalizationAdministration_GetCountOfState", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddOutputParameter("@Count", DbType.Int32, 0, 10);
            
            sp.Command.AddParameter("@AllUsersScope", AllUsersScope, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Path", Path, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@InactiveSinceDate", InactiveSinceDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_PersonalizationAdministration_ResetSharedState Procedure
        /// </summary>
        public static StoredProcedure AspnetPersonalizationAdministrationResetSharedState(int? Count, string ApplicationName, string Path)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_PersonalizationAdministration_ResetSharedState", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddOutputParameter("@Count", DbType.Int32, 0, 10);
            
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Path", Path, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_PersonalizationAdministration_ResetUserState Procedure
        /// </summary>
        public static StoredProcedure AspnetPersonalizationAdministrationResetUserState(int? Count, string ApplicationName, DateTime? InactiveSinceDate, string UserName, string Path)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_PersonalizationAdministration_ResetUserState", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddOutputParameter("@Count", DbType.Int32, 0, 10);
            
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@InactiveSinceDate", InactiveSinceDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Path", Path, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_PersonalizationAllUsers_GetPageSettings Procedure
        /// </summary>
        public static StoredProcedure AspnetPersonalizationAllUsersGetPageSettings(string ApplicationName, string Path)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_PersonalizationAllUsers_GetPageSettings", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Path", Path, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_PersonalizationAllUsers_ResetPageSettings Procedure
        /// </summary>
        public static StoredProcedure AspnetPersonalizationAllUsersResetPageSettings(string ApplicationName, string Path)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_PersonalizationAllUsers_ResetPageSettings", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Path", Path, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_PersonalizationAllUsers_SetPageSettings Procedure
        /// </summary>
        public static StoredProcedure AspnetPersonalizationAllUsersSetPageSettings(string ApplicationName, string Path, byte[] PageSettings, DateTime? CurrentTimeUtc)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_PersonalizationAllUsers_SetPageSettings", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Path", Path, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PageSettings", PageSettings, DbType.Binary, null, null);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_PersonalizationPerUser_GetPageSettings Procedure
        /// </summary>
        public static StoredProcedure AspnetPersonalizationPerUserGetPageSettings(string ApplicationName, string UserName, string Path, DateTime? CurrentTimeUtc)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_PersonalizationPerUser_GetPageSettings", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Path", Path, DbType.String, null, null);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_PersonalizationPerUser_ResetPageSettings Procedure
        /// </summary>
        public static StoredProcedure AspnetPersonalizationPerUserResetPageSettings(string ApplicationName, string UserName, string Path, DateTime? CurrentTimeUtc)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_PersonalizationPerUser_ResetPageSettings", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Path", Path, DbType.String, null, null);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_PersonalizationPerUser_SetPageSettings Procedure
        /// </summary>
        public static StoredProcedure AspnetPersonalizationPerUserSetPageSettings(string ApplicationName, string UserName, string Path, byte[] PageSettings, DateTime? CurrentTimeUtc)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_PersonalizationPerUser_SetPageSettings", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Path", Path, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PageSettings", PageSettings, DbType.Binary, null, null);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Profile_DeleteInactiveProfiles Procedure
        /// </summary>
        public static StoredProcedure AspnetProfileDeleteInactiveProfiles(string ApplicationName, int? ProfileAuthOptions, DateTime? InactiveSinceDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Profile_DeleteInactiveProfiles", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@ProfileAuthOptions", ProfileAuthOptions, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@InactiveSinceDate", InactiveSinceDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Profile_DeleteProfiles Procedure
        /// </summary>
        public static StoredProcedure AspnetProfileDeleteProfiles(string ApplicationName, string UserNames)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Profile_DeleteProfiles", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserNames", UserNames, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Profile_GetNumberOfInactiveProfiles Procedure
        /// </summary>
        public static StoredProcedure AspnetProfileGetNumberOfInactiveProfiles(string ApplicationName, int? ProfileAuthOptions, DateTime? InactiveSinceDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Profile_GetNumberOfInactiveProfiles", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@ProfileAuthOptions", ProfileAuthOptions, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@InactiveSinceDate", InactiveSinceDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Profile_GetProfiles Procedure
        /// </summary>
        public static StoredProcedure AspnetProfileGetProfiles(string ApplicationName, int? ProfileAuthOptions, int? PageIndex, int? PageSize, string UserNameToMatch, DateTime? InactiveSinceDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Profile_GetProfiles", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@ProfileAuthOptions", ProfileAuthOptions, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@UserNameToMatch", UserNameToMatch, DbType.String, null, null);
        	
            sp.Command.AddParameter("@InactiveSinceDate", InactiveSinceDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Profile_GetProperties Procedure
        /// </summary>
        public static StoredProcedure AspnetProfileGetProperties(string ApplicationName, string UserName, DateTime? CurrentTimeUtc)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Profile_GetProperties", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Profile_SetProperties Procedure
        /// </summary>
        public static StoredProcedure AspnetProfileSetProperties(string ApplicationName, string PropertyNames, string PropertyValuesString, byte[] PropertyValuesBinary, string UserName, bool? IsUserAnonymous, DateTime? CurrentTimeUtc)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Profile_SetProperties", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PropertyNames", PropertyNames, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PropertyValuesString", PropertyValuesString, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PropertyValuesBinary", PropertyValuesBinary, DbType.Binary, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IsUserAnonymous", IsUserAnonymous, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_RegisterSchemaVersion Procedure
        /// </summary>
        public static StoredProcedure AspnetRegisterSchemaVersion(string Feature, string CompatibleSchemaVersion, bool? IsCurrentVersion, bool? RemoveIncompatibleSchema)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_RegisterSchemaVersion", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Feature", Feature, DbType.String, null, null);
        	
            sp.Command.AddParameter("@CompatibleSchemaVersion", CompatibleSchemaVersion, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IsCurrentVersion", IsCurrentVersion, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@RemoveIncompatibleSchema", RemoveIncompatibleSchema, DbType.Boolean, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Roles_CreateRole Procedure
        /// </summary>
        public static StoredProcedure AspnetRolesCreateRole(string ApplicationName, string RoleName)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Roles_CreateRole", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@RoleName", RoleName, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Roles_DeleteRole Procedure
        /// </summary>
        public static StoredProcedure AspnetRolesDeleteRole(string ApplicationName, string RoleName, bool? DeleteOnlyIfRoleIsEmpty)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Roles_DeleteRole", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@RoleName", RoleName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@DeleteOnlyIfRoleIsEmpty", DeleteOnlyIfRoleIsEmpty, DbType.Boolean, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Roles_GetAllRoles Procedure
        /// </summary>
        public static StoredProcedure AspnetRolesGetAllRoles(string ApplicationName)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Roles_GetAllRoles", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Roles_RoleExists Procedure
        /// </summary>
        public static StoredProcedure AspnetRolesRoleExists(string ApplicationName, string RoleName)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Roles_RoleExists", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@RoleName", RoleName, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Setup_RemoveAllRoleMembers Procedure
        /// </summary>
        public static StoredProcedure AspnetSetupRemoveAllRoleMembers(string name)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Setup_RemoveAllRoleMembers", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@name", name, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Setup_RestorePermissions Procedure
        /// </summary>
        public static StoredProcedure AspnetSetupRestorePermissions(string name)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Setup_RestorePermissions", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@name", name, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_UnRegisterSchemaVersion Procedure
        /// </summary>
        public static StoredProcedure AspnetUnRegisterSchemaVersion(string Feature, string CompatibleSchemaVersion)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_UnRegisterSchemaVersion", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Feature", Feature, DbType.String, null, null);
        	
            sp.Command.AddParameter("@CompatibleSchemaVersion", CompatibleSchemaVersion, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Users_CreateUser Procedure
        /// </summary>
        public static StoredProcedure AspnetUsersCreateUser(Guid? ApplicationId, string UserName, bool? IsUserAnonymous, DateTime? LastActivityDate, Guid? UserId)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Users_CreateUser", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationId", ApplicationId, DbType.Guid, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IsUserAnonymous", IsUserAnonymous, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@LastActivityDate", LastActivityDate, DbType.DateTime, null, null);
        	
            sp.Command.AddOutputParameter("@UserId", DbType.Guid, null, null);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Users_DeleteUser Procedure
        /// </summary>
        public static StoredProcedure AspnetUsersDeleteUser(string ApplicationName, string UserName, int? TablesToDeleteFrom, int? NumTablesDeletedFrom)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Users_DeleteUser", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@TablesToDeleteFrom", TablesToDeleteFrom, DbType.Int32, 0, 10);
        	
            sp.Command.AddOutputParameter("@NumTablesDeletedFrom", DbType.Int32, 0, 10);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_UsersInRoles_AddUsersToRoles Procedure
        /// </summary>
        public static StoredProcedure AspnetUsersInRolesAddUsersToRoles(string ApplicationName, string UserNames, string RoleNames, DateTime? CurrentTimeUtc)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_UsersInRoles_AddUsersToRoles", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserNames", UserNames, DbType.String, null, null);
        	
            sp.Command.AddParameter("@RoleNames", RoleNames, DbType.String, null, null);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_UsersInRoles_FindUsersInRole Procedure
        /// </summary>
        public static StoredProcedure AspnetUsersInRolesFindUsersInRole(string ApplicationName, string RoleName, string UserNameToMatch)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_UsersInRoles_FindUsersInRole", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@RoleName", RoleName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserNameToMatch", UserNameToMatch, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_UsersInRoles_GetRolesForUser Procedure
        /// </summary>
        public static StoredProcedure AspnetUsersInRolesGetRolesForUser(string ApplicationName, string UserName)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_UsersInRoles_GetRolesForUser", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_UsersInRoles_GetUsersInRoles Procedure
        /// </summary>
        public static StoredProcedure AspnetUsersInRolesGetUsersInRoles(string ApplicationName, string RoleName)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_UsersInRoles_GetUsersInRoles", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@RoleName", RoleName, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_UsersInRoles_IsUserInRole Procedure
        /// </summary>
        public static StoredProcedure AspnetUsersInRolesIsUserInRole(string ApplicationName, string UserName, string RoleName)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_UsersInRoles_IsUserInRole", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@RoleName", RoleName, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_UsersInRoles_RemoveUsersFromRoles Procedure
        /// </summary>
        public static StoredProcedure AspnetUsersInRolesRemoveUsersFromRoles(string ApplicationName, string UserNames, string RoleNames)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_UsersInRoles_RemoveUsersFromRoles", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserNames", UserNames, DbType.String, null, null);
        	
            sp.Command.AddParameter("@RoleNames", RoleNames, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_WebEvent_LogEvent Procedure
        /// </summary>
        public static StoredProcedure AspnetWebEventLogEvent(string EventId, DateTime? EventTimeUtc, DateTime? EventTime, string EventType, decimal? EventSequence, decimal? EventOccurrence, int? EventCode, int? EventDetailCode, string Message, string ApplicationPath, string ApplicationVirtualPath, string MachineName, string RequestUrl, string ExceptionType, string Details)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_WebEvent_LogEvent", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@EventId", EventId, DbType.AnsiStringFixedLength, null, null);
        	
            sp.Command.AddParameter("@EventTimeUtc", EventTimeUtc, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@EventTime", EventTime, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@EventType", EventType, DbType.String, null, null);
        	
            sp.Command.AddParameter("@EventSequence", EventSequence, DbType.Decimal, 0, 19);
        	
            sp.Command.AddParameter("@EventOccurrence", EventOccurrence, DbType.Decimal, 0, 19);
        	
            sp.Command.AddParameter("@EventCode", EventCode, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@EventDetailCode", EventDetailCode, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Message", Message, DbType.String, null, null);
        	
            sp.Command.AddParameter("@ApplicationPath", ApplicationPath, DbType.String, null, null);
        	
            sp.Command.AddParameter("@ApplicationVirtualPath", ApplicationVirtualPath, DbType.String, null, null);
        	
            sp.Command.AddParameter("@MachineName", MachineName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@RequestUrl", RequestUrl, DbType.String, null, null);
        	
            sp.Command.AddParameter("@ExceptionType", ExceptionType, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Details", Details, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Delete_Admins Procedure
        /// </summary>
        public static StoredProcedure DeleteAdmins(long? FBid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Delete_Admins", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@FBid", FBid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Delete_FB_Users_Resource Procedure
        /// </summary>
        public static StoredProcedure DeleteFbUsersResource(long? FBid, int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Delete_FB_Users_Resource", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@FBid", FBid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Delete_Groups Procedure
        /// </summary>
        public static StoredProcedure DeleteGroups(int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Delete_Groups", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Delete_Question Procedure
        /// </summary>
        public static StoredProcedure DeleteQuestion(int? QuestionKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Delete_Question", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Question_Key", QuestionKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Delete_Question_EventKey Procedure
        /// </summary>
        public static StoredProcedure DeleteQuestionEventKey(int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Delete_Question_EventKey", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Delete_Questions_DropDowns Procedure
        /// </summary>
        public static StoredProcedure DeleteQuestionsDropDowns(int? QuestionKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Delete_Questions_DropDowns", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Question_Key", QuestionKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Delete_Resource_Reading_Others Procedure
        /// </summary>
        public static StoredProcedure DeleteResourceReadingOthers(int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Delete_Resource_Reading_Others", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Delete_Ticket Procedure
        /// </summary>
        public static StoredProcedure DeleteTicket(int? TicketKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Delete_Ticket", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Ticket_Key", TicketKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Delete_Ticket_EventKey Procedure
        /// </summary>
        public static StoredProcedure DeleteTicketEventKey(int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Delete_Ticket_EventKey", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Delete_Ticket_Sellers_EventKey Procedure
        /// </summary>
        public static StoredProcedure DeleteTicketSellersEventKey(int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Delete_Ticket_Sellers_EventKey", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Delete_Ticket_Sellers_TicketKey Procedure
        /// </summary>
        public static StoredProcedure DeleteTicketSellersTicketKey(int? TicketKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Delete_Ticket_Sellers_TicketKey", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Ticket_Key", TicketKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the pf_Check_Referrals Procedure
        /// </summary>
        public static StoredProcedure PfCheckReferrals(long? FBid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("pf_Check_Referrals", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@FBid", FBid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the pf_Remove_FBUsers_Sellers Procedure
        /// </summary>
        public static StoredProcedure PfRemoveFBUsersSellers(long? fbid, int? resourcekey, bool? isadmin)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("pf_Remove_FBUsers_Sellers", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@resource_key", resourcekey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@isadmin", isadmin, DbType.Boolean, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the pf_Update_Didforward Procedure
        /// </summary>
        public static StoredProcedure PfUpdateDidforward(int? txkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("pf_Update_Didforward", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@tx_key", txkey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the pf_Update_FBUsers_Sellers Procedure
        /// </summary>
        public static StoredProcedure PfUpdateFBUsersSellers(long? fbid, int? resourcekey, string smsnumber, bool? addadmin)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("pf_Update_FBUsers_Sellers", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@resource_key", resourcekey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@smsnumber", smsnumber, DbType.String, null, null);
        	
            sp.Command.AddParameter("@addadmin", addadmin, DbType.Boolean, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the pf_Update_Referral Procedure
        /// </summary>
        public static StoredProcedure PfUpdateReferral(long? fbid, bool? addadmin, string smsnumber, int? resourcekey, int? PFReferralReturn)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("pf_Update_Referral", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@addadmin", addadmin, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@smsnumber", smsnumber, DbType.String, null, null);
        	
            sp.Command.AddParameter("@resource_key", resourcekey, DbType.Int32, 0, 10);
        	
            sp.Command.AddOutputParameter("@PF_Referral_Return", DbType.Int32, 0, 10);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the pf_Update_Referral2 Procedure
        /// </summary>
        public static StoredProcedure PfUpdateReferral2(long? fbid, int? resourcekey, string email)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("pf_Update_Referral2", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@resource_key", resourcekey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@email", email, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the pf_Update_Resource_Profile Procedure
        /// </summary>
        public static StoredProcedure PfUpdateResourceProfile(int? ResourceKey, bool? DoDirectPayment)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("pf_Update_Resource_Profile", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@DoDirectPayment", DoDirectPayment, DbType.Boolean, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the pf_View_admin_engagedmerchantcount Procedure
        /// </summary>
        public static StoredProcedure PfViewAdminEngagedmerchantcount(int? PFReferralKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("pf_View_admin_engagedmerchantcount", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@PF_Referral_Key", PFReferralKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the pf_View_admin_merchantcount Procedure
        /// </summary>
        public static StoredProcedure PfViewAdminMerchantcount(int? PFReferralKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("pf_View_admin_merchantcount", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@PF_Referral_Key", PFReferralKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the pf_View_Didforward Procedure
        /// </summary>
        public static StoredProcedure PfViewDidforward(int? txkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("pf_View_Didforward", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@tx_key", txkey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the pf_View_List_FBUser_Admin Procedure
        /// </summary>
        public static StoredProcedure PfViewListFBUserAdmin(long? FBid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("pf_View_List_FBUser_Admin", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@FBid", FBid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the pf_View_List_FBUser_Admin_Sellers Procedure
        /// </summary>
        public static StoredProcedure PfViewListFBUserAdminSellers(long? FBid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("pf_View_List_FBUser_Admin_Sellers", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@FBid", FBid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the pf_View_List_FBUser_Admin_Sellers_username Procedure
        /// </summary>
        public static StoredProcedure PfViewListFBUserAdminSellersUsername(string Email)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("pf_View_List_FBUser_Admin_Sellers_username", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Email", Email, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the PF_View_List_MenuMerchant Procedure
        /// </summary>
        public static StoredProcedure PfViewListMenuMerchant(int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("PF_View_List_MenuMerchant", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the PF_View_List_StoreSellers Procedure
        /// </summary>
        public static StoredProcedure PfViewListStoreSellers(int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("PF_View_List_StoreSellers", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the pf_View_Referral Procedure
        /// </summary>
        public static StoredProcedure PfViewReferral(int? PFReferralKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("pf_View_Referral", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@PF_Referral_Key", PFReferralKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the pf_View_Transaction_Details_fbid Procedure
        /// </summary>
        public static StoredProcedure PfViewTransactionDetailsFbid(long? fbid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("pf_View_Transaction_Details_fbid", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the pf_View_Transaction_Details_fbid_pasthour Procedure
        /// </summary>
        public static StoredProcedure PfViewTransactionDetailsFbidPasthour(long? fbid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("pf_View_Transaction_Details_fbid_pasthour", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the pf_View_Transaction_Details_resourcekey Procedure
        /// </summary>
        public static StoredProcedure PfViewTransactionDetailsResourcekey(int? resourcekey, int? reporttype, long? fbid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("pf_View_Transaction_Details_resourcekey", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@resource_key", resourcekey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@reporttype", reporttype, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the pf_View_Transaction_Details_resourcekey_Iphone Procedure
        /// </summary>
        public static StoredProcedure PfViewTransactionDetailsResourcekeyIphone(int? resourcekey, int? reporttype, long? fbid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("pf_View_Transaction_Details_resourcekey_Iphone", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@resource_key", resourcekey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@reporttype", reporttype, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the pf_View_Transaction_Details_txkey Procedure
        /// </summary>
        public static StoredProcedure PfViewTransactionDetailsTxkey(int? txkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("pf_View_Transaction_Details_txkey", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@txkey", txkey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the pf_View_txsum Procedure
        /// </summary>
        public static StoredProcedure PfViewTxsum(int? PFReferralKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("pf_View_txsum", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@PF_Referral_Key", PFReferralKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Activity Procedure
        /// </summary>
        public static StoredProcedure UpdateActivity(int? ResourceKey, long? fbid, int? Activity, long? fbidadded, int? eventkey, int? txoutkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Activity", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@Activity", Activity, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@fbid_added", fbidadded, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@event_key", eventkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@tx_out_key", txoutkey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Admin_Events Procedure
        /// </summary>
        public static StoredProcedure UpdateAdminEvents(decimal? ServiceFeePercentage, decimal? ServiceFeeCents, decimal? ServiceFeeMax, int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Admin_Events", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Service_Fee_Percentage", ServiceFeePercentage, DbType.Currency, 4, 19);
        	
            sp.Command.AddParameter("@Service_Fee_Cents", ServiceFeeCents, DbType.Currency, 4, 19);
        	
            sp.Command.AddParameter("@Service_Fee_Max", ServiceFeeMax, DbType.Currency, 4, 19);
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Admin_ServiceFee Procedure
        /// </summary>
        public static StoredProcedure UpdateAdminServiceFee(decimal? ServiceFeePercentage, decimal? ServiceFeeCents, decimal? ServiceFeeMax, int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Admin_ServiceFee", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Service_Fee_Percentage", ServiceFeePercentage, DbType.Currency, 4, 19);
        	
            sp.Command.AddParameter("@Service_Fee_Cents", ServiceFeeCents, DbType.Currency, 4, 19);
        	
            sp.Command.AddParameter("@Service_Fee_Max", ServiceFeeMax, DbType.Currency, 4, 19);
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Admins Procedure
        /// </summary>
        public static StoredProcedure UpdateAdmins(long? FBid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Admins", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@FBid", FBid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Billing_Agreement Procedure
        /// </summary>
        public static StoredProcedure UpdateBillingAgreement(int? ResourceKey, string ECKey, bool? Status, string ReferenceTransaction, int? Action, string MerchantEmail)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Billing_Agreement", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@EC_Key", ECKey, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Status", Status, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@Reference_Transaction", ReferenceTransaction, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Action", Action, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Merchant_Email", MerchantEmail, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Billing_Payment Procedure
        /// </summary>
        public static StoredProcedure UpdateBillingPayment(int? TxKey, decimal? Amount, int? BillingType, string CorrelationID, string txnid, int? BillingAgreementKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Billing_Payment", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Amount", Amount, DbType.Currency, 4, 19);
        	
            sp.Command.AddParameter("@Billing_Type", BillingType, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Correlation_ID", CorrelationID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@txn_id", txnid, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Billing_Agreement_Key", BillingAgreementKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_CCErrors Procedure
        /// </summary>
        public static StoredProcedure UpdateCCErrors(string ErrorX, int? TxKey, int? CCMass, string Amount)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_CCErrors", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Error", ErrorX, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@CC_Mass", CCMass, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Amount", Amount, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_CCErrors2 Procedure
        /// </summary>
        public static StoredProcedure UpdateCCErrors2(string ErrorX, int? TxKey, int? CCMass, string Amount, string CorrelationID, string ErrorCode)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_CCErrors2", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Error", ErrorX, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@CC_Mass", CCMass, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Amount", Amount, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Correlation_ID", CorrelationID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Error_Code", ErrorCode, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_CustomMessage Procedure
        /// </summary>
        public static StoredProcedure UpdateCustomMessage(int? EventKey, long? fbid, string CustomMessage)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_CustomMessage", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@CustomMessage", CustomMessage, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Emails_Sent Procedure
        /// </summary>
        public static StoredProcedure UpdateEmailsSent(long? fbid, string emailtype, string emailaddress)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Emails_Sent", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@email_type", emailtype, DbType.String, null, null);
        	
            sp.Command.AddParameter("@email_address", emailaddress, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Event Procedure
        /// </summary>
        public static StoredProcedure UpdateEvent(int? EventKey, string EventName, string Host, DateTime? EventBegins, DateTime? EventEnds, string Location, string Street, string City, string Phone, string Email, string AdditionalComments, bool? DisplayTicketsAvailable, string Confirmation, int? ResourceKey, string eid, int? EventKeyReturn, int? TicketMax, decimal? Timezone, int? TicketNum, bool? Donation, int? EventType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Event", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Event_Name", EventName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Host", Host, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Event_Begins", EventBegins, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@Event_Ends", EventEnds, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@Location", Location, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Street", Street, DbType.String, null, null);
        	
            sp.Command.AddParameter("@City", City, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Phone", Phone, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Email", Email, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Additional_Comments", AdditionalComments, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Display_Tickets_Available", DisplayTicketsAvailable, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@Confirmation", Confirmation, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@eid", eid, DbType.AnsiString, null, null);
        	
            sp.Command.AddOutputParameter("@Event_Key_Return", DbType.Int32, 0, 10);
            
            sp.Command.AddParameter("@Ticket_Max", TicketMax, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Timezone", Timezone, DbType.Decimal, 0, 18);
        	
            sp.Command.AddParameter("@TicketNum", TicketNum, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Donation", Donation, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@Event_Type", EventType, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Event_BkImgUrl Procedure
        /// </summary>
        public static StoredProcedure UpdateEventBkImgUrl(int? EventKey, string BkImgUrl)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Event_BkImgUrl", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@BkImgUrl", BkImgUrl, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Event_ForTicket Procedure
        /// </summary>
        public static StoredProcedure UpdateEventForTicket(int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Event_ForTicket", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Event_Remove Procedure
        /// </summary>
        public static StoredProcedure UpdateEventRemove(int? EventKey, bool? Visible)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Event_Remove", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Visible", Visible, DbType.Boolean, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Event_Views Procedure
        /// </summary>
        public static StoredProcedure UpdateEventViews(int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Event_Views", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_FB_Users_DemoTicket Procedure
        /// </summary>
        public static StoredProcedure UpdateFbUsersDemoTicket(long? fbid, int? resourcekey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_FB_Users_DemoTicket", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@resource_key", resourcekey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_FB_Users_Names Procedure
        /// </summary>
        public static StoredProcedure UpdateFbUsersNames(long? FBid, string FirstName, string LastName)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_FB_Users_Names", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@FBid", FBid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@First_Name", FirstName, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Last_Name", LastName, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_FB_Users_Password Procedure
        /// </summary>
        public static StoredProcedure UpdateFbUsersPassword(long? FBid, string pwd)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_FB_Users_Password", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@FBid", FBid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@pwd", pwd, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_FB_Users_Resource Procedure
        /// </summary>
        public static StoredProcedure UpdateFbUsersResource(long? FBid, int? ResourceKey, string FirstName, string LastName)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_FB_Users_Resource", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@FBid", FBid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@First_Name", FirstName, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Last_Name", LastName, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_fbPages Procedure
        /// </summary>
        public static StoredProcedure UpdateFbPages(long? FBid, long? pageid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_fbPages", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@FBid", FBid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@page_id", pageid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_GoalAmount Procedure
        /// </summary>
        public static StoredProcedure UpdateGoalAmount(int? EventKey, long? fbid, decimal? Amount)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_GoalAmount", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@Amount", Amount, DbType.Currency, 4, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_GotTicket Procedure
        /// </summary>
        public static StoredProcedure UpdateGotTicket(int? TxKey, long? fbid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_GotTicket", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_GPS Procedure
        /// </summary>
        public static StoredProcedure UpdateGps(int? txkey, string lat, string longX)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_GPS", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@txkey", txkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@lat", lat, DbType.String, null, null);
        	
            sp.Command.AddParameter("@long", longX, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Groups Procedure
        /// </summary>
        public static StoredProcedure UpdateGroups(long? FBid, int? ResourceKey, string GroupName, decimal? DefaultSFP, decimal? DefaultSFC, decimal? DefaultSFM, int? ResourceKeyReturn)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Groups", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@FBid", FBid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Group_Name", GroupName, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Default_SFP", DefaultSFP, DbType.Currency, 4, 19);
        	
            sp.Command.AddParameter("@Default_SFC", DefaultSFC, DbType.Currency, 4, 19);
        	
            sp.Command.AddParameter("@Default_SFM", DefaultSFM, DbType.Currency, 4, 19);
        	
            sp.Command.AddOutputParameter("@Resource_Key_Return", DbType.Int32, 0, 10);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Log_Post_Authorize_Remove Procedure
        /// </summary>
        public static StoredProcedure UpdateLogPostAuthorizeRemove(long? FBid, bool? AuthorizeRemove, string SignatureLinked, string Signature)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Log_Post_Authorize_Remove", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@FBid", FBid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@Authorize_Remove", AuthorizeRemove, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@Signature_Linked", SignatureLinked, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Signature", Signature, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_PayForward_Tx_Setup Procedure
        /// </summary>
        public static StoredProcedure UpdatePayForwardTxSetup(string Note, decimal? Amount, string Currency, int? ResourceKey, long? fbid, int? TxKeyReturn, string IPAddress)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_PayForward_Tx_Setup", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Note", Note, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Amount", Amount, DbType.Currency, 4, 19);
        	
            sp.Command.AddParameter("@Currency", Currency, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            sp.Command.AddOutputParameter("@Tx_Key_Return", DbType.Int32, 0, 10);
            
            sp.Command.AddParameter("@IP_Address", IPAddress, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Paypal_Confirmation Procedure
        /// </summary>
        public static StoredProcedure UpdatePaypalConfirmation(string PaypalEmail, int? type, decimal? AmountSent)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Paypal_Confirmation", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Paypal_Email", PaypalEmail, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@type", type, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Amount_Sent", AmountSent, DbType.Currency, 4, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_PayPal_DemoPay Procedure
        /// </summary>
        public static StoredProcedure UpdatePayPalDemoPay(string PayPalEmail, decimal? AmountSent)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_PayPal_DemoPay", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@PayPal_Email", PayPalEmail, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Amount_Sent", AmountSent, DbType.Currency, 4, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_PayPal_Info Procedure
        /// </summary>
        public static StoredProcedure UpdatePayPalInfo(int? ResourceKey, string Email, bool? Verified, string FirstName, string LastName, string Country, string Payerid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_PayPal_Info", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Email", Email, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Verified", Verified, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@First_Name", FirstName, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Last_Name", LastName, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Country", Country, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Payerid", Payerid, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_PayPal_Info_Verified Procedure
        /// </summary>
        public static StoredProcedure UpdatePayPalInfoVerified(int? ResourceKey, bool? Verified)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_PayPal_Info_Verified", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Verified", Verified, DbType.Boolean, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Question Procedure
        /// </summary>
        public static StoredProcedure UpdateQuestion(int? QuestionKey, int? EventKey, string TheQuestion, bool? Mandatory, int? QuestionType, int? QuestionKeyReturn)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Question", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Question_Key", QuestionKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@The_Question", TheQuestion, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Mandatory", Mandatory, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@Question_Type", QuestionType, DbType.Int32, 0, 10);
        	
            sp.Command.AddOutputParameter("@Question_Key_Return", DbType.Int32, 0, 10);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Questions_Answered Procedure
        /// </summary>
        public static StoredProcedure UpdateQuestionsAnswered(int? TxKey, int? QuestionKey, int? EventKey, string TheAnswer, int? TixPurchasedKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Questions_Answered", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Question_Key", QuestionKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@The_Answer", TheAnswer, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Tix_Purchased_Key", TixPurchasedKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Questions_DropDowns Procedure
        /// </summary>
        public static StoredProcedure UpdateQuestionsDropDowns(int? QuestionKey, string QuestionDD)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Questions_DropDowns", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Question_Key", QuestionKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Question_DD", QuestionDD, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Referral_Email Procedure
        /// </summary>
        public static StoredProcedure UpdateReferralEmail(long? FBid, string EmailPaypal)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Referral_Email", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@FBid", FBid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@Email_Paypal", EmailPaypal, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Resource Procedure
        /// </summary>
        public static StoredProcedure UpdateResource(long? FBid, string FirstName, string LastName, string Email, string IPAddress, string Pagename, int? ResourceKey, int? EventKey, string SessionKey, string AccessToken, long? Referral)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Resource", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@FBid", FBid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@First_Name", FirstName, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Last_Name", LastName, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Email", Email, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@IP_Address", IPAddress, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Pagename", Pagename, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Session_Key", SessionKey, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Access_Token", AccessToken, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Referral", Referral, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Resource_Currency Procedure
        /// </summary>
        public static StoredProcedure UpdateResourceCurrency(int? ResourceKey, string DesiredCurrency)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Resource_Currency", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Desired_Currency", DesiredCurrency, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Resource_DoDirectPayment Procedure
        /// </summary>
        public static StoredProcedure UpdateResourceDoDirectPayment(int? ResourceKey, bool? dodirectpayment)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Resource_DoDirectPayment", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@dodirectpayment", dodirectpayment, DbType.Boolean, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Resource_NavigateURL Procedure
        /// </summary>
        public static StoredProcedure UpdateResourceNavigateURL(long? FBid, bool? NavigateURL)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Resource_NavigateURL", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@FBid", FBid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@NavigateURL", NavigateURL, DbType.Boolean, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Resource_Network Procedure
        /// </summary>
        public static StoredProcedure UpdateResourceNetwork(int? ResourceKey, int? NetworkKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Resource_Network", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Network_Key", NetworkKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Resource_Perm_AccessToken Procedure
        /// </summary>
        public static StoredProcedure UpdateResourcePermAccessToken(int? ResourceKey, string PermAccessToken, string PermAccessTokenSecret)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Resource_Perm_AccessToken", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Perm_Access_Token", PermAccessToken, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Perm_Access_Token_Secret", PermAccessTokenSecret, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Resource_Perm_Token Procedure
        /// </summary>
        public static StoredProcedure UpdateResourcePermToken(int? ResourceKey, string PermRequestToken)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Resource_Perm_Token", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Perm_Request_Token", PermRequestToken, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Resource_Perm_VCode Procedure
        /// </summary>
        public static StoredProcedure UpdateResourcePermVCode(int? ResourceKey, string PermVerificationCode)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Resource_Perm_VCode", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Perm_Verification_Code", PermVerificationCode, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Resource_pfFirsttime_emailpwd Procedure
        /// </summary>
        public static StoredProcedure UpdateResourcePfFirsttimeEmailpwd(string Email, string IPAddress, string pwd)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Resource_pfFirsttime_emailpwd", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Email", Email, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@IP_Address", IPAddress, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@pwd", pwd, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Resource_pfFirstTime_Settings Procedure
        /// </summary>
        public static StoredProcedure UpdateResourcePfFirstTimeSettings(int? ResourceKey, string DesiredCurrency, string BusinessName, string pfConfirmation)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Resource_pfFirstTime_Settings", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Desired_Currency", DesiredCurrency, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Business_Name", BusinessName, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@pfConfirmation", pfConfirmation, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Resource_PostResourcekey Procedure
        /// </summary>
        public static StoredProcedure UpdateResourcePostResourcekey(long? FBid, int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Resource_PostResourcekey", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@FBid", FBid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Resource_Profile Procedure
        /// </summary>
        public static StoredProcedure UpdateResourceProfile(int? ResourceKey, string DesiredCurrency, string EmailPaypal, bool? Demo, int? PayMethod)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Resource_Profile", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Desired_Currency", DesiredCurrency, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Email_Paypal", EmailPaypal, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Demo", Demo, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@Pay_Method", PayMethod, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Resource_Reading_Others Procedure
        /// </summary>
        public static StoredProcedure UpdateResourceReadingOthers(int? ResourceKey, int? ResourceKeyReading, long? fbid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Resource_Reading_Others", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Resource_Key_Reading", ResourceKeyReading, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Resource_Showifnew Procedure
        /// </summary>
        public static StoredProcedure UpdateResourceShowifnew(long? FBid, string FirstName, string LastName, string Email, string IPAddress, string Pagename, int? ResourceKey, int? EventKey, string SessionKey, string AccessToken, long? Referral, bool? IsNewReturn)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Resource_Showifnew", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@FBid", FBid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@First_Name", FirstName, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Last_Name", LastName, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Email", Email, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@IP_Address", IPAddress, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Pagename", Pagename, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Session_Key", SessionKey, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Access_Token", AccessToken, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Referral", Referral, DbType.Int64, 0, 19);
        	
            sp.Command.AddOutputParameter("@IsNew_Return", DbType.Boolean, null, null);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_ShowGoals Procedure
        /// </summary>
        public static StoredProcedure UpdateShowGoals(int? EventKey, long? fbid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_ShowGoals", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Store Procedure
        /// </summary>
        public static StoredProcedure UpdateStore(int? ResourceKey, string Title, string Description, string Contact)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Store", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Title", Title, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Description", Description, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Contact", Contact, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Test Procedure
        /// </summary>
        public static StoredProcedure UpdateTest(string TestText)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Test", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Test_Text", TestText, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Ticket Procedure
        /// </summary>
        public static StoredProcedure UpdateTicket(int? TicketKey, int? EventKey, string TicketDescription, decimal? Price, int? Capacity, DateTime? BeginSelling, DateTime? SellingDeadline, int? TicketKeyReturn, bool? IsDonation)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Ticket", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Ticket_Key", TicketKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Ticket_Description", TicketDescription, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Price", Price, DbType.Currency, 4, 19);
        	
            sp.Command.AddParameter("@Capacity", Capacity, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Begin_Selling", BeginSelling, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@Selling_Deadline", SellingDeadline, DbType.DateTime, null, null);
        	
            sp.Command.AddOutputParameter("@Ticket_Key_Return", DbType.Int32, 0, 10);
            
            sp.Command.AddParameter("@IsDonation", IsDonation, DbType.Boolean, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Ticket_NumFreeEvents Procedure
        /// </summary>
        public static StoredProcedure UpdateTicketNumFreeEvents(int? TxKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Ticket_NumFreeEvents", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Ticket_Sellers Procedure
        /// </summary>
        public static StoredProcedure UpdateTicketSellers(long? fbid, string FullName, string AccessToken, string email)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Ticket_Sellers", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@Full_Name", FullName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Access_Token", AccessToken, DbType.String, null, null);
        	
            sp.Command.AddParameter("@email", email, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Ticket_Sellers_SpecificFundraiser Procedure
        /// </summary>
        public static StoredProcedure UpdateTicketSellersSpecificFundraiser(long? fbid, string fbappid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Ticket_Sellers_SpecificFundraiser", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@fbappid", fbappid, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Ticket_Sellers_StreamStories Procedure
        /// </summary>
        public static StoredProcedure UpdateTicketSellersStreamStories(long? fbid, bool? StreamStories)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Ticket_Sellers_StreamStories", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@StreamStories", StreamStories, DbType.Boolean, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Tickets_ClearDemo Procedure
        /// </summary>
        public static StoredProcedure UpdateTicketsClearDemo(int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Tickets_ClearDemo", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Tickets_Purchased Procedure
        /// </summary>
        public static StoredProcedure UpdateTicketsPurchased(int? TxKey, int? TicketKey, int? Quantity, decimal? donationamount, int? TxKeyReturn, string FirstName, string LastName)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Tickets_Purchased", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Ticket_Key", TicketKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Quantity", Quantity, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@donationamount", donationamount, DbType.Currency, 4, 19);
        	
            sp.Command.AddOutputParameter("@Tx_Key_Return", DbType.Int32, 0, 10);
            
            sp.Command.AddParameter("@First_Name", FirstName, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Last_Name", LastName, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Tickets_Purchased_Calendar Procedure
        /// </summary>
        public static StoredProcedure UpdateTicketsPurchasedCalendar(int? TxKey, int? TicketKey, int? Quantity, decimal? donationamount, DateTime? StartDate, DateTime? EndDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Tickets_Purchased_Calendar", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Ticket_Key", TicketKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Quantity", Quantity, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@donationamount", donationamount, DbType.Currency, 4, 19);
        	
            sp.Command.AddParameter("@Start_Date", StartDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@End_Date", EndDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Tickets_Purchased_Demo Procedure
        /// </summary>
        public static StoredProcedure UpdateTicketsPurchasedDemo(int? TxKey, int? TicketKey, int? Quantity, decimal? donationamount, int? TxKeyReturn, string FirstName, string LastName)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Tickets_Purchased_Demo", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Ticket_Key", TicketKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Quantity", Quantity, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@donationamount", donationamount, DbType.Currency, 4, 19);
        	
            sp.Command.AddOutputParameter("@Tx_Key_Return", DbType.Int32, 0, 10);
            
            sp.Command.AddParameter("@First_Name", FirstName, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Last_Name", LastName, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Transaction Procedure
        /// </summary>
        public static StoredProcedure UpdateTransaction(int? TxKey, int? EventKey, string ItemDescription, decimal? Amount, string Currency, int? TxKeyReturn, string FirstName, string LastName, string EmailBuyer, string EmailSeller, int? TxStatus, string txnid, string payerid, decimal? tax, string paymentstatus, string payerstatus, string businessemail, string payeremail, string paymenttype, string mccurrency, string TransactionLog, string GuestListFirstName, string GuestListLastName, decimal? ServiceFee, string IPAddress)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Transaction", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Item_Description", ItemDescription, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Amount", Amount, DbType.Currency, 4, 19);
        	
            sp.Command.AddParameter("@Currency", Currency, DbType.String, null, null);
        	
            sp.Command.AddOutputParameter("@Tx_Key_Return", DbType.Int32, 0, 10);
            
            sp.Command.AddParameter("@First_Name", FirstName, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Last_Name", LastName, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Email_Buyer", EmailBuyer, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Email_Seller", EmailSeller, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Tx_Status", TxStatus, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@txn_id", txnid, DbType.String, null, null);
        	
            sp.Command.AddParameter("@payer_id", payerid, DbType.String, null, null);
        	
            sp.Command.AddParameter("@tax", tax, DbType.Currency, 4, 19);
        	
            sp.Command.AddParameter("@payment_status", paymentstatus, DbType.String, null, null);
        	
            sp.Command.AddParameter("@payer_status", payerstatus, DbType.String, null, null);
        	
            sp.Command.AddParameter("@business_email", businessemail, DbType.String, null, null);
        	
            sp.Command.AddParameter("@payer_email", payeremail, DbType.String, null, null);
        	
            sp.Command.AddParameter("@payment_type", paymenttype, DbType.String, null, null);
        	
            sp.Command.AddParameter("@mc_currency", mccurrency, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Transaction_Log", TransactionLog, DbType.String, null, null);
        	
            sp.Command.AddParameter("@GuestList_First_Name", GuestListFirstName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@GuestList_Last_Name", GuestListLastName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Service_Fee", ServiceFee, DbType.Currency, 4, 19);
        	
            sp.Command.AddParameter("@IP_Address", IPAddress, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Transaction_AlreadyCart Procedure
        /// </summary>
        public static StoredProcedure UpdateTransactionAlreadyCart(int? TxKey, decimal? Amount, decimal? ServiceFee)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Transaction_AlreadyCart", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Amount", Amount, DbType.Currency, 4, 19);
        	
            sp.Command.AddParameter("@Service_Fee", ServiceFee, DbType.Currency, 4, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Transaction_CartRemoveTicket Procedure
        /// </summary>
        public static StoredProcedure UpdateTransactionCartRemoveTicket(int? TxKey, int? TicketsPurchasedKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Transaction_CartRemoveTicket", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Tickets_Purchased_Key", TicketsPurchasedKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Transaction_currency Procedure
        /// </summary>
        public static StoredProcedure UpdateTransactionCurrency(int? TxKey, string Currency)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Transaction_currency", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Currency", Currency, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Transaction_DemoPay Procedure
        /// </summary>
        public static StoredProcedure UpdateTransactionDemoPay(int? TxKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Transaction_DemoPay", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Transaction_DemoPay_Payeremail Procedure
        /// </summary>
        public static StoredProcedure UpdateTransactionDemoPayPayeremail(int? TxKey, string payeremail)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Transaction_DemoPay_Payeremail", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@payer_email", payeremail, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Transaction_DirectPayments Procedure
        /// </summary>
        public static StoredProcedure UpdateTransactionDirectPayments(int? TxKey, string Email, string FirstName, string LastName, string txnid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Transaction_DirectPayments", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Email", Email, DbType.String, null, null);
        	
            sp.Command.AddParameter("@FirstName", FirstName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@LastName", LastName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@txnid", txnid, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Transaction_Errors Procedure
        /// </summary>
        public static StoredProcedure UpdateTransactionErrors(string TxErrorsText)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Transaction_Errors", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Errors_Text", TxErrorsText, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Transaction_ExpressCheckoutEmail Procedure
        /// </summary>
        public static StoredProcedure UpdateTransactionExpressCheckoutEmail(int? TxKey, string Email, string FirstName, string LastName)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Transaction_ExpressCheckoutEmail", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Email", Email, DbType.String, null, null);
        	
            sp.Command.AddParameter("@FirstName", FirstName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@LastName", LastName, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Transaction_fbids Procedure
        /// </summary>
        public static StoredProcedure UpdateTransactionFbids(long? fbidseller, long? fbidbuyer, int? TxKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Transaction_fbids", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@fbid_seller", fbidseller, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@fbid_buyer", fbidbuyer, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Transaction_fbSeller Procedure
        /// </summary>
        public static StoredProcedure UpdateTransactionFbSeller(int? TxKey, long? fbseller)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Transaction_fbSeller", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@fbseller", fbseller, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Transaction_Out Procedure
        /// </summary>
        public static StoredProcedure UpdateTransactionOut(decimal? Amount, string EmailRecipient, int? ResourceKey, int? EventKey, decimal? PaypalFee, string Currency, long? FBid, int? Type, int? TxoutKeyReturn)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Transaction_Out", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Amount", Amount, DbType.Currency, 4, 19);
        	
            sp.Command.AddParameter("@Email_Recipient", EmailRecipient, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Paypal_Fee", PaypalFee, DbType.Currency, 4, 19);
        	
            sp.Command.AddParameter("@Currency", Currency, DbType.String, null, null);
        	
            sp.Command.AddParameter("@FBid", FBid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@Type", Type, DbType.Int32, 0, 10);
        	
            sp.Command.AddOutputParameter("@Tx_out_Key_Return", DbType.Int32, 0, 10);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Transaction_Out_Txkey Procedure
        /// </summary>
        public static StoredProcedure UpdateTransactionOutTxkey(int? TxKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Transaction_Out_Txkey", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Transaction_SMSNumber Procedure
        /// </summary>
        public static StoredProcedure UpdateTransactionSMSNumber(int? txkey, string smsnumber)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Transaction_SMSNumber", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@tx_key", txkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@smsnumber", smsnumber, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Transaction_ticket_amount_email Procedure
        /// </summary>
        public static StoredProcedure UpdateTransactionTicketAmountEmail(int? txKey, string ticketamountemail)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Transaction_ticket_amount_email", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@tx_Key", txKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ticket_amount_email", ticketamountemail, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Transaction_Token Procedure
        /// </summary>
        public static StoredProcedure UpdateTransactionToken(int? txKey, string token)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Transaction_Token", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@tx_Key", txKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@token", token, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Transaction_txnid Procedure
        /// </summary>
        public static StoredProcedure UpdateTransactionTxnid(int? txKey, string txnid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Transaction_txnid", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@tx_Key", txKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@txnid", txnid, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Transaction_Update_Fee_Profit Procedure
        /// </summary>
        public static StoredProcedure UpdateTransactionUpdateFeeProfit(int? TxKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Transaction_Update_Fee_Profit", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Accepted_Money Procedure
        /// </summary>
        public static StoredProcedure ViewAcceptedMoney(int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Accepted_Money", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Activities Procedure
        /// </summary>
        public static StoredProcedure ViewActivities(int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Activities", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Admin_Events Procedure
        /// </summary>
        public static StoredProcedure ViewAdminEvents(int? Test)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Admin_Events", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Test", Test, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Admin_Events_Removed Procedure
        /// </summary>
        public static StoredProcedure ViewAdminEventsRemoved(int? Test)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Admin_Events_Removed", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Test", Test, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Admin_ServiceFee Procedure
        /// </summary>
        public static StoredProcedure ViewAdminServiceFee(int? Test)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Admin_ServiceFee", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Test", Test, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Admin_Stores_Snappay Procedure
        /// </summary>
        public static StoredProcedure ViewAdminStoresSnappay(int? Test)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Admin_Stores_Snappay", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Test", Test, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Admin_Transactions_Snappay Procedure
        /// </summary>
        public static StoredProcedure ViewAdminTransactionsSnappay(int? test)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Admin_Transactions_Snappay", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@test", test, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Admin_Users Procedure
        /// </summary>
        public static StoredProcedure ViewAdminUsers(int? Test)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Admin_Users", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Test", Test, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Admin_Users_Snappay Procedure
        /// </summary>
        public static StoredProcedure ViewAdminUsersSnappay(int? Test)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Admin_Users_Snappay", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Test", Test, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Admins Procedure
        /// </summary>
        public static StoredProcedure ViewAdmins(int? Search)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Admins", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Search", Search, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Attendee_List Procedure
        /// </summary>
        public static StoredProcedure ViewAttendeeList(int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Attendee_List", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Attendee_List_CountDemotix Procedure
        /// </summary>
        public static StoredProcedure ViewAttendeeListCountDemotix(int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Attendee_List_CountDemotix", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Attendee_List_Sellers Procedure
        /// </summary>
        public static StoredProcedure ViewAttendeeListSellers(int? EventKey, long? fbid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Attendee_List_Sellers", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Attendee_List_Summary Procedure
        /// </summary>
        public static StoredProcedure ViewAttendeeListSummary(int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Attendee_List_Summary", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Attendee_List_Summary_Sellers Procedure
        /// </summary>
        public static StoredProcedure ViewAttendeeListSummarySellers(int? EventKey, long? fbid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Attendee_List_Summary_Sellers", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Attendee_List_Transactions Procedure
        /// </summary>
        public static StoredProcedure ViewAttendeeListTransactions(int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Attendee_List_Transactions", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Attendee_List_Transactions_Sellers Procedure
        /// </summary>
        public static StoredProcedure ViewAttendeeListTransactionsSellers(int? EventKey, long? fbid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Attendee_List_Transactions_Sellers", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Attendee_List_Transactions_TxKey Procedure
        /// </summary>
        public static StoredProcedure ViewAttendeeListTransactionsTxKey(int? txKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Attendee_List_Transactions_TxKey", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@tx_Key", txKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Attendee_List_TxKey Procedure
        /// </summary>
        public static StoredProcedure ViewAttendeeListTxKey(int? txKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Attendee_List_TxKey", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@tx_Key", txKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Billing_Agreement_Active_Resource_Key Procedure
        /// </summary>
        public static StoredProcedure ViewBillingAgreementActiveResourceKey(int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Billing_Agreement_Active_Resource_Key", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Billing_Agreement_EC Procedure
        /// </summary>
        public static StoredProcedure ViewBillingAgreementEc(string ECKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Billing_Agreement_EC", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@EC_Key", ECKey, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Billing_Agreement_Resource_Key Procedure
        /// </summary>
        public static StoredProcedure ViewBillingAgreementResourceKey(int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Billing_Agreement_Resource_Key", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Calendar Procedure
        /// </summary>
        public static StoredProcedure ViewCalendar(int? ResourceKey, int? Type)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Calendar", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Type", Type, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Cart_Tickets Procedure
        /// </summary>
        public static StoredProcedure ViewCartTickets(int? TxKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Cart_Tickets", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Email_Receipt Procedure
        /// </summary>
        public static StoredProcedure ViewEmailReceipt(int? TxKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Email_Receipt", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Emails_Sent Procedure
        /// </summary>
        public static StoredProcedure ViewEmailsSent(long? FBid, string emailtype)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Emails_Sent", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@FBid", FBid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@email_type", emailtype, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Errors Procedure
        /// </summary>
        public static StoredProcedure ViewErrors(int? Test)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Errors", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Test", Test, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Errors_Lastone Procedure
        /// </summary>
        public static StoredProcedure ViewErrorsLastone(int? Test)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Errors_Lastone", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Test", Test, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Event_BkImgUrl Procedure
        /// </summary>
        public static StoredProcedure ViewEventBkImgUrl(int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Event_BkImgUrl", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Event_Details Procedure
        /// </summary>
        public static StoredProcedure ViewEventDetails(int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Event_Details", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Event_PaidOut_Currency Procedure
        /// </summary>
        public static StoredProcedure ViewEventPaidOutCurrency(int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Event_PaidOut_Currency", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Event_Revenue_Currency Procedure
        /// </summary>
        public static StoredProcedure ViewEventRevenueCurrency(int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Event_Revenue_Currency", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_EventNewsfeed Procedure
        /// </summary>
        public static StoredProcedure ViewEventNewsfeed(int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_EventNewsfeed", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Events_Fundraiser_PDF Procedure
        /// </summary>
        public static StoredProcedure ViewEventsFundraiserPdf(int? TxKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Events_Fundraiser_PDF", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_FB_Users Procedure
        /// </summary>
        public static StoredProcedure ViewFbUsers(long? fbid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_FB_Users", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_FB_Users_Log Procedure
        /// </summary>
        public static StoredProcedure ViewFbUsersLog(long? fbid, string page)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_FB_Users_Log", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@page", page, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_FBUser_Email Procedure
        /// </summary>
        public static StoredProcedure ViewFBUserEmail(string Email)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_FBUser_Email", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Email", Email, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_HasPaypalEmail Procedure
        /// </summary>
        public static StoredProcedure ViewHasPaypalEmail(int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_HasPaypalEmail", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_HasPaypalEmail_ResourceKey Procedure
        /// </summary>
        public static StoredProcedure ViewHasPaypalEmailResourceKey(int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_HasPaypalEmail_ResourceKey", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_IfAdmin Procedure
        /// </summary>
        public static StoredProcedure ViewIfAdmin(long? FBid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_IfAdmin", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@FBid", FBid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_IfInGroup Procedure
        /// </summary>
        public static StoredProcedure ViewIfInGroup(long? FBid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_IfInGroup", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@FBid", FBid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_IfTriedDemo Procedure
        /// </summary>
        public static StoredProcedure ViewIfTriedDemo(long? FBid, int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_IfTriedDemo", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@FBid", FBid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_InfoCountry Procedure
        /// </summary>
        public static StoredProcedure ViewInfoCountry(int? test)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_InfoCountry", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@test", test, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_InfoMerchants Procedure
        /// </summary>
        public static StoredProcedure ViewInfoMerchants(int? Category)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_InfoMerchants", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Category", Category, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_InfoRegion Procedure
        /// </summary>
        public static StoredProcedure ViewInfoRegion(int? CountryKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_InfoRegion", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Country_Key", CountryKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_InfoTimezones Procedure
        /// </summary>
        public static StoredProcedure ViewInfoTimezones(int? TimezonesKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_InfoTimezones", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Timezones_Key", TimezonesKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_IsFundraiser Procedure
        /// </summary>
        public static StoredProcedure ViewIsFundraiser(int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_IsFundraiser", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_IsPayForward Procedure
        /// </summary>
        public static StoredProcedure ViewIsPayForward(int? TxKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_IsPayForward", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_IsProductEvent Procedure
        /// </summary>
        public static StoredProcedure ViewIsProductEvent(int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_IsProductEvent", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_IsProducttxkey Procedure
        /// </summary>
        public static StoredProcedure ViewIsProducttxkey(int? TxKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_IsProducttxkey", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_IsStoreAdmin Procedure
        /// </summary>
        public static StoredProcedure ViewIsStoreAdmin(long? FBid, int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_IsStoreAdmin", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@FBid", FBid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_LeaderBoard Procedure
        /// </summary>
        public static StoredProcedure ViewLeaderBoard(int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_LeaderBoard", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_List_All_Events_Profile Procedure
        /// </summary>
        public static StoredProcedure ViewListAllEventsProfile(int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_List_All_Events_Profile", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_List_All_Events_Referral Procedure
        /// </summary>
        public static StoredProcedure ViewListAllEventsReferral(long? fbid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_List_All_Events_Referral", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_List_Current_Events Procedure
        /// </summary>
        public static StoredProcedure ViewListCurrentEvents(int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_List_Current_Events", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_List_Current_Events_Promoting Procedure
        /// </summary>
        public static StoredProcedure ViewListCurrentEventsPromoting(int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_List_Current_Events_Promoting", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_List_FBUser_Resources Procedure
        /// </summary>
        public static StoredProcedure ViewListFBUserResources(long? FBid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_List_FBUser_Resources", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@FBid", FBid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_List_Group_Members Procedure
        /// </summary>
        public static StoredProcedure ViewListGroupMembers(int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_List_Group_Members", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_List_Previous_Events Procedure
        /// </summary>
        public static StoredProcedure ViewListPreviousEvents(int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_List_Previous_Events", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_List_Resources_All Procedure
        /// </summary>
        public static StoredProcedure ViewListResourcesAll(int? NothingX)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_List_Resources_All", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Nothing", NothingX, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_List_Store_Sellers_Current Procedure
        /// </summary>
        public static StoredProcedure ViewListStoreSellersCurrent(long? fbid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_List_Store_Sellers_Current", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_List_Store_Sellers_Previous Procedure
        /// </summary>
        public static StoredProcedure ViewListStoreSellersPrevious(long? fbid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_List_Store_Sellers_Previous", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_LiveorTrial Procedure
        /// </summary>
        public static StoredProcedure ViewLiveorTrial()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_LiveorTrial", DataService.GetInstance("Eventomatic"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_PayCC Procedure
        /// </summary>
        public static StoredProcedure ViewPayCC(int? TxKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_PayCC", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_PayForward_Details Procedure
        /// </summary>
        public static StoredProcedure ViewPayForwardDetails(int? TxKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_PayForward_Details", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Paypal_Confirmation Procedure
        /// </summary>
        public static StoredProcedure ViewPaypalConfirmation(string EmailAddress)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Paypal_Confirmation", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Email_Address", EmailAddress, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_PayPal_DemoPay Procedure
        /// </summary>
        public static StoredProcedure ViewPayPalDemoPay(string PayPalEmail)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_PayPal_DemoPay", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@PayPal_Email", PayPalEmail, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Paypal_Email Procedure
        /// </summary>
        public static StoredProcedure ViewPaypalEmail(int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Paypal_Email", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_PayPal_Info Procedure
        /// </summary>
        public static StoredProcedure ViewPayPalInfo(int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_PayPal_Info", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Question Procedure
        /// </summary>
        public static StoredProcedure ViewQuestion(int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Question", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Question_DropDown Procedure
        /// </summary>
        public static StoredProcedure ViewQuestionDropDown(int? QuestionKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Question_DropDown", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Question_Key", QuestionKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Question_FreeTickets Procedure
        /// </summary>
        public static StoredProcedure ViewQuestionFreeTickets(int? QuestionKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Question_FreeTickets", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Question_Key", QuestionKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Question_Specific Procedure
        /// </summary>
        public static StoredProcedure ViewQuestionSpecific(int? QuestionKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Question_Specific", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Question_Key", QuestionKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Questions_Answered Procedure
        /// </summary>
        public static StoredProcedure ViewQuestionsAnswered(int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Questions_Answered", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Questions_Answered_Sellers Procedure
        /// </summary>
        public static StoredProcedure ViewQuestionsAnsweredSellers(int? EventKey, long? fbid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Questions_Answered_Sellers", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Referral_Amount_Owed Procedure
        /// </summary>
        public static StoredProcedure ViewReferralAmountOwed(long? FBid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Referral_Amount_Owed", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@FBid", FBid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Reporting_AdminChart Procedure
        /// </summary>
        public static StoredProcedure ViewReportingAdminChart(DateTime? BeginDate, DateTime? EndDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Reporting_AdminChart", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Begin_Date", BeginDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@End_Date", EndDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Reporting_AdminEvents Procedure
        /// </summary>
        public static StoredProcedure ViewReportingAdminEvents(DateTime? BeginDate, DateTime? EndDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Reporting_AdminEvents", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Begin_Date", BeginDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@End_Date", EndDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Reporting_AdminOverall Procedure
        /// </summary>
        public static StoredProcedure ViewReportingAdminOverall(DateTime? BeginDate, DateTime? EndDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Reporting_AdminOverall", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Begin_Date", BeginDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@End_Date", EndDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Reporting_HostChart Procedure
        /// </summary>
        public static StoredProcedure ViewReportingHostChart(int? ResourceKey, DateTime? BeginDate, DateTime? EndDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Reporting_HostChart", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Begin_Date", BeginDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@End_Date", EndDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Reporting_HostEvents Procedure
        /// </summary>
        public static StoredProcedure ViewReportingHostEvents(int? ResourceKey, DateTime? BeginDate, DateTime? EndDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Reporting_HostEvents", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Begin_Date", BeginDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@End_Date", EndDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Reporting_HostStats Procedure
        /// </summary>
        public static StoredProcedure ViewReportingHostStats(int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Reporting_HostStats", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Reporting_HostTicketByUser Procedure
        /// </summary>
        public static StoredProcedure ViewReportingHostTicketByUser(int? ResourceKey, DateTime? BeginDate, DateTime? EndDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Reporting_HostTicketByUser", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Begin_Date", BeginDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@End_Date", EndDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Resource Procedure
        /// </summary>
        public static StoredProcedure ViewResource(int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Resource", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Resource_All Procedure
        /// </summary>
        public static StoredProcedure ViewResourceAll(int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Resource_All", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Resource_Amount_Owed Procedure
        /// </summary>
        public static StoredProcedure ViewResourceAmountOwed(int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Resource_Amount_Owed", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Resource_Error404 Procedure
        /// </summary>
        public static StoredProcedure ViewResourceError404(string GroupName)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Resource_Error404", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Group_Name", GroupName, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Resource_FromEventKey Procedure
        /// </summary>
        public static StoredProcedure ViewResourceFromEventKey(int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Resource_FromEventKey", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Resource_FromTxKey Procedure
        /// </summary>
        public static StoredProcedure ViewResourceFromTxKey(int? TxKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Resource_FromTxKey", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Resource_NetRevenue_Currency Procedure
        /// </summary>
        public static StoredProcedure ViewResourceNetRevenueCurrency(int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Resource_NetRevenue_Currency", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Resource_NetRevenue_Paidout_Currency Procedure
        /// </summary>
        public static StoredProcedure ViewResourceNetRevenuePaidoutCurrency(int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Resource_NetRevenue_Paidout_Currency", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Resource_Network Procedure
        /// </summary>
        public static StoredProcedure ViewResourceNetwork(int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Resource_Network", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Sellers_EventKey Procedure
        /// </summary>
        public static StoredProcedure ViewSellersEventKey(int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Sellers_EventKey", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Service_Fee Procedure
        /// </summary>
        public static StoredProcedure ViewServiceFee(int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Service_Fee", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Service_Fee_ResourceKey Procedure
        /// </summary>
        public static StoredProcedure ViewServiceFeeResourceKey(int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Service_Fee_ResourceKey", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_ShowGoals Procedure
        /// </summary>
        public static StoredProcedure ViewShowGoals(int? EventKey, long? fbid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_ShowGoals", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Store Procedure
        /// </summary>
        public static StoredProcedure ViewStore(int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Store", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Store_Info Procedure
        /// </summary>
        public static StoredProcedure ViewStoreInfo(int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Store_Info", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Store_Sellers Procedure
        /// </summary>
        public static StoredProcedure ViewStoreSellers(long? pageid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Store_Sellers", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@page_id", pageid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Store_Sellers_EventKey Procedure
        /// </summary>
        public static StoredProcedure ViewStoreSellersEventKey(long? fbid, int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Store_Sellers_EventKey", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Store_Ticket_Sellers Procedure
        /// </summary>
        public static StoredProcedure ViewStoreTicketSellers(int? EventKey, long? fbid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Store_Ticket_Sellers", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Store_Tickets_Soldout_Sellers Procedure
        /// </summary>
        public static StoredProcedure ViewStoreTicketsSoldoutSellers(int? EventKey, long? fbid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Store_Tickets_Soldout_Sellers", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Store_WithSelectedGroups Procedure
        /// </summary>
        public static StoredProcedure ViewStoreWithSelectedGroups(int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Store_WithSelectedGroups", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Stores_Currently_Displaying Procedure
        /// </summary>
        public static StoredProcedure ViewStoresCurrentlyDisplaying(int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Stores_Currently_Displaying", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Stores_In_Network Procedure
        /// </summary>
        public static StoredProcedure ViewStoresInNetwork(int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Stores_In_Network", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Ticket Procedure
        /// </summary>
        public static StoredProcedure ViewTicket(int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Ticket", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Ticket_All Procedure
        /// </summary>
        public static StoredProcedure ViewTicketAll(int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Ticket_All", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Ticket_ByUser Procedure
        /// </summary>
        public static StoredProcedure ViewTicketByUser(int? ResourceKey, int? CurrentPrevious)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Ticket_ByUser", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Current_Previous", CurrentPrevious, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Ticket_Demo Procedure
        /// </summary>
        public static StoredProcedure ViewTicketDemo(int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Ticket_Demo", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Ticket_ForEmail Procedure
        /// </summary>
        public static StoredProcedure ViewTicketForEmail(int? TxKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Ticket_ForEmail", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Ticket_Lesson_Length Procedure
        /// </summary>
        public static StoredProcedure ViewTicketLessonLength(int? EventKey, int? LessonLength)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Ticket_Lesson_Length", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Lesson_Length", LessonLength, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Ticket_ProductAvailability Procedure
        /// </summary>
        public static StoredProcedure ViewTicketProductAvailability(int? EventKey, DateTime? StartDate, DateTime? EndDate, int? Amount)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Ticket_ProductAvailability", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Start_Date", StartDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@End_Date", EndDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@Amount", Amount, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Ticket_ProductAvailability_Lessons Procedure
        /// </summary>
        public static StoredProcedure ViewTicketProductAvailabilityLessons(int? EventKey, DateTime? StartDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Ticket_ProductAvailability_Lessons", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Start_Date", StartDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Ticket_Sellers Procedure
        /// </summary>
        public static StoredProcedure ViewTicketSellers(int? EventKey, int? TicketKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Ticket_Sellers", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Ticket_Key", TicketKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Ticket_Sellers_fbid Procedure
        /// </summary>
        public static StoredProcedure ViewTicketSellersFbid(long? fbid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Ticket_Sellers_fbid", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Ticket_Sellers_txkey Procedure
        /// </summary>
        public static StoredProcedure ViewTicketSellersTxkey(int? txKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Ticket_Sellers_txkey", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@tx_Key", txKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Ticket_Specific Procedure
        /// </summary>
        public static StoredProcedure ViewTicketSpecific(string TicketDescription, int? EventKey, decimal? Price)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Ticket_Specific", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Ticket_Description", TicketDescription, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Price", Price, DbType.Currency, 4, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Ticket_Specific2 Procedure
        /// </summary>
        public static StoredProcedure ViewTicketSpecific2(int? Ticketkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Ticket_Specific2", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Ticket_key", Ticketkey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Tickets_Soldout Procedure
        /// </summary>
        public static StoredProcedure ViewTicketsSoldout(int? EventKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Tickets_Soldout", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Event_Key", EventKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_TicketSpecific_Soldout Procedure
        /// </summary>
        public static StoredProcedure ViewTicketSpecificSoldout(int? TicketKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_TicketSpecific_Soldout", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Ticket_Key", TicketKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_TicketSpecificIPNing_Soldout Procedure
        /// </summary>
        public static StoredProcedure ViewTicketSpecificIPNingSoldout(int? Txkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_TicketSpecificIPNing_Soldout", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_key", Txkey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Transaction_Details Procedure
        /// </summary>
        public static StoredProcedure ViewTransactionDetails(int? TxKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Transaction_Details", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Transaction_Details_fbid Procedure
        /// </summary>
        public static StoredProcedure ViewTransactionDetailsFbid(long? fbid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Transaction_Details_fbid", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@fbid", fbid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Transaction_Details_Txnid Procedure
        /// </summary>
        public static StoredProcedure ViewTransactionDetailsTxnid(int? TxKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Transaction_Details_Txnid", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Transaction_Isdemo Procedure
        /// </summary>
        public static StoredProcedure ViewTransactionIsdemo(int? TxKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Transaction_Isdemo", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Transaction_Out_Details Procedure
        /// </summary>
        public static StoredProcedure ViewTransactionOutDetails(int? ResourceKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Transaction_Out_Details", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Resource_Key", ResourceKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Transaction_Out_Details_Referral Procedure
        /// </summary>
        public static StoredProcedure ViewTransactionOutDetailsReferral(long? FBid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Transaction_Out_Details_Referral", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@FBid", FBid, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Transaction_SellerEmail Procedure
        /// </summary>
        public static StoredProcedure ViewTransactionSellerEmail(int? TxKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Transaction_SellerEmail", DataService.GetInstance("Eventomatic"), "dbo");
        	
            sp.Command.AddParameter("@Tx_Key", TxKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
    }
    
}
