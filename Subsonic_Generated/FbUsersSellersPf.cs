using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Eventomatic_DB
{
	/// <summary>
	/// Strongly-typed collection for the FbUsersSellersPf class.
	/// </summary>
    [Serializable]
	public partial class FbUsersSellersPfCollection : ActiveList<FbUsersSellersPf, FbUsersSellersPfCollection>
	{	   
		public FbUsersSellersPfCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>FbUsersSellersPfCollection</returns>
		public FbUsersSellersPfCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                FbUsersSellersPf o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the FB_Users_Sellers_PF table.
	/// </summary>
	[Serializable]
	public partial class FbUsersSellersPf : ActiveRecord<FbUsersSellersPf>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public FbUsersSellersPf()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public FbUsersSellersPf(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public FbUsersSellersPf(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public FbUsersSellersPf(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("FB_Users_Sellers_PF", TableType.Table, DataService.GetInstance("Eventomatic"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarFbUsersSellersPfKey = new TableSchema.TableColumn(schema);
				colvarFbUsersSellersPfKey.ColumnName = "FB_Users_Sellers_PF_Key";
				colvarFbUsersSellersPfKey.DataType = DbType.Int32;
				colvarFbUsersSellersPfKey.MaxLength = 0;
				colvarFbUsersSellersPfKey.AutoIncrement = true;
				colvarFbUsersSellersPfKey.IsNullable = false;
				colvarFbUsersSellersPfKey.IsPrimaryKey = true;
				colvarFbUsersSellersPfKey.IsForeignKey = false;
				colvarFbUsersSellersPfKey.IsReadOnly = false;
				colvarFbUsersSellersPfKey.DefaultSetting = @"";
				colvarFbUsersSellersPfKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFbUsersSellersPfKey);
				
				TableSchema.TableColumn colvarFBid = new TableSchema.TableColumn(schema);
				colvarFBid.ColumnName = "FBid";
				colvarFBid.DataType = DbType.Int64;
				colvarFBid.MaxLength = 0;
				colvarFBid.AutoIncrement = false;
				colvarFBid.IsNullable = false;
				colvarFBid.IsPrimaryKey = false;
				colvarFBid.IsForeignKey = false;
				colvarFBid.IsReadOnly = false;
				colvarFBid.DefaultSetting = @"";
				colvarFBid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFBid);
				
				TableSchema.TableColumn colvarResourceKey = new TableSchema.TableColumn(schema);
				colvarResourceKey.ColumnName = "Resource_Key";
				colvarResourceKey.DataType = DbType.Int32;
				colvarResourceKey.MaxLength = 0;
				colvarResourceKey.AutoIncrement = false;
				colvarResourceKey.IsNullable = false;
				colvarResourceKey.IsPrimaryKey = false;
				colvarResourceKey.IsForeignKey = false;
				colvarResourceKey.IsReadOnly = false;
				colvarResourceKey.DefaultSetting = @"";
				colvarResourceKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarResourceKey);
				
				TableSchema.TableColumn colvarSmsNumber = new TableSchema.TableColumn(schema);
				colvarSmsNumber.ColumnName = "Sms_Number";
				colvarSmsNumber.DataType = DbType.String;
				colvarSmsNumber.MaxLength = 20;
				colvarSmsNumber.AutoIncrement = false;
				colvarSmsNumber.IsNullable = true;
				colvarSmsNumber.IsPrimaryKey = false;
				colvarSmsNumber.IsForeignKey = false;
				colvarSmsNumber.IsReadOnly = false;
				colvarSmsNumber.DefaultSetting = @"";
				colvarSmsNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSmsNumber);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Eventomatic"].AddSchema("FB_Users_Sellers_PF",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("FbUsersSellersPfKey")]
		[Bindable(true)]
		public int FbUsersSellersPfKey 
		{
			get { return GetColumnValue<int>(Columns.FbUsersSellersPfKey); }
			set { SetColumnValue(Columns.FbUsersSellersPfKey, value); }
		}
		  
		[XmlAttribute("FBid")]
		[Bindable(true)]
		public long FBid 
		{
			get { return GetColumnValue<long>(Columns.FBid); }
			set { SetColumnValue(Columns.FBid, value); }
		}
		  
		[XmlAttribute("ResourceKey")]
		[Bindable(true)]
		public int ResourceKey 
		{
			get { return GetColumnValue<int>(Columns.ResourceKey); }
			set { SetColumnValue(Columns.ResourceKey, value); }
		}
		  
		[XmlAttribute("SmsNumber")]
		[Bindable(true)]
		public string SmsNumber 
		{
			get { return GetColumnValue<string>(Columns.SmsNumber); }
			set { SetColumnValue(Columns.SmsNumber, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(long varFBid,int varResourceKey,string varSmsNumber)
		{
			FbUsersSellersPf item = new FbUsersSellersPf();
			
			item.FBid = varFBid;
			
			item.ResourceKey = varResourceKey;
			
			item.SmsNumber = varSmsNumber;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varFbUsersSellersPfKey,long varFBid,int varResourceKey,string varSmsNumber)
		{
			FbUsersSellersPf item = new FbUsersSellersPf();
			
				item.FbUsersSellersPfKey = varFbUsersSellersPfKey;
			
				item.FBid = varFBid;
			
				item.ResourceKey = varResourceKey;
			
				item.SmsNumber = varSmsNumber;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn FbUsersSellersPfKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn FBidColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ResourceKeyColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SmsNumberColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string FbUsersSellersPfKey = @"FB_Users_Sellers_PF_Key";
			 public static string FBid = @"FBid";
			 public static string ResourceKey = @"Resource_Key";
			 public static string SmsNumber = @"Sms_Number";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
