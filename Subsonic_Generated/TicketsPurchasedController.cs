using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Eventomatic_DB
{
    /// <summary>
    /// Controller class for Tickets_Purchased
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TicketsPurchasedController
    {
        // Preload our schema..
        TicketsPurchased thisSchemaLoad = new TicketsPurchased();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TicketsPurchasedCollection FetchAll()
        {
            TicketsPurchasedCollection coll = new TicketsPurchasedCollection();
            Query qry = new Query(TicketsPurchased.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TicketsPurchasedCollection FetchByID(object TicketsPurchasedKey)
        {
            TicketsPurchasedCollection coll = new TicketsPurchasedCollection().Where("Tickets_Purchased_Key", TicketsPurchasedKey).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TicketsPurchasedCollection FetchByQuery(Query qry)
        {
            TicketsPurchasedCollection coll = new TicketsPurchasedCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object TicketsPurchasedKey)
        {
            return (TicketsPurchased.Delete(TicketsPurchasedKey) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object TicketsPurchasedKey)
        {
            return (TicketsPurchased.Destroy(TicketsPurchasedKey) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(int TxKey,int TicketKey,int Quantity,int? TicketNum,long? GotTickets,decimal? DonationAmount,DateTime? StartDate,DateTime? EndDate,string FirstName,string LastName,DateTime? LastModified,bool? Visible)
	    {
		    TicketsPurchased item = new TicketsPurchased();
		    
            item.TxKey = TxKey;
            
            item.TicketKey = TicketKey;
            
            item.Quantity = Quantity;
            
            item.TicketNum = TicketNum;
            
            item.GotTickets = GotTickets;
            
            item.DonationAmount = DonationAmount;
            
            item.StartDate = StartDate;
            
            item.EndDate = EndDate;
            
            item.FirstName = FirstName;
            
            item.LastName = LastName;
            
            item.LastModified = LastModified;
            
            item.Visible = Visible;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int TicketsPurchasedKey,int TxKey,int TicketKey,int Quantity,int? TicketNum,long? GotTickets,decimal? DonationAmount,DateTime? StartDate,DateTime? EndDate,string FirstName,string LastName,DateTime? LastModified,bool? Visible)
	    {
		    TicketsPurchased item = new TicketsPurchased();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.TicketsPurchasedKey = TicketsPurchasedKey;
				
			item.TxKey = TxKey;
				
			item.TicketKey = TicketKey;
				
			item.Quantity = Quantity;
				
			item.TicketNum = TicketNum;
				
			item.GotTickets = GotTickets;
				
			item.DonationAmount = DonationAmount;
				
			item.StartDate = StartDate;
				
			item.EndDate = EndDate;
				
			item.FirstName = FirstName;
				
			item.LastName = LastName;
				
			item.LastModified = LastModified;
				
			item.Visible = Visible;
				
	        item.Save(UserName);
	    }
    }
}
