using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Eventomatic_DB
{
    /// <summary>
    /// Controller class for Events
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class EventXController
    {
        // Preload our schema..
        EventX thisSchemaLoad = new EventX();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public EventXCollection FetchAll()
        {
            EventXCollection coll = new EventXCollection();
            Query qry = new Query(EventX.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public EventXCollection FetchByID(object EventKey)
        {
            EventXCollection coll = new EventXCollection().Where("Event_Key", EventKey).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public EventXCollection FetchByQuery(Query qry)
        {
            EventXCollection coll = new EventXCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object EventKey)
        {
            return (EventX.Delete(EventKey) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object EventKey)
        {
            return (EventX.Destroy(EventKey) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(string EventName,string Host,DateTime? EventBegins,DateTime? EventEnds,string Location,string Street,string City,string Phone,string Email,string AdditionalComments,string ImageUrl,bool? DisplayTicketsAvailable,string Confirmation,int? ResourceKey,string Eid,DateTime? BeginSelling,DateTime? SellingDeadline,DateTime? LastModified,decimal? ServiceFeePercentage,decimal? ServiceFeeCents,decimal? ServiceFeeMax,int? TicketMax,bool? Visible,string BkImgUrl,decimal? Timezone,int TicketNum,bool? Donation,int? Views,bool? IsFundraiser,bool? IsHideFee,int? EventType,string LeaderPrize)
	    {
		    EventX item = new EventX();
		    
            item.EventName = EventName;
            
            item.Host = Host;
            
            item.EventBegins = EventBegins;
            
            item.EventEnds = EventEnds;
            
            item.Location = Location;
            
            item.Street = Street;
            
            item.City = City;
            
            item.Phone = Phone;
            
            item.Email = Email;
            
            item.AdditionalComments = AdditionalComments;
            
            item.ImageUrl = ImageUrl;
            
            item.DisplayTicketsAvailable = DisplayTicketsAvailable;
            
            item.Confirmation = Confirmation;
            
            item.ResourceKey = ResourceKey;
            
            item.Eid = Eid;
            
            item.BeginSelling = BeginSelling;
            
            item.SellingDeadline = SellingDeadline;
            
            item.LastModified = LastModified;
            
            item.ServiceFeePercentage = ServiceFeePercentage;
            
            item.ServiceFeeCents = ServiceFeeCents;
            
            item.ServiceFeeMax = ServiceFeeMax;
            
            item.TicketMax = TicketMax;
            
            item.Visible = Visible;
            
            item.BkImgUrl = BkImgUrl;
            
            item.Timezone = Timezone;
            
            item.TicketNum = TicketNum;
            
            item.Donation = Donation;
            
            item.Views = Views;
            
            item.IsFundraiser = IsFundraiser;
            
            item.IsHideFee = IsHideFee;
            
            item.EventType = EventType;
            
            item.LeaderPrize = LeaderPrize;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int EventKey,string EventName,string Host,DateTime? EventBegins,DateTime? EventEnds,string Location,string Street,string City,string Phone,string Email,string AdditionalComments,string ImageUrl,bool? DisplayTicketsAvailable,string Confirmation,int? ResourceKey,string Eid,DateTime? BeginSelling,DateTime? SellingDeadline,DateTime? LastModified,decimal? ServiceFeePercentage,decimal? ServiceFeeCents,decimal? ServiceFeeMax,int? TicketMax,bool? Visible,string BkImgUrl,decimal? Timezone,int TicketNum,bool? Donation,int? Views,bool? IsFundraiser,bool? IsHideFee,int? EventType,string LeaderPrize)
	    {
		    EventX item = new EventX();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.EventKey = EventKey;
				
			item.EventName = EventName;
				
			item.Host = Host;
				
			item.EventBegins = EventBegins;
				
			item.EventEnds = EventEnds;
				
			item.Location = Location;
				
			item.Street = Street;
				
			item.City = City;
				
			item.Phone = Phone;
				
			item.Email = Email;
				
			item.AdditionalComments = AdditionalComments;
				
			item.ImageUrl = ImageUrl;
				
			item.DisplayTicketsAvailable = DisplayTicketsAvailable;
				
			item.Confirmation = Confirmation;
				
			item.ResourceKey = ResourceKey;
				
			item.Eid = Eid;
				
			item.BeginSelling = BeginSelling;
				
			item.SellingDeadline = SellingDeadline;
				
			item.LastModified = LastModified;
				
			item.ServiceFeePercentage = ServiceFeePercentage;
				
			item.ServiceFeeCents = ServiceFeeCents;
				
			item.ServiceFeeMax = ServiceFeeMax;
				
			item.TicketMax = TicketMax;
				
			item.Visible = Visible;
				
			item.BkImgUrl = BkImgUrl;
				
			item.Timezone = Timezone;
				
			item.TicketNum = TicketNum;
				
			item.Donation = Donation;
				
			item.Views = Views;
				
			item.IsFundraiser = IsFundraiser;
				
			item.IsHideFee = IsHideFee;
				
			item.EventType = EventType;
				
			item.LeaderPrize = LeaderPrize;
				
	        item.Save(UserName);
	    }
    }
}
