using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Eventomatic_DB
{
	/// <summary>
	/// Strongly-typed collection for the LogPostAuthorizeRemove class.
	/// </summary>
    [Serializable]
	public partial class LogPostAuthorizeRemoveCollection : ActiveList<LogPostAuthorizeRemove, LogPostAuthorizeRemoveCollection>
	{	   
		public LogPostAuthorizeRemoveCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LogPostAuthorizeRemoveCollection</returns>
		public LogPostAuthorizeRemoveCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LogPostAuthorizeRemove o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Log_Post_Authorize_Remove table.
	/// </summary>
	[Serializable]
	public partial class LogPostAuthorizeRemove : ActiveRecord<LogPostAuthorizeRemove>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LogPostAuthorizeRemove()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LogPostAuthorizeRemove(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LogPostAuthorizeRemove(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LogPostAuthorizeRemove(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Log_Post_Authorize_Remove", TableType.Table, DataService.GetInstance("Eventomatic"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarLogPostAuthorizeRemoveKey = new TableSchema.TableColumn(schema);
				colvarLogPostAuthorizeRemoveKey.ColumnName = "Log_Post_Authorize_Remove_Key";
				colvarLogPostAuthorizeRemoveKey.DataType = DbType.Int32;
				colvarLogPostAuthorizeRemoveKey.MaxLength = 0;
				colvarLogPostAuthorizeRemoveKey.AutoIncrement = true;
				colvarLogPostAuthorizeRemoveKey.IsNullable = false;
				colvarLogPostAuthorizeRemoveKey.IsPrimaryKey = true;
				colvarLogPostAuthorizeRemoveKey.IsForeignKey = false;
				colvarLogPostAuthorizeRemoveKey.IsReadOnly = false;
				colvarLogPostAuthorizeRemoveKey.DefaultSetting = @"";
				colvarLogPostAuthorizeRemoveKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLogPostAuthorizeRemoveKey);
				
				TableSchema.TableColumn colvarAuthorizeRemove = new TableSchema.TableColumn(schema);
				colvarAuthorizeRemove.ColumnName = "Authorize_Remove";
				colvarAuthorizeRemove.DataType = DbType.Boolean;
				colvarAuthorizeRemove.MaxLength = 0;
				colvarAuthorizeRemove.AutoIncrement = false;
				colvarAuthorizeRemove.IsNullable = false;
				colvarAuthorizeRemove.IsPrimaryKey = false;
				colvarAuthorizeRemove.IsForeignKey = false;
				colvarAuthorizeRemove.IsReadOnly = false;
				colvarAuthorizeRemove.DefaultSetting = @"";
				colvarAuthorizeRemove.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAuthorizeRemove);
				
				TableSchema.TableColumn colvarSignatureLinked = new TableSchema.TableColumn(schema);
				colvarSignatureLinked.ColumnName = "Signature_Linked";
				colvarSignatureLinked.DataType = DbType.String;
				colvarSignatureLinked.MaxLength = 200;
				colvarSignatureLinked.AutoIncrement = false;
				colvarSignatureLinked.IsNullable = true;
				colvarSignatureLinked.IsPrimaryKey = false;
				colvarSignatureLinked.IsForeignKey = false;
				colvarSignatureLinked.IsReadOnly = false;
				colvarSignatureLinked.DefaultSetting = @"";
				colvarSignatureLinked.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSignatureLinked);
				
				TableSchema.TableColumn colvarSignature = new TableSchema.TableColumn(schema);
				colvarSignature.ColumnName = "Signature";
				colvarSignature.DataType = DbType.String;
				colvarSignature.MaxLength = 200;
				colvarSignature.AutoIncrement = false;
				colvarSignature.IsNullable = true;
				colvarSignature.IsPrimaryKey = false;
				colvarSignature.IsForeignKey = false;
				colvarSignature.IsReadOnly = false;
				colvarSignature.DefaultSetting = @"";
				colvarSignature.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSignature);
				
				TableSchema.TableColumn colvarFBid = new TableSchema.TableColumn(schema);
				colvarFBid.ColumnName = "FBid";
				colvarFBid.DataType = DbType.Int64;
				colvarFBid.MaxLength = 0;
				colvarFBid.AutoIncrement = false;
				colvarFBid.IsNullable = true;
				colvarFBid.IsPrimaryKey = false;
				colvarFBid.IsForeignKey = false;
				colvarFBid.IsReadOnly = false;
				colvarFBid.DefaultSetting = @"";
				colvarFBid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFBid);
				
				TableSchema.TableColumn colvarLastChange = new TableSchema.TableColumn(schema);
				colvarLastChange.ColumnName = "Last_Change";
				colvarLastChange.DataType = DbType.DateTime;
				colvarLastChange.MaxLength = 0;
				colvarLastChange.AutoIncrement = false;
				colvarLastChange.IsNullable = true;
				colvarLastChange.IsPrimaryKey = false;
				colvarLastChange.IsForeignKey = false;
				colvarLastChange.IsReadOnly = false;
				colvarLastChange.DefaultSetting = @"";
				colvarLastChange.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastChange);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Eventomatic"].AddSchema("Log_Post_Authorize_Remove",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("LogPostAuthorizeRemoveKey")]
		[Bindable(true)]
		public int LogPostAuthorizeRemoveKey 
		{
			get { return GetColumnValue<int>(Columns.LogPostAuthorizeRemoveKey); }
			set { SetColumnValue(Columns.LogPostAuthorizeRemoveKey, value); }
		}
		  
		[XmlAttribute("AuthorizeRemove")]
		[Bindable(true)]
		public bool AuthorizeRemove 
		{
			get { return GetColumnValue<bool>(Columns.AuthorizeRemove); }
			set { SetColumnValue(Columns.AuthorizeRemove, value); }
		}
		  
		[XmlAttribute("SignatureLinked")]
		[Bindable(true)]
		public string SignatureLinked 
		{
			get { return GetColumnValue<string>(Columns.SignatureLinked); }
			set { SetColumnValue(Columns.SignatureLinked, value); }
		}
		  
		[XmlAttribute("Signature")]
		[Bindable(true)]
		public string Signature 
		{
			get { return GetColumnValue<string>(Columns.Signature); }
			set { SetColumnValue(Columns.Signature, value); }
		}
		  
		[XmlAttribute("FBid")]
		[Bindable(true)]
		public long? FBid 
		{
			get { return GetColumnValue<long?>(Columns.FBid); }
			set { SetColumnValue(Columns.FBid, value); }
		}
		  
		[XmlAttribute("LastChange")]
		[Bindable(true)]
		public DateTime? LastChange 
		{
			get { return GetColumnValue<DateTime?>(Columns.LastChange); }
			set { SetColumnValue(Columns.LastChange, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(bool varAuthorizeRemove,string varSignatureLinked,string varSignature,long? varFBid,DateTime? varLastChange)
		{
			LogPostAuthorizeRemove item = new LogPostAuthorizeRemove();
			
			item.AuthorizeRemove = varAuthorizeRemove;
			
			item.SignatureLinked = varSignatureLinked;
			
			item.Signature = varSignature;
			
			item.FBid = varFBid;
			
			item.LastChange = varLastChange;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varLogPostAuthorizeRemoveKey,bool varAuthorizeRemove,string varSignatureLinked,string varSignature,long? varFBid,DateTime? varLastChange)
		{
			LogPostAuthorizeRemove item = new LogPostAuthorizeRemove();
			
				item.LogPostAuthorizeRemoveKey = varLogPostAuthorizeRemoveKey;
			
				item.AuthorizeRemove = varAuthorizeRemove;
			
				item.SignatureLinked = varSignatureLinked;
			
				item.Signature = varSignature;
			
				item.FBid = varFBid;
			
				item.LastChange = varLastChange;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn LogPostAuthorizeRemoveKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn AuthorizeRemoveColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn SignatureLinkedColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SignatureColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn FBidColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn LastChangeColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string LogPostAuthorizeRemoveKey = @"Log_Post_Authorize_Remove_Key";
			 public static string AuthorizeRemove = @"Authorize_Remove";
			 public static string SignatureLinked = @"Signature_Linked";
			 public static string Signature = @"Signature";
			 public static string FBid = @"FBid";
			 public static string LastChange = @"Last_Change";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
