using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Eventomatic_DB
{
	/// <summary>
	/// Strongly-typed collection for the Question class.
	/// </summary>
    [Serializable]
	public partial class QuestionCollection : ActiveList<Question, QuestionCollection>
	{	   
		public QuestionCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>QuestionCollection</returns>
		public QuestionCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Question o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Question table.
	/// </summary>
	[Serializable]
	public partial class Question : ActiveRecord<Question>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Question()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Question(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Question(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Question(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Question", TableType.Table, DataService.GetInstance("Eventomatic"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarQuestionKey = new TableSchema.TableColumn(schema);
				colvarQuestionKey.ColumnName = "Question_Key";
				colvarQuestionKey.DataType = DbType.Int32;
				colvarQuestionKey.MaxLength = 0;
				colvarQuestionKey.AutoIncrement = true;
				colvarQuestionKey.IsNullable = false;
				colvarQuestionKey.IsPrimaryKey = true;
				colvarQuestionKey.IsForeignKey = false;
				colvarQuestionKey.IsReadOnly = false;
				colvarQuestionKey.DefaultSetting = @"";
				colvarQuestionKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuestionKey);
				
				TableSchema.TableColumn colvarEventKey = new TableSchema.TableColumn(schema);
				colvarEventKey.ColumnName = "Event_Key";
				colvarEventKey.DataType = DbType.Int32;
				colvarEventKey.MaxLength = 0;
				colvarEventKey.AutoIncrement = false;
				colvarEventKey.IsNullable = false;
				colvarEventKey.IsPrimaryKey = false;
				colvarEventKey.IsForeignKey = true;
				colvarEventKey.IsReadOnly = false;
				colvarEventKey.DefaultSetting = @"";
				
					colvarEventKey.ForeignKeyTableName = "Events";
				schema.Columns.Add(colvarEventKey);
				
				TableSchema.TableColumn colvarTheQuestion = new TableSchema.TableColumn(schema);
				colvarTheQuestion.ColumnName = "The_Question";
				colvarTheQuestion.DataType = DbType.String;
				colvarTheQuestion.MaxLength = 200;
				colvarTheQuestion.AutoIncrement = false;
				colvarTheQuestion.IsNullable = true;
				colvarTheQuestion.IsPrimaryKey = false;
				colvarTheQuestion.IsForeignKey = false;
				colvarTheQuestion.IsReadOnly = false;
				colvarTheQuestion.DefaultSetting = @"";
				colvarTheQuestion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTheQuestion);
				
				TableSchema.TableColumn colvarMandatory = new TableSchema.TableColumn(schema);
				colvarMandatory.ColumnName = "Mandatory";
				colvarMandatory.DataType = DbType.Boolean;
				colvarMandatory.MaxLength = 0;
				colvarMandatory.AutoIncrement = false;
				colvarMandatory.IsNullable = true;
				colvarMandatory.IsPrimaryKey = false;
				colvarMandatory.IsForeignKey = false;
				colvarMandatory.IsReadOnly = false;
				colvarMandatory.DefaultSetting = @"";
				colvarMandatory.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMandatory);
				
				TableSchema.TableColumn colvarQuestionType = new TableSchema.TableColumn(schema);
				colvarQuestionType.ColumnName = "Question_Type";
				colvarQuestionType.DataType = DbType.Int32;
				colvarQuestionType.MaxLength = 0;
				colvarQuestionType.AutoIncrement = false;
				colvarQuestionType.IsNullable = true;
				colvarQuestionType.IsPrimaryKey = false;
				colvarQuestionType.IsForeignKey = false;
				colvarQuestionType.IsReadOnly = false;
				colvarQuestionType.DefaultSetting = @"";
				colvarQuestionType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuestionType);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Eventomatic"].AddSchema("Question",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("QuestionKey")]
		[Bindable(true)]
		public int QuestionKey 
		{
			get { return GetColumnValue<int>(Columns.QuestionKey); }
			set { SetColumnValue(Columns.QuestionKey, value); }
		}
		  
		[XmlAttribute("EventKey")]
		[Bindable(true)]
		public int EventKey 
		{
			get { return GetColumnValue<int>(Columns.EventKey); }
			set { SetColumnValue(Columns.EventKey, value); }
		}
		  
		[XmlAttribute("TheQuestion")]
		[Bindable(true)]
		public string TheQuestion 
		{
			get { return GetColumnValue<string>(Columns.TheQuestion); }
			set { SetColumnValue(Columns.TheQuestion, value); }
		}
		  
		[XmlAttribute("Mandatory")]
		[Bindable(true)]
		public bool? Mandatory 
		{
			get { return GetColumnValue<bool?>(Columns.Mandatory); }
			set { SetColumnValue(Columns.Mandatory, value); }
		}
		  
		[XmlAttribute("QuestionType")]
		[Bindable(true)]
		public int? QuestionType 
		{
			get { return GetColumnValue<int?>(Columns.QuestionType); }
			set { SetColumnValue(Columns.QuestionType, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a EventX ActiveRecord object related to this Question
		/// 
		/// </summary>
		public Eventomatic_DB.EventX EventX
		{
			get { return Eventomatic_DB.EventX.FetchByID(this.EventKey); }
			set { SetColumnValue("Event_Key", value.EventKey); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varEventKey,string varTheQuestion,bool? varMandatory,int? varQuestionType)
		{
			Question item = new Question();
			
			item.EventKey = varEventKey;
			
			item.TheQuestion = varTheQuestion;
			
			item.Mandatory = varMandatory;
			
			item.QuestionType = varQuestionType;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varQuestionKey,int varEventKey,string varTheQuestion,bool? varMandatory,int? varQuestionType)
		{
			Question item = new Question();
			
				item.QuestionKey = varQuestionKey;
			
				item.EventKey = varEventKey;
			
				item.TheQuestion = varTheQuestion;
			
				item.Mandatory = varMandatory;
			
				item.QuestionType = varQuestionType;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn QuestionKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn EventKeyColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TheQuestionColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn MandatoryColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn QuestionTypeColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string QuestionKey = @"Question_Key";
			 public static string EventKey = @"Event_Key";
			 public static string TheQuestion = @"The_Question";
			 public static string Mandatory = @"Mandatory";
			 public static string QuestionType = @"Question_Type";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
