using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Eventomatic_DB
{
	/// <summary>
	/// Strongly-typed collection for the FbUsersSeller class.
	/// </summary>
    [Serializable]
	public partial class FbUsersSellerCollection : ActiveList<FbUsersSeller, FbUsersSellerCollection>
	{	   
		public FbUsersSellerCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>FbUsersSellerCollection</returns>
		public FbUsersSellerCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                FbUsersSeller o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the FB_Users_Sellers table.
	/// </summary>
	[Serializable]
	public partial class FbUsersSeller : ActiveRecord<FbUsersSeller>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public FbUsersSeller()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public FbUsersSeller(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public FbUsersSeller(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public FbUsersSeller(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("FB_Users_Sellers", TableType.Table, DataService.GetInstance("Eventomatic"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarFbUsersSellersKey = new TableSchema.TableColumn(schema);
				colvarFbUsersSellersKey.ColumnName = "FB_Users_Sellers_Key";
				colvarFbUsersSellersKey.DataType = DbType.Int32;
				colvarFbUsersSellersKey.MaxLength = 0;
				colvarFbUsersSellersKey.AutoIncrement = true;
				colvarFbUsersSellersKey.IsNullable = false;
				colvarFbUsersSellersKey.IsPrimaryKey = true;
				colvarFbUsersSellersKey.IsForeignKey = false;
				colvarFbUsersSellersKey.IsReadOnly = false;
				colvarFbUsersSellersKey.DefaultSetting = @"";
				colvarFbUsersSellersKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFbUsersSellersKey);
				
				TableSchema.TableColumn colvarFBid = new TableSchema.TableColumn(schema);
				colvarFBid.ColumnName = "FBid";
				colvarFBid.DataType = DbType.Int64;
				colvarFBid.MaxLength = 0;
				colvarFBid.AutoIncrement = false;
				colvarFBid.IsNullable = false;
				colvarFBid.IsPrimaryKey = false;
				colvarFBid.IsForeignKey = false;
				colvarFBid.IsReadOnly = false;
				colvarFBid.DefaultSetting = @"";
				colvarFBid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFBid);
				
				TableSchema.TableColumn colvarEventKey = new TableSchema.TableColumn(schema);
				colvarEventKey.ColumnName = "Event_Key";
				colvarEventKey.DataType = DbType.Int32;
				colvarEventKey.MaxLength = 0;
				colvarEventKey.AutoIncrement = false;
				colvarEventKey.IsNullable = true;
				colvarEventKey.IsPrimaryKey = false;
				colvarEventKey.IsForeignKey = false;
				colvarEventKey.IsReadOnly = false;
				colvarEventKey.DefaultSetting = @"";
				colvarEventKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEventKey);
				
				TableSchema.TableColumn colvarTicketKey = new TableSchema.TableColumn(schema);
				colvarTicketKey.ColumnName = "Ticket_Key";
				colvarTicketKey.DataType = DbType.Int32;
				colvarTicketKey.MaxLength = 0;
				colvarTicketKey.AutoIncrement = false;
				colvarTicketKey.IsNullable = true;
				colvarTicketKey.IsPrimaryKey = false;
				colvarTicketKey.IsForeignKey = false;
				colvarTicketKey.IsReadOnly = false;
				colvarTicketKey.DefaultSetting = @"";
				colvarTicketKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTicketKey);
				
				TableSchema.TableColumn colvarShowGoals = new TableSchema.TableColumn(schema);
				colvarShowGoals.ColumnName = "ShowGoals";
				colvarShowGoals.DataType = DbType.Boolean;
				colvarShowGoals.MaxLength = 0;
				colvarShowGoals.AutoIncrement = false;
				colvarShowGoals.IsNullable = true;
				colvarShowGoals.IsPrimaryKey = false;
				colvarShowGoals.IsForeignKey = false;
				colvarShowGoals.IsReadOnly = false;
				colvarShowGoals.DefaultSetting = @"";
				colvarShowGoals.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShowGoals);
				
				TableSchema.TableColumn colvarGoalAmount = new TableSchema.TableColumn(schema);
				colvarGoalAmount.ColumnName = "GoalAmount";
				colvarGoalAmount.DataType = DbType.Currency;
				colvarGoalAmount.MaxLength = 0;
				colvarGoalAmount.AutoIncrement = false;
				colvarGoalAmount.IsNullable = true;
				colvarGoalAmount.IsPrimaryKey = false;
				colvarGoalAmount.IsForeignKey = false;
				colvarGoalAmount.IsReadOnly = false;
				colvarGoalAmount.DefaultSetting = @"";
				colvarGoalAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGoalAmount);
				
				TableSchema.TableColumn colvarFullName = new TableSchema.TableColumn(schema);
				colvarFullName.ColumnName = "Full_Name";
				colvarFullName.DataType = DbType.String;
				colvarFullName.MaxLength = 200;
				colvarFullName.AutoIncrement = false;
				colvarFullName.IsNullable = true;
				colvarFullName.IsPrimaryKey = false;
				colvarFullName.IsForeignKey = false;
				colvarFullName.IsReadOnly = false;
				colvarFullName.DefaultSetting = @"";
				colvarFullName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFullName);
				
				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.String;
				colvarEmail.MaxLength = 200;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);
				
				TableSchema.TableColumn colvarStreamStories = new TableSchema.TableColumn(schema);
				colvarStreamStories.ColumnName = "Stream_Stories";
				colvarStreamStories.DataType = DbType.Boolean;
				colvarStreamStories.MaxLength = 0;
				colvarStreamStories.AutoIncrement = false;
				colvarStreamStories.IsNullable = true;
				colvarStreamStories.IsPrimaryKey = false;
				colvarStreamStories.IsForeignKey = false;
				colvarStreamStories.IsReadOnly = false;
				colvarStreamStories.DefaultSetting = @"";
				colvarStreamStories.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreamStories);
				
				TableSchema.TableColumn colvarAccessToken = new TableSchema.TableColumn(schema);
				colvarAccessToken.ColumnName = "Access_Token";
				colvarAccessToken.DataType = DbType.String;
				colvarAccessToken.MaxLength = 200;
				colvarAccessToken.AutoIncrement = false;
				colvarAccessToken.IsNullable = true;
				colvarAccessToken.IsPrimaryKey = false;
				colvarAccessToken.IsForeignKey = false;
				colvarAccessToken.IsReadOnly = false;
				colvarAccessToken.DefaultSetting = @"";
				colvarAccessToken.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccessToken);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Eventomatic"].AddSchema("FB_Users_Sellers",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("FbUsersSellersKey")]
		[Bindable(true)]
		public int FbUsersSellersKey 
		{
			get { return GetColumnValue<int>(Columns.FbUsersSellersKey); }
			set { SetColumnValue(Columns.FbUsersSellersKey, value); }
		}
		  
		[XmlAttribute("FBid")]
		[Bindable(true)]
		public long FBid 
		{
			get { return GetColumnValue<long>(Columns.FBid); }
			set { SetColumnValue(Columns.FBid, value); }
		}
		  
		[XmlAttribute("EventKey")]
		[Bindable(true)]
		public int? EventKey 
		{
			get { return GetColumnValue<int?>(Columns.EventKey); }
			set { SetColumnValue(Columns.EventKey, value); }
		}
		  
		[XmlAttribute("TicketKey")]
		[Bindable(true)]
		public int? TicketKey 
		{
			get { return GetColumnValue<int?>(Columns.TicketKey); }
			set { SetColumnValue(Columns.TicketKey, value); }
		}
		  
		[XmlAttribute("ShowGoals")]
		[Bindable(true)]
		public bool? ShowGoals 
		{
			get { return GetColumnValue<bool?>(Columns.ShowGoals); }
			set { SetColumnValue(Columns.ShowGoals, value); }
		}
		  
		[XmlAttribute("GoalAmount")]
		[Bindable(true)]
		public decimal? GoalAmount 
		{
			get { return GetColumnValue<decimal?>(Columns.GoalAmount); }
			set { SetColumnValue(Columns.GoalAmount, value); }
		}
		  
		[XmlAttribute("FullName")]
		[Bindable(true)]
		public string FullName 
		{
			get { return GetColumnValue<string>(Columns.FullName); }
			set { SetColumnValue(Columns.FullName, value); }
		}
		  
		[XmlAttribute("Email")]
		[Bindable(true)]
		public string Email 
		{
			get { return GetColumnValue<string>(Columns.Email); }
			set { SetColumnValue(Columns.Email, value); }
		}
		  
		[XmlAttribute("StreamStories")]
		[Bindable(true)]
		public bool? StreamStories 
		{
			get { return GetColumnValue<bool?>(Columns.StreamStories); }
			set { SetColumnValue(Columns.StreamStories, value); }
		}
		  
		[XmlAttribute("AccessToken")]
		[Bindable(true)]
		public string AccessToken 
		{
			get { return GetColumnValue<string>(Columns.AccessToken); }
			set { SetColumnValue(Columns.AccessToken, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(long varFBid,int? varEventKey,int? varTicketKey,bool? varShowGoals,decimal? varGoalAmount,string varFullName,string varEmail,bool? varStreamStories,string varAccessToken)
		{
			FbUsersSeller item = new FbUsersSeller();
			
			item.FBid = varFBid;
			
			item.EventKey = varEventKey;
			
			item.TicketKey = varTicketKey;
			
			item.ShowGoals = varShowGoals;
			
			item.GoalAmount = varGoalAmount;
			
			item.FullName = varFullName;
			
			item.Email = varEmail;
			
			item.StreamStories = varStreamStories;
			
			item.AccessToken = varAccessToken;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varFbUsersSellersKey,long varFBid,int? varEventKey,int? varTicketKey,bool? varShowGoals,decimal? varGoalAmount,string varFullName,string varEmail,bool? varStreamStories,string varAccessToken)
		{
			FbUsersSeller item = new FbUsersSeller();
			
				item.FbUsersSellersKey = varFbUsersSellersKey;
			
				item.FBid = varFBid;
			
				item.EventKey = varEventKey;
			
				item.TicketKey = varTicketKey;
			
				item.ShowGoals = varShowGoals;
			
				item.GoalAmount = varGoalAmount;
			
				item.FullName = varFullName;
			
				item.Email = varEmail;
			
				item.StreamStories = varStreamStories;
			
				item.AccessToken = varAccessToken;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn FbUsersSellersKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn FBidColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn EventKeyColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn TicketKeyColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ShowGoalsColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn GoalAmountColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn FullNameColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn EmailColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn StreamStoriesColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn AccessTokenColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string FbUsersSellersKey = @"FB_Users_Sellers_Key";
			 public static string FBid = @"FBid";
			 public static string EventKey = @"Event_Key";
			 public static string TicketKey = @"Ticket_Key";
			 public static string ShowGoals = @"ShowGoals";
			 public static string GoalAmount = @"GoalAmount";
			 public static string FullName = @"Full_Name";
			 public static string Email = @"Email";
			 public static string StreamStories = @"Stream_Stories";
			 public static string AccessToken = @"Access_Token";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
