using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Eventomatic_DB
{
    /// <summary>
    /// Controller class for Transactions
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TransactionController
    {
        // Preload our schema..
        Transaction thisSchemaLoad = new Transaction();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TransactionCollection FetchAll()
        {
            TransactionCollection coll = new TransactionCollection();
            Query qry = new Query(Transaction.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TransactionCollection FetchByID(object TxKey)
        {
            TransactionCollection coll = new TransactionCollection().Where("Tx_Key", TxKey).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TransactionCollection FetchByQuery(Query qry)
        {
            TransactionCollection coll = new TransactionCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object TxKey)
        {
            return (Transaction.Delete(TxKey) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object TxKey)
        {
            return (Transaction.Destroy(TxKey) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(decimal Amount,string EmailBuyer,string EmailSeller,DateTime InitDate,int? EventKey,string Currency,string ItemDescription,int? TxStatus,DateTime? ConfirmationDate,string TxnId,decimal? McGross,string PayerId,decimal? Tax,string PaymentStatus,string PayerStatus,string BusinessEmail,string PayerEmail,string PaymentType,string McCurrency,string TransactionSubject,string LastName,string FirstName,string TransactionLog,string GuestListFirstName,string GuestListLastName,decimal? ServiceFee,string IpAddress,long? FbidSeller,long? FbidBuyer,decimal? MerchantFee,decimal? GroupstoreProfit,string Token,string TicketAmountEmail,int? Txtype,string Pfsms,string CorrelationId,string ReceiptId,string Latitude,string Longitude)
	    {
		    Transaction item = new Transaction();
		    
            item.Amount = Amount;
            
            item.EmailBuyer = EmailBuyer;
            
            item.EmailSeller = EmailSeller;
            
            item.InitDate = InitDate;
            
            item.EventKey = EventKey;
            
            item.Currency = Currency;
            
            item.ItemDescription = ItemDescription;
            
            item.TxStatus = TxStatus;
            
            item.ConfirmationDate = ConfirmationDate;
            
            item.TxnId = TxnId;
            
            item.McGross = McGross;
            
            item.PayerId = PayerId;
            
            item.Tax = Tax;
            
            item.PaymentStatus = PaymentStatus;
            
            item.PayerStatus = PayerStatus;
            
            item.BusinessEmail = BusinessEmail;
            
            item.PayerEmail = PayerEmail;
            
            item.PaymentType = PaymentType;
            
            item.McCurrency = McCurrency;
            
            item.TransactionSubject = TransactionSubject;
            
            item.LastName = LastName;
            
            item.FirstName = FirstName;
            
            item.TransactionLog = TransactionLog;
            
            item.GuestListFirstName = GuestListFirstName;
            
            item.GuestListLastName = GuestListLastName;
            
            item.ServiceFee = ServiceFee;
            
            item.IpAddress = IpAddress;
            
            item.FbidSeller = FbidSeller;
            
            item.FbidBuyer = FbidBuyer;
            
            item.MerchantFee = MerchantFee;
            
            item.GroupstoreProfit = GroupstoreProfit;
            
            item.Token = Token;
            
            item.TicketAmountEmail = TicketAmountEmail;
            
            item.Txtype = Txtype;
            
            item.Pfsms = Pfsms;
            
            item.CorrelationId = CorrelationId;
            
            item.ReceiptId = ReceiptId;
            
            item.Latitude = Latitude;
            
            item.Longitude = Longitude;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int TxKey,decimal Amount,string EmailBuyer,string EmailSeller,DateTime InitDate,int? EventKey,string Currency,string ItemDescription,int? TxStatus,DateTime? ConfirmationDate,string TxnId,decimal? McGross,string PayerId,decimal? Tax,string PaymentStatus,string PayerStatus,string BusinessEmail,string PayerEmail,string PaymentType,string McCurrency,string TransactionSubject,string LastName,string FirstName,string TransactionLog,string GuestListFirstName,string GuestListLastName,decimal? ServiceFee,string IpAddress,long? FbidSeller,long? FbidBuyer,decimal? MerchantFee,decimal? GroupstoreProfit,string Token,string TicketAmountEmail,int? Txtype,string Pfsms,string CorrelationId,string ReceiptId,string Latitude,string Longitude)
	    {
		    Transaction item = new Transaction();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.TxKey = TxKey;
				
			item.Amount = Amount;
				
			item.EmailBuyer = EmailBuyer;
				
			item.EmailSeller = EmailSeller;
				
			item.InitDate = InitDate;
				
			item.EventKey = EventKey;
				
			item.Currency = Currency;
				
			item.ItemDescription = ItemDescription;
				
			item.TxStatus = TxStatus;
				
			item.ConfirmationDate = ConfirmationDate;
				
			item.TxnId = TxnId;
				
			item.McGross = McGross;
				
			item.PayerId = PayerId;
				
			item.Tax = Tax;
				
			item.PaymentStatus = PaymentStatus;
				
			item.PayerStatus = PayerStatus;
				
			item.BusinessEmail = BusinessEmail;
				
			item.PayerEmail = PayerEmail;
				
			item.PaymentType = PaymentType;
				
			item.McCurrency = McCurrency;
				
			item.TransactionSubject = TransactionSubject;
				
			item.LastName = LastName;
				
			item.FirstName = FirstName;
				
			item.TransactionLog = TransactionLog;
				
			item.GuestListFirstName = GuestListFirstName;
				
			item.GuestListLastName = GuestListLastName;
				
			item.ServiceFee = ServiceFee;
				
			item.IpAddress = IpAddress;
				
			item.FbidSeller = FbidSeller;
				
			item.FbidBuyer = FbidBuyer;
				
			item.MerchantFee = MerchantFee;
				
			item.GroupstoreProfit = GroupstoreProfit;
				
			item.Token = Token;
				
			item.TicketAmountEmail = TicketAmountEmail;
				
			item.Txtype = Txtype;
				
			item.Pfsms = Pfsms;
				
			item.CorrelationId = CorrelationId;
				
			item.ReceiptId = ReceiptId;
				
			item.Latitude = Latitude;
				
			item.Longitude = Longitude;
				
	        item.Save(UserName);
	    }
    }
}
