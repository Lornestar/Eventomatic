using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Eventomatic_DB
{
	/// <summary>
	/// Strongly-typed collection for the TicketsPurchased class.
	/// </summary>
    [Serializable]
	public partial class TicketsPurchasedCollection : ActiveList<TicketsPurchased, TicketsPurchasedCollection>
	{	   
		public TicketsPurchasedCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TicketsPurchasedCollection</returns>
		public TicketsPurchasedCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TicketsPurchased o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Tickets_Purchased table.
	/// </summary>
	[Serializable]
	public partial class TicketsPurchased : ActiveRecord<TicketsPurchased>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TicketsPurchased()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TicketsPurchased(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TicketsPurchased(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TicketsPurchased(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Tickets_Purchased", TableType.Table, DataService.GetInstance("Eventomatic"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarTicketsPurchasedKey = new TableSchema.TableColumn(schema);
				colvarTicketsPurchasedKey.ColumnName = "Tickets_Purchased_Key";
				colvarTicketsPurchasedKey.DataType = DbType.Int32;
				colvarTicketsPurchasedKey.MaxLength = 0;
				colvarTicketsPurchasedKey.AutoIncrement = true;
				colvarTicketsPurchasedKey.IsNullable = false;
				colvarTicketsPurchasedKey.IsPrimaryKey = true;
				colvarTicketsPurchasedKey.IsForeignKey = false;
				colvarTicketsPurchasedKey.IsReadOnly = false;
				colvarTicketsPurchasedKey.DefaultSetting = @"";
				colvarTicketsPurchasedKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTicketsPurchasedKey);
				
				TableSchema.TableColumn colvarTxKey = new TableSchema.TableColumn(schema);
				colvarTxKey.ColumnName = "Tx_Key";
				colvarTxKey.DataType = DbType.Int32;
				colvarTxKey.MaxLength = 0;
				colvarTxKey.AutoIncrement = false;
				colvarTxKey.IsNullable = false;
				colvarTxKey.IsPrimaryKey = false;
				colvarTxKey.IsForeignKey = true;
				colvarTxKey.IsReadOnly = false;
				colvarTxKey.DefaultSetting = @"";
				
					colvarTxKey.ForeignKeyTableName = "Transactions";
				schema.Columns.Add(colvarTxKey);
				
				TableSchema.TableColumn colvarTicketKey = new TableSchema.TableColumn(schema);
				colvarTicketKey.ColumnName = "Ticket_Key";
				colvarTicketKey.DataType = DbType.Int32;
				colvarTicketKey.MaxLength = 0;
				colvarTicketKey.AutoIncrement = false;
				colvarTicketKey.IsNullable = false;
				colvarTicketKey.IsPrimaryKey = false;
				colvarTicketKey.IsForeignKey = true;
				colvarTicketKey.IsReadOnly = false;
				colvarTicketKey.DefaultSetting = @"";
				
					colvarTicketKey.ForeignKeyTableName = "Tickets";
				schema.Columns.Add(colvarTicketKey);
				
				TableSchema.TableColumn colvarQuantity = new TableSchema.TableColumn(schema);
				colvarQuantity.ColumnName = "Quantity";
				colvarQuantity.DataType = DbType.Int32;
				colvarQuantity.MaxLength = 0;
				colvarQuantity.AutoIncrement = false;
				colvarQuantity.IsNullable = false;
				colvarQuantity.IsPrimaryKey = false;
				colvarQuantity.IsForeignKey = false;
				colvarQuantity.IsReadOnly = false;
				colvarQuantity.DefaultSetting = @"";
				colvarQuantity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuantity);
				
				TableSchema.TableColumn colvarTicketNum = new TableSchema.TableColumn(schema);
				colvarTicketNum.ColumnName = "TicketNum";
				colvarTicketNum.DataType = DbType.Int32;
				colvarTicketNum.MaxLength = 0;
				colvarTicketNum.AutoIncrement = false;
				colvarTicketNum.IsNullable = true;
				colvarTicketNum.IsPrimaryKey = false;
				colvarTicketNum.IsForeignKey = false;
				colvarTicketNum.IsReadOnly = false;
				colvarTicketNum.DefaultSetting = @"";
				colvarTicketNum.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTicketNum);
				
				TableSchema.TableColumn colvarGotTickets = new TableSchema.TableColumn(schema);
				colvarGotTickets.ColumnName = "Got_Tickets";
				colvarGotTickets.DataType = DbType.Int64;
				colvarGotTickets.MaxLength = 0;
				colvarGotTickets.AutoIncrement = false;
				colvarGotTickets.IsNullable = true;
				colvarGotTickets.IsPrimaryKey = false;
				colvarGotTickets.IsForeignKey = false;
				colvarGotTickets.IsReadOnly = false;
				colvarGotTickets.DefaultSetting = @"";
				colvarGotTickets.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGotTickets);
				
				TableSchema.TableColumn colvarDonationAmount = new TableSchema.TableColumn(schema);
				colvarDonationAmount.ColumnName = "DonationAmount";
				colvarDonationAmount.DataType = DbType.Currency;
				colvarDonationAmount.MaxLength = 0;
				colvarDonationAmount.AutoIncrement = false;
				colvarDonationAmount.IsNullable = true;
				colvarDonationAmount.IsPrimaryKey = false;
				colvarDonationAmount.IsForeignKey = false;
				colvarDonationAmount.IsReadOnly = false;
				colvarDonationAmount.DefaultSetting = @"";
				colvarDonationAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDonationAmount);
				
				TableSchema.TableColumn colvarStartDate = new TableSchema.TableColumn(schema);
				colvarStartDate.ColumnName = "Start_Date";
				colvarStartDate.DataType = DbType.DateTime;
				colvarStartDate.MaxLength = 0;
				colvarStartDate.AutoIncrement = false;
				colvarStartDate.IsNullable = true;
				colvarStartDate.IsPrimaryKey = false;
				colvarStartDate.IsForeignKey = false;
				colvarStartDate.IsReadOnly = false;
				colvarStartDate.DefaultSetting = @"";
				colvarStartDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartDate);
				
				TableSchema.TableColumn colvarEndDate = new TableSchema.TableColumn(schema);
				colvarEndDate.ColumnName = "End_Date";
				colvarEndDate.DataType = DbType.DateTime;
				colvarEndDate.MaxLength = 0;
				colvarEndDate.AutoIncrement = false;
				colvarEndDate.IsNullable = true;
				colvarEndDate.IsPrimaryKey = false;
				colvarEndDate.IsForeignKey = false;
				colvarEndDate.IsReadOnly = false;
				colvarEndDate.DefaultSetting = @"";
				colvarEndDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEndDate);
				
				TableSchema.TableColumn colvarFirstName = new TableSchema.TableColumn(schema);
				colvarFirstName.ColumnName = "First_Name";
				colvarFirstName.DataType = DbType.AnsiString;
				colvarFirstName.MaxLength = 50;
				colvarFirstName.AutoIncrement = false;
				colvarFirstName.IsNullable = true;
				colvarFirstName.IsPrimaryKey = false;
				colvarFirstName.IsForeignKey = false;
				colvarFirstName.IsReadOnly = false;
				colvarFirstName.DefaultSetting = @"";
				colvarFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstName);
				
				TableSchema.TableColumn colvarLastName = new TableSchema.TableColumn(schema);
				colvarLastName.ColumnName = "Last_Name";
				colvarLastName.DataType = DbType.AnsiString;
				colvarLastName.MaxLength = 50;
				colvarLastName.AutoIncrement = false;
				colvarLastName.IsNullable = true;
				colvarLastName.IsPrimaryKey = false;
				colvarLastName.IsForeignKey = false;
				colvarLastName.IsReadOnly = false;
				colvarLastName.DefaultSetting = @"";
				colvarLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastName);
				
				TableSchema.TableColumn colvarLastModified = new TableSchema.TableColumn(schema);
				colvarLastModified.ColumnName = "Last_Modified";
				colvarLastModified.DataType = DbType.DateTime;
				colvarLastModified.MaxLength = 0;
				colvarLastModified.AutoIncrement = false;
				colvarLastModified.IsNullable = true;
				colvarLastModified.IsPrimaryKey = false;
				colvarLastModified.IsForeignKey = false;
				colvarLastModified.IsReadOnly = false;
				colvarLastModified.DefaultSetting = @"";
				colvarLastModified.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastModified);
				
				TableSchema.TableColumn colvarVisible = new TableSchema.TableColumn(schema);
				colvarVisible.ColumnName = "Visible";
				colvarVisible.DataType = DbType.Boolean;
				colvarVisible.MaxLength = 0;
				colvarVisible.AutoIncrement = false;
				colvarVisible.IsNullable = true;
				colvarVisible.IsPrimaryKey = false;
				colvarVisible.IsForeignKey = false;
				colvarVisible.IsReadOnly = false;
				colvarVisible.DefaultSetting = @"";
				colvarVisible.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVisible);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Eventomatic"].AddSchema("Tickets_Purchased",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("TicketsPurchasedKey")]
		[Bindable(true)]
		public int TicketsPurchasedKey 
		{
			get { return GetColumnValue<int>(Columns.TicketsPurchasedKey); }
			set { SetColumnValue(Columns.TicketsPurchasedKey, value); }
		}
		  
		[XmlAttribute("TxKey")]
		[Bindable(true)]
		public int TxKey 
		{
			get { return GetColumnValue<int>(Columns.TxKey); }
			set { SetColumnValue(Columns.TxKey, value); }
		}
		  
		[XmlAttribute("TicketKey")]
		[Bindable(true)]
		public int TicketKey 
		{
			get { return GetColumnValue<int>(Columns.TicketKey); }
			set { SetColumnValue(Columns.TicketKey, value); }
		}
		  
		[XmlAttribute("Quantity")]
		[Bindable(true)]
		public int Quantity 
		{
			get { return GetColumnValue<int>(Columns.Quantity); }
			set { SetColumnValue(Columns.Quantity, value); }
		}
		  
		[XmlAttribute("TicketNum")]
		[Bindable(true)]
		public int? TicketNum 
		{
			get { return GetColumnValue<int?>(Columns.TicketNum); }
			set { SetColumnValue(Columns.TicketNum, value); }
		}
		  
		[XmlAttribute("GotTickets")]
		[Bindable(true)]
		public long? GotTickets 
		{
			get { return GetColumnValue<long?>(Columns.GotTickets); }
			set { SetColumnValue(Columns.GotTickets, value); }
		}
		  
		[XmlAttribute("DonationAmount")]
		[Bindable(true)]
		public decimal? DonationAmount 
		{
			get { return GetColumnValue<decimal?>(Columns.DonationAmount); }
			set { SetColumnValue(Columns.DonationAmount, value); }
		}
		  
		[XmlAttribute("StartDate")]
		[Bindable(true)]
		public DateTime? StartDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.StartDate); }
			set { SetColumnValue(Columns.StartDate, value); }
		}
		  
		[XmlAttribute("EndDate")]
		[Bindable(true)]
		public DateTime? EndDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.EndDate); }
			set { SetColumnValue(Columns.EndDate, value); }
		}
		  
		[XmlAttribute("FirstName")]
		[Bindable(true)]
		public string FirstName 
		{
			get { return GetColumnValue<string>(Columns.FirstName); }
			set { SetColumnValue(Columns.FirstName, value); }
		}
		  
		[XmlAttribute("LastName")]
		[Bindable(true)]
		public string LastName 
		{
			get { return GetColumnValue<string>(Columns.LastName); }
			set { SetColumnValue(Columns.LastName, value); }
		}
		  
		[XmlAttribute("LastModified")]
		[Bindable(true)]
		public DateTime? LastModified 
		{
			get { return GetColumnValue<DateTime?>(Columns.LastModified); }
			set { SetColumnValue(Columns.LastModified, value); }
		}
		  
		[XmlAttribute("Visible")]
		[Bindable(true)]
		public bool? Visible 
		{
			get { return GetColumnValue<bool?>(Columns.Visible); }
			set { SetColumnValue(Columns.Visible, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public Eventomatic_DB.QuestionsAnsweredCollection QuestionsAnsweredRecords()
		{
			return new Eventomatic_DB.QuestionsAnsweredCollection().Where(QuestionsAnswered.Columns.TicketsPurchasedKey, TicketsPurchasedKey).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a Ticket ActiveRecord object related to this TicketsPurchased
		/// 
		/// </summary>
		public Eventomatic_DB.Ticket Ticket
		{
			get { return Eventomatic_DB.Ticket.FetchByID(this.TicketKey); }
			set { SetColumnValue("Ticket_Key", value.TicketKey); }
		}
		
		
		/// <summary>
		/// Returns a Transaction ActiveRecord object related to this TicketsPurchased
		/// 
		/// </summary>
		public Eventomatic_DB.Transaction Transaction
		{
			get { return Eventomatic_DB.Transaction.FetchByID(this.TxKey); }
			set { SetColumnValue("Tx_Key", value.TxKey); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varTxKey,int varTicketKey,int varQuantity,int? varTicketNum,long? varGotTickets,decimal? varDonationAmount,DateTime? varStartDate,DateTime? varEndDate,string varFirstName,string varLastName,DateTime? varLastModified,bool? varVisible)
		{
			TicketsPurchased item = new TicketsPurchased();
			
			item.TxKey = varTxKey;
			
			item.TicketKey = varTicketKey;
			
			item.Quantity = varQuantity;
			
			item.TicketNum = varTicketNum;
			
			item.GotTickets = varGotTickets;
			
			item.DonationAmount = varDonationAmount;
			
			item.StartDate = varStartDate;
			
			item.EndDate = varEndDate;
			
			item.FirstName = varFirstName;
			
			item.LastName = varLastName;
			
			item.LastModified = varLastModified;
			
			item.Visible = varVisible;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varTicketsPurchasedKey,int varTxKey,int varTicketKey,int varQuantity,int? varTicketNum,long? varGotTickets,decimal? varDonationAmount,DateTime? varStartDate,DateTime? varEndDate,string varFirstName,string varLastName,DateTime? varLastModified,bool? varVisible)
		{
			TicketsPurchased item = new TicketsPurchased();
			
				item.TicketsPurchasedKey = varTicketsPurchasedKey;
			
				item.TxKey = varTxKey;
			
				item.TicketKey = varTicketKey;
			
				item.Quantity = varQuantity;
			
				item.TicketNum = varTicketNum;
			
				item.GotTickets = varGotTickets;
			
				item.DonationAmount = varDonationAmount;
			
				item.StartDate = varStartDate;
			
				item.EndDate = varEndDate;
			
				item.FirstName = varFirstName;
			
				item.LastName = varLastName;
			
				item.LastModified = varLastModified;
			
				item.Visible = varVisible;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn TicketsPurchasedKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn TxKeyColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TicketKeyColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn QuantityColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn TicketNumColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn GotTicketsColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn DonationAmountColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn StartDateColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn EndDateColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn FirstNameColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn LastNameColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn LastModifiedColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn VisibleColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string TicketsPurchasedKey = @"Tickets_Purchased_Key";
			 public static string TxKey = @"Tx_Key";
			 public static string TicketKey = @"Ticket_Key";
			 public static string Quantity = @"Quantity";
			 public static string TicketNum = @"TicketNum";
			 public static string GotTickets = @"Got_Tickets";
			 public static string DonationAmount = @"DonationAmount";
			 public static string StartDate = @"Start_Date";
			 public static string EndDate = @"End_Date";
			 public static string FirstName = @"First_Name";
			 public static string LastName = @"Last_Name";
			 public static string LastModified = @"Last_Modified";
			 public static string Visible = @"Visible";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
