using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Eventomatic_DB
{
	/// <summary>
	/// Strongly-typed collection for the BillingPayment class.
	/// </summary>
    [Serializable]
	public partial class BillingPaymentCollection : ActiveList<BillingPayment, BillingPaymentCollection>
	{	   
		public BillingPaymentCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>BillingPaymentCollection</returns>
		public BillingPaymentCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                BillingPayment o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Billing_Payment table.
	/// </summary>
	[Serializable]
	public partial class BillingPayment : ActiveRecord<BillingPayment>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public BillingPayment()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public BillingPayment(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public BillingPayment(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public BillingPayment(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Billing_Payment", TableType.Table, DataService.GetInstance("Eventomatic"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarBillingPaymentKey = new TableSchema.TableColumn(schema);
				colvarBillingPaymentKey.ColumnName = "Billing_Payment_Key";
				colvarBillingPaymentKey.DataType = DbType.Int32;
				colvarBillingPaymentKey.MaxLength = 0;
				colvarBillingPaymentKey.AutoIncrement = true;
				colvarBillingPaymentKey.IsNullable = false;
				colvarBillingPaymentKey.IsPrimaryKey = true;
				colvarBillingPaymentKey.IsForeignKey = false;
				colvarBillingPaymentKey.IsReadOnly = false;
				colvarBillingPaymentKey.DefaultSetting = @"";
				colvarBillingPaymentKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingPaymentKey);
				
				TableSchema.TableColumn colvarTxKey = new TableSchema.TableColumn(schema);
				colvarTxKey.ColumnName = "Tx_Key";
				colvarTxKey.DataType = DbType.Int32;
				colvarTxKey.MaxLength = 0;
				colvarTxKey.AutoIncrement = false;
				colvarTxKey.IsNullable = true;
				colvarTxKey.IsPrimaryKey = false;
				colvarTxKey.IsForeignKey = false;
				colvarTxKey.IsReadOnly = false;
				colvarTxKey.DefaultSetting = @"";
				colvarTxKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTxKey);
				
				TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
				colvarAmount.ColumnName = "Amount";
				colvarAmount.DataType = DbType.Currency;
				colvarAmount.MaxLength = 0;
				colvarAmount.AutoIncrement = false;
				colvarAmount.IsNullable = true;
				colvarAmount.IsPrimaryKey = false;
				colvarAmount.IsForeignKey = false;
				colvarAmount.IsReadOnly = false;
				colvarAmount.DefaultSetting = @"";
				colvarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmount);
				
				TableSchema.TableColumn colvarBillingType = new TableSchema.TableColumn(schema);
				colvarBillingType.ColumnName = "Billing_Type";
				colvarBillingType.DataType = DbType.Int32;
				colvarBillingType.MaxLength = 0;
				colvarBillingType.AutoIncrement = false;
				colvarBillingType.IsNullable = false;
				colvarBillingType.IsPrimaryKey = false;
				colvarBillingType.IsForeignKey = false;
				colvarBillingType.IsReadOnly = false;
				colvarBillingType.DefaultSetting = @"";
				colvarBillingType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingType);
				
				TableSchema.TableColumn colvarBillingDate = new TableSchema.TableColumn(schema);
				colvarBillingDate.ColumnName = "Billing_Date";
				colvarBillingDate.DataType = DbType.DateTime;
				colvarBillingDate.MaxLength = 0;
				colvarBillingDate.AutoIncrement = false;
				colvarBillingDate.IsNullable = true;
				colvarBillingDate.IsPrimaryKey = false;
				colvarBillingDate.IsForeignKey = false;
				colvarBillingDate.IsReadOnly = false;
				colvarBillingDate.DefaultSetting = @"";
				colvarBillingDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingDate);
				
				TableSchema.TableColumn colvarCorrelationId = new TableSchema.TableColumn(schema);
				colvarCorrelationId.ColumnName = "Correlation_ID";
				colvarCorrelationId.DataType = DbType.String;
				colvarCorrelationId.MaxLength = 50;
				colvarCorrelationId.AutoIncrement = false;
				colvarCorrelationId.IsNullable = true;
				colvarCorrelationId.IsPrimaryKey = false;
				colvarCorrelationId.IsForeignKey = false;
				colvarCorrelationId.IsReadOnly = false;
				colvarCorrelationId.DefaultSetting = @"";
				colvarCorrelationId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCorrelationId);
				
				TableSchema.TableColumn colvarTxnId = new TableSchema.TableColumn(schema);
				colvarTxnId.ColumnName = "txn_id";
				colvarTxnId.DataType = DbType.String;
				colvarTxnId.MaxLength = 200;
				colvarTxnId.AutoIncrement = false;
				colvarTxnId.IsNullable = true;
				colvarTxnId.IsPrimaryKey = false;
				colvarTxnId.IsForeignKey = false;
				colvarTxnId.IsReadOnly = false;
				colvarTxnId.DefaultSetting = @"";
				colvarTxnId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTxnId);
				
				TableSchema.TableColumn colvarBillingAgreementKey = new TableSchema.TableColumn(schema);
				colvarBillingAgreementKey.ColumnName = "Billing_Agreement_Key";
				colvarBillingAgreementKey.DataType = DbType.Int32;
				colvarBillingAgreementKey.MaxLength = 0;
				colvarBillingAgreementKey.AutoIncrement = false;
				colvarBillingAgreementKey.IsNullable = true;
				colvarBillingAgreementKey.IsPrimaryKey = false;
				colvarBillingAgreementKey.IsForeignKey = false;
				colvarBillingAgreementKey.IsReadOnly = false;
				colvarBillingAgreementKey.DefaultSetting = @"";
				colvarBillingAgreementKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingAgreementKey);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Eventomatic"].AddSchema("Billing_Payment",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("BillingPaymentKey")]
		[Bindable(true)]
		public int BillingPaymentKey 
		{
			get { return GetColumnValue<int>(Columns.BillingPaymentKey); }
			set { SetColumnValue(Columns.BillingPaymentKey, value); }
		}
		  
		[XmlAttribute("TxKey")]
		[Bindable(true)]
		public int? TxKey 
		{
			get { return GetColumnValue<int?>(Columns.TxKey); }
			set { SetColumnValue(Columns.TxKey, value); }
		}
		  
		[XmlAttribute("Amount")]
		[Bindable(true)]
		public decimal? Amount 
		{
			get { return GetColumnValue<decimal?>(Columns.Amount); }
			set { SetColumnValue(Columns.Amount, value); }
		}
		  
		[XmlAttribute("BillingType")]
		[Bindable(true)]
		public int BillingType 
		{
			get { return GetColumnValue<int>(Columns.BillingType); }
			set { SetColumnValue(Columns.BillingType, value); }
		}
		  
		[XmlAttribute("BillingDate")]
		[Bindable(true)]
		public DateTime? BillingDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.BillingDate); }
			set { SetColumnValue(Columns.BillingDate, value); }
		}
		  
		[XmlAttribute("CorrelationId")]
		[Bindable(true)]
		public string CorrelationId 
		{
			get { return GetColumnValue<string>(Columns.CorrelationId); }
			set { SetColumnValue(Columns.CorrelationId, value); }
		}
		  
		[XmlAttribute("TxnId")]
		[Bindable(true)]
		public string TxnId 
		{
			get { return GetColumnValue<string>(Columns.TxnId); }
			set { SetColumnValue(Columns.TxnId, value); }
		}
		  
		[XmlAttribute("BillingAgreementKey")]
		[Bindable(true)]
		public int? BillingAgreementKey 
		{
			get { return GetColumnValue<int?>(Columns.BillingAgreementKey); }
			set { SetColumnValue(Columns.BillingAgreementKey, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varTxKey,decimal? varAmount,int varBillingType,DateTime? varBillingDate,string varCorrelationId,string varTxnId,int? varBillingAgreementKey)
		{
			BillingPayment item = new BillingPayment();
			
			item.TxKey = varTxKey;
			
			item.Amount = varAmount;
			
			item.BillingType = varBillingType;
			
			item.BillingDate = varBillingDate;
			
			item.CorrelationId = varCorrelationId;
			
			item.TxnId = varTxnId;
			
			item.BillingAgreementKey = varBillingAgreementKey;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varBillingPaymentKey,int? varTxKey,decimal? varAmount,int varBillingType,DateTime? varBillingDate,string varCorrelationId,string varTxnId,int? varBillingAgreementKey)
		{
			BillingPayment item = new BillingPayment();
			
				item.BillingPaymentKey = varBillingPaymentKey;
			
				item.TxKey = varTxKey;
			
				item.Amount = varAmount;
			
				item.BillingType = varBillingType;
			
				item.BillingDate = varBillingDate;
			
				item.CorrelationId = varCorrelationId;
			
				item.TxnId = varTxnId;
			
				item.BillingAgreementKey = varBillingAgreementKey;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn BillingPaymentKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn TxKeyColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn AmountColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn BillingTypeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn BillingDateColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CorrelationIdColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn TxnIdColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn BillingAgreementKeyColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string BillingPaymentKey = @"Billing_Payment_Key";
			 public static string TxKey = @"Tx_Key";
			 public static string Amount = @"Amount";
			 public static string BillingType = @"Billing_Type";
			 public static string BillingDate = @"Billing_Date";
			 public static string CorrelationId = @"Correlation_ID";
			 public static string TxnId = @"txn_id";
			 public static string BillingAgreementKey = @"Billing_Agreement_Key";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
